{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1721312542277,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759243503754,
		"deployedBy":-1,
		"deployedDefinitionId":"68dbecef5e003e08cdeb2e1b",
		"status":"DEPLOYED",
		"version":85,
		"workflowVersion":145
	},
	"description":"",
	"edges":[
		{
			"fromNodeId":"d5b4i",
			"priority":0,
			"skip":false,
			"toNodeId":"XS6DY",
			"type":"next"
		},
		{
			"fromNodeId":"XS6DY",
			"priority":0,
			"skip":false,
			"toNodeId":"ip4Ay",
			"type":"next"
		},
		{
			"fromNodeId":"ip4Ay",
			"priority":0,
			"skip":false,
			"toNodeId":"R63iM",
			"type":"next"
		},
		{
			"fromNodeId":"R63iM",
			"priority":0,
			"skip":false,
			"toNodeId":"6OQH4",
			"type":"next"
		},
		{
			"fromNodeId":"6OQH4",
			"priority":0,
			"skip":false,
			"toNodeId":"gJvSe",
			"type":"next"
		},
		{
			"fromNodeId":"gJvSe",
			"priority":0,
			"skip":false,
			"toNodeId":"HjOcX",
			"type":"next"
		},
		{
			"fromNodeId":"HjOcX",
			"priority":0,
			"skip":false,
			"toNodeId":"sm8kL",
			"type":"loop"
		},
		{
			"fromNodeId":"sm8kL",
			"priority":0,
			"skip":false,
			"toNodeId":"J1QH0",
			"type":"next"
		},
		{
			"fromNodeId":"J1QH0",
			"priority":0,
			"skip":false,
			"toNodeId":"5bHV9",
			"type":"next"
		},
		{
			"fromNodeId":"5bHV9",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"QjmNp",
			"type":"if"
		},
		{
			"fromNodeId":"QjmNp",
			"priority":0,
			"skip":false,
			"toNodeId":"biXdh",
			"type":"loop"
		},
		{
			"fromNodeId":"biXdh",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"QjmNp",
			"type":"next"
		},
		{
			"fromNodeId":"5bHV9",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"MP13Z",
			"type":"next"
		},
		{
			"fromNodeId":"MP13Z",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"P2rKD",
			"type":"if"
		},
		{
			"fromNodeId":"MP13Z",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"FmBZJ",
			"type":"next"
		},
		{
			"fromNodeId":"QjmNp",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"HjOcX",
			"type":"next"
		},
		{
			"fromNodeId":"P2rKD",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"HjOcX",
			"type":"next"
		},
		{
			"fromNodeId":"FmBZJ",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"HjOcX",
			"type":"next"
		},
		{
			"fromNodeId":"HjOcX",
			"priority":0,
			"skip":false,
			"toNodeId":"PAZf0",
			"type":"next"
		},
		{
			"fromNodeId":"PAZf0",
			"priority":0,
			"skip":false,
			"toNodeId":"j9evf",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"6699251e2925925dd2563f2b",
	"lastModifiedBy":-1,
	"lcName":"5_text_to_automation_llm_response_to_workflowjson(do not touch))",
	"modifiedTime":1759243542205,
	"name":"5_Text_To_Automation_LLM_Response_To_WorkflowJson(DO NOT TOUCH))",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":46,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"d5b4i-1",
			"id":"d5b4i",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"subTitle":{
										"type":"string",
										"title":"subTitle"
									},
									"inputs":{
										"type":"object",
										"properties":{
											"repeatMode":{
												"type":"string",
												"title":"repeatMode"
											},
											"name":{
												"type":"string",
												"title":"name"
											},
											"branches":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"inputs":{
															"type":"object",
															"properties":{
																"name":{
																	"type":"string",
																	"title":"name"
																}
															},
															"title":"inputs",
															"additionalProperties":false
														},
														"id":{
															"type":"string",
															"title":"id"
														}
													},
													"additionalProperties":false
												},
												"title":"branches"
											}
										},
										"title":"inputs",
										"additionalProperties":false
									},
									"fallbackMode":{
										"type":"string",
										"title":"fallbackMode"
									},
									"groupId":{
										"type":"string",
										"title":"groupId"
									},
									"context":{
										"type":"object",
										"properties":{
											"appName":{
												"type":"string",
												"title":"appName"
											},
											"resourceVersion":{
												"type":"integer",
												"title":"resourceVersion"
											},
											"connectionId":{
												"type":"string",
												"title":"connectionId"
											},
											"resourceName":{
												"type":"string",
												"title":"resourceName"
											},
											"type":{
												"type":"string",
												"title":"type"
											}
										},
										"title":"context",
										"additionalProperties":false
									},
									"skip":{
										"type":"boolean",
										"title":"skip"
									},
									"id":{
										"type":"string",
										"title":"id"
									},
									"trigger":{
										"type":"object",
										"properties":{
											"type":{
												"type":"string",
												"title":"type"
											}
										},
										"title":"trigger",
										"additionalProperties":false
									},
									"title":{
										"type":"string",
										"title":"title"
									},
									"type":{
										"type":"string",
										"title":"type"
									}
								},
								"additionalProperties":false
							},
							"title":"nodes"
						},
						"name":{
							"type":"string",
							"title":"name"
						},
						"edges":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"name"
									},
									"toNodeId":{
										"type":"string",
										"title":"toNodeId"
									},
									"fromNodeId":{
										"type":"string",
										"title":"fromNodeId"
									},
									"type":{
										"type":"string",
										"title":"type"
									}
								},
								"additionalProperties":false
							},
							"title":"edges"
						},
						"description":{
							"type":"string",
							"title":"description"
						},
						"id":{
							"type":"string",
							"title":"id"
						},
						"version":{
							"type":"integer",
							"title":"version"
						},
						"connectionIdsList":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Connection Ids List"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"workflowJson":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Workflow Json"
						},
						"used_actions":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Used actions"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"title":"Trigger from automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.usedActions.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":507,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"d5b4i-1",
			"id":"XS6DY",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"workflowJson":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Work flow json"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"workflowJson":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Work flow json"
						},
						"usedActions":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Used actions"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def workflowJson=binding.hasVariable(\"workflowJson\")?binding.workflowJson:[:]\ndef usedActions=binding.hasVariable(\"usedActions\")?binding.usedActions:[]\ndef firstNode = workflowJson.get(0)\ndef firstActionMatch = usedActions.find {\n    it.action == firstNode.action && it.connector == firstNode.connector\n}\n\nif (firstActionMatch?.resourcetype == \"TRIGGER\") {\n    // Replace \"action\" key with \"trigger\"\n    firstNode.trigger = firstNode.remove(\"action\")\n}\nreturn [\"workflowJson\":workflowJson]",
				"parameters":{
					"workflowJson":"{{ d5b4i.outputs.workflowJson }}",
					"usedActions":{
						"source":"{{ d5b4i.outputs.used_actions }}",
						"ua:type":"mappedArray",
						"items":"{{ d5b4i.outputs.used_actions[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":52,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"d5b4i-1",
			"id":"ip4Ay",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"context":{
										"type":"object",
										"properties":{
											"appName":{
												"type":"string",
												"title":"App Name"
											},
											"resourceName":{
												"type":"string",
												"title":"Resource Name"
											}
										},
										"additionalProperties":false,
										"title":"Context",
										"required":[]
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"nodes",
							"required":[]
						},
						"edges":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"edges",
							"required":[]
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"workflowJson":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Workflow Json"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"// import groovy.json.JsonSlurper\n// import groovy.json.JsonOutput \n// def jsonSlurper = new JsonSlurper()\n//def workflowJson = jsonSlurper.parseText('[{\"connector\":\"calendly\",\"trigger\":\"calendly_new_event\"},{\"connector\":\"zoom\",\"action\":\"zoom_create_or_schedule_meeting\"},{\"connector\":\"gmail\",\"action\":\"gmail_send_email\"}]')\n\ndef nodes = []\ndef edges = []\n\n//add a start node\ndef context = [\"appName\": \"callables\", \"resourceName\": \"callables_from_automation\"]\ndef trigger = [\"type\": \"CALLABLE\"]\ndef inputs = {\n\n}\ndef startNodeId = generateRandomString()\ndef groupId = startNodeId + \"-1\";\ndef startNode = [\"context\": context, \"trigger\": trigger, \"title\": \"Trigger from automation\", \"fallbackMode\": \"STOP\", \"groupId\": groupId, \"inputs\": inputs, \"skip\": false, \"type\": \"START\", \"id\": startNodeId]\n\n\n\ndef fromNodeId = startNodeId\ndef firstNode  = null\n\nif(workflowJson.get(0).trigger != null || workflowJson.get(0).action == \"callables_from_automation\") {\n    create_node(nodes, edges, workflowJson.remove(0), startNodeId, [:], groupId)\n} else {\n    nodes << startNode\n}\n\nfor (node in workflowJson) {\n    def toNodeId = generateRandomString();\n    def tailIds =create_node(nodes, edges, node, toNodeId, groupId)\n\n    edges << [\"fromNodeId\": fromNodeId, \"toNodeId\": toNodeId, \"type\": \"next\"]\n    fromNodeId = tailIds?.last() ?: toNodeId;\n}\n\n\ndef firstRealNode = nodes.find { it.type == \"START\" }\ndef lastNode = nodes.last()\ndef validStartResources = [\"callables_from_automation\", \"callables_from_api\"]\ndef returnMapping = [\n    \"callables_from_automation\": \"callables_return_to_automation\",\n    \"callables_from_api\"       : \"callables_return_response_to_api\"\n]\n\nif (firstRealNode?.context?.appName == \"callables\" &&\n    validStartResources.contains(firstRealNode?.context?.resourceName)) {\n\n    def startResourceName = firstRealNode.context.resourceName\n    def returnResourceName = returnMapping[startResourceName]\n\n    if (lastNode?.context?.resourceName != returnResourceName) {\n        def responseNodeId = generateRandomString()\n        def responseContext = [\n            \"appName\"     : \"callables\",\n            \"resourceName\": returnResourceName,\n            \"type\"        : \"STOP\"\n        ]\n        def responseNode = [\n            \"context\"     : responseContext,\n            \"title\"       : \"Response to \" + (startResourceName == \"callables_from_api\" ? \"API\" : \"Automation\"),\n            \"fallbackMode\": \"STOP\",\n            \"groupId\"     : groupId,\n            \"inputs\"      : [:],\n            \"skip\"        : false,\n            \"type\"        : \"ACTION\",\n            \"id\"          : responseNodeId,\n            \"subTitle\"    : \"Callables\"\n        ]\n        nodes << responseNode\n        edges << [\"fromNodeId\": fromNodeId, \"toNodeId\": responseNodeId, \"type\": \"next\"]\n    }\n}\n\ndef lastNodeForWorkflow=nodes.last()\nif(firstRealNode?.context?.appName != \"callables\" && firstRealNode?.context?.resourceName != \"callables_from_automation\" && lastNodeForWorkflow?.context?.appName== \"callables\" && lastNodeForWorkflow?.context?.resourceName==\"callables_return_to_automation\")\n{\n    nodes.remove(nodes.size()-1)\n    edges.remove(edges.size()-1)\n}\nif(firstRealNode?.context?.appName != \"callables\" && firstRealNode?.context?.resourceName != \"callables_from_api\" && lastNodeForWorkflow?.context?.appName== \"callables\" && lastNodeForWorkflow?.context?.resourceName==\"callables_return_response_to_api\")\n{\n    nodes.remove(nodes.size()-1)\n    edges.remove(edges.size()-1)\n}\n// println(JsonOutput.toJson([\"nodes\": nodes, \"edges\": edges]))\nreturn [\"nodes\": nodes, \"edges\": edges]\n\n def create_node(def nodes, def edges, def node, def nodeId, def branchInputs = [:], def groupId,\n                 def loopbackNodeId = null) {\n     def tailNodeIds=[]\n     def nodeInputs = [:]\n     def type = \"ACTION\";\n     def defaultBranchContext = [\"appName\":\"branch_condition\", \"resourceName\":\"branch_condition\", \"type\":\"APPLICATION\"]\n     def defaultBranch = [\"context\": defaultBranchContext, \"fallbackMode\":\"STOP\", \"skip\": false, \"title\": \"\", \"type\": \"BRANCH_CONDITION\"]\n     def nodeContext = [\"appName\": node.connector, \"type\": \"APPLICATION\"]\n\n     if (!branchInputs.isEmpty()) {\n         defaultBranch.put(\"id\", nodeId)\n         defaultBranch.put(\"inputs\", branchInputs)\n         defaultBranch.put(\"groupId\", groupId)\n         nodes << defaultBranch\n         toNodeId = generateRandomString()\n         edges << [\"fromNodeId\": nodeId, \"toNodeId\": toNodeId, \"type\": \"next\"]\n         nodeId = toNodeId\n     }\n\n     if (node.connector == 'loop'|| node.connector == 'pdf_by_unifyapps') {\n         nodeContext.put(\"resourceName\", node.action);\n         nodeInputs.put(\"repeatMode\", \"SINGLE\")\n         def loopNodes = node.subflow.get(\"1\")\n         def previousNodeId = nodeId\n\n         loopNodes.each { loopNode ->\n             def currentLoopNodeId = generateRandomString()\n             create_node(nodes, edges, loopNode, currentLoopNodeId, [:], nodeId + \"@\" + groupId + \"@l\", nodeId)\n             edges << [\"fromNodeId\": previousNodeId, \"toNodeId\": currentLoopNodeId, \"type\": \"loop\"]\n             previousNodeId = currentLoopNodeId\n         }\n\n         type = \"LOOP\"\n     } else if (node.connector == 'branch_condition') {\n         nodeContext.put(\"type\", \"BRANCH\")\n         nodeContext.put(\"appName\", \"branch\")\n         def branches = []\n         nodeInputs.put(\"branches\", branches);\n         node.subflow.each { key, value ->\n             def branchName = \"Branch\" + key\n             def inputForBranch = [\"name\": branchName]\n             def branchNodes = value\n             def previousNodeId = nodeId\n\n             branchNodes.each { branchNode ->\n                 def branchNodeId = generateRandomString()\n                 create_node(nodes, edges, branchNode, branchNodeId, inputForBranch, nodeId + \"@\" + groupId + \"@\" + key, loopbackNodeId)\n                 edges << [\"fromNodeId\": previousNodeId, \"toNodeId\": branchNodeId, \"type\": \"branch\", \"name\": key]\n                 previousNodeId = branchNodeId\n             }\n\n             branches.add([\"id\": key, \"inputs\": inputForBranch])\n         }\n\n         branches.add([\"id\": \"default\"])\n         type = \"BRANCH\"\n     } else if (node.connector == 'if_else') {\n         type = \"IF_ELSE\"\n         def yesNodeId = generateRandomString()\n         def noNodeId = generateRandomString()\n         def lastYesNodeId=nodeId\n         def lastNoNodeId=nodeId\n         def yesBranchNodes = node.subflow.get(\"1\")\n         def noBranchNodes = node.subflow.get(\"2\")\n\n         def previousYesNodeId = nodeId\n         def previousNoNodeId = nodeId\n\n         yesBranchNodes.each { yesNode ->\n             def currentYesNodeId = generateRandomString()\n             create_node(nodes, edges, yesNode, currentYesNodeId, [:], nodeId + \"@\" + groupId + \"@y\")\n             edges << [\"fromNodeId\": previousYesNodeId, \"toNodeId\": currentYesNodeId, \"type\": \"if\", \"name\": \"yes\"]\n             previousYesNodeId = currentYesNodeId\n         }\n         lastYesNodeId=previousYesNodeId\n         noBranchNodes.each { noNode ->\n             def currentNoNodeId = generateRandomString()\n             create_node(nodes, edges, noNode, currentNoNodeId, [:], nodeId + \"@\" + groupId + \"@n\")\n             edges << [\"fromNodeId\": previousNoNodeId, \"toNodeId\": currentNoNodeId, \"type\": \"next\", \"name\": \"no\"]\n             previousNoNodeId = currentNoNodeId\n         }\n         lastNoNodeId=previousNoNodeId\n         if(lastYesNodeId!=nodeId)\n         {\n            tailNodeIds.add(lastYesNodeId)\n         }\n         \n         if(lastNoNodeId!=nodeId)\n         {\n            tailNodeIds.add(lastNoNodeId)\n         }\n     } else {\n         if(node.action == null) {\n             nodeContext.put(\"resourceName\", node.trigger)\n         } else {\n             nodeContext.put(\"resourceName\", node.action)\n         }\n     }\n\n     def convertedNode = [\"context\": nodeContext, \"title\": getTitleCasedName(node.action, node.connector), \"fallbackMode\": \"STOP\", \"groupId\": groupId, \"inputs\": nodeInputs, \"skip\": false, \"type\": type, \"id\": nodeId, \"subTitle\": node.connector.capitalize()]\n\n     if(node.trigger != null) {\n         convertedNode.put(\"trigger\", [\"type\":\"EVENT\"])\n         convertedNode.put(\"type\", \"START\")\n         convertedNode.put(\"title\",getTitleCasedName(node.trigger, node.connector) )\n     }\n\n     if (loopbackNodeId != null) {\n         edges << [\"fromNodeId\": nodeId, \"toNodeId\": loopbackNodeId, \"type\": \"next\", \"name\": \"loopback\"]\n     }\n\n     nodes << convertedNode\n     if (tailNodeIds.isEmpty()) {\n        tailNodeIds << nodeId\n    }\n    return tailNodeIds\n }\n\n\nString getTitleCasedName(String input, String appName) {\n    if(input == null) {\n        return \"\"\n    }\n    input = input.substring(Math.min(input.length(), appName.length() + 1))\n    String[] words = input.split('_')\n    String titleCase = words.collect {\n        word -> word.capitalize()\n    }.join(' ')\n    return titleCase\n}\n\ndef generateRandomString() {\n    def chars = ('a'..'z') + ('A'..'Z')\n    def random = new Random()\n    def randomString = (1..5).collect {\n        chars[random.nextInt(chars.size())]\n    }.join()\n    return randomString\n}\n",
				"isAsync":false,
				"parameters":{
					"workflowJson":"{{ XS6DY.outputs.result.workflowJson }}"
				}
			},
			"skip":false,
			"subTitle":"Convert workflowJson to nodes and edges",
			"title":"Execute groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":118,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"d5b4i-1",
			"id":"R63iM",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"Connection ID List",
				"ua:list_type":"STRING"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"Connection ID List",
							"disableActions":true,
							"items":{
								"type":"string"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Connection ID List",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2234,
				"resourceName":"storage_by_unifyapps_get_records_by_ids",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"d5b4i-1",
			"id":"6OQH4",
			"index":0,
			"inputs":{
				"object_type":"e_node_builder_record",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"ids":{
					"source":"{{ ip4Ay.outputs.result.nodes }}",
					"ua:type":"mappedArray",
					"items":"{{ ip4Ay.outputs.result.nodes[0].context.appName }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"nodebuilderRecords",
			"title":"Get records by IDs",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2234,
				"resourceName":"storage_by_unifyapps_get_records_by_ids",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"d5b4i-1",
			"id":"gJvSe",
			"index":0,
			"inputs":{
				"object_type":"e_node_builder_resource_record",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"ids":{
					"source":"{{ ip4Ay.outputs.result.nodes }}",
					"ua:type":"mappedArray",
					"items":"{{ ip4Ay.outputs.result.nodes[0].context.resourceName }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"nbr Records",
			"title":"Get records by IDs",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":90,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"d5b4i-1",
			"id":"HjOcX",
			"index":0,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ ip4Ay.outputs.result.nodes }}"
			},
			"skip":false,
			"subTitle":"Loop on each Node",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"standard_entities",
				"resourceVersion":0,
				"resourceName":"standard_entities_get_connections",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"HjOcX@d5b4i-1@l",
			"id":"sm8kL",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"appName",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ HjOcX.outputs.item.context.appName }}"
							}
						},
						{
							"property":"id",
							"filter":{
								"operator":"EQUAL",
								"value":"6755a3c79ac7d262060183cb3"
							}
						}
					],
					"operator":"AND"
				},
				"offset":0,
				"size":20
			},
			"skip":false,
			"subTitle":"Temp addition of connectionId for testing",
			"title":"Get connections",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":55,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"HjOcX@d5b4i-1@l",
			"id":"J1QH0",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"size":{
							"type":"integer",
							"title":"Size"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"connections":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Connections"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def size = 0\nif (binding.hasVariable('connections')) {\n    size = connections.size()\n} else {\n    println \"Warning: 'connections' variable is not available.\"\n}\nreturn [\"size\": size]\n",
				"isAsync":false,
				"parameters":{
					"connections":{
						"source":"{{ sm8kL.outputs.connections }}",
						"ua:type":"mappedArray",
						"items":"{{ sm8kL.outputs.connections[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Connection Size",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":47,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"HjOcX@d5b4i-1@l",
			"id":"5bHV9",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ J1QH0.outputs.result.size }}",
						"filter":{
							"operator":"EQUAL",
							"value":"1"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":90,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5bHV9@HjOcX@d5b4i-1@l@y",
			"id":"QjmNp",
			"index":0,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ sm8kL.outputs.connections }}"
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":65,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"QjmNp@5bHV9@HjOcX@d5b4i-1@l@y@l",
			"id":"biXdh",
			"index":0,
			"inputs":{
				"itemToAdd":"{{ QjmNp.outputs.item.appName }}@{{ QjmNp.outputs.item.id }}",
				"insertLocation":"END",
				"listName":"{{ R63iM.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":23,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5bHV9@HjOcX@d5b4i-1@l@n",
			"id":"MP13Z",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ J1QH0.outputs.result.size }}",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":65,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"MP13Z@5bHV9@HjOcX@d5b4i-1@l@n@y",
			"id":"P2rKD",
			"index":0,
			"inputs":{
				"itemToAdd":"{{ HjOcX.outputs.item.context.appName }}@NONE",
				"insertLocation":"END",
				"listName":"{{ R63iM.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":65,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"MP13Z@5bHV9@HjOcX@d5b4i-1@l@n@n",
			"id":"FmBZJ",
			"index":0,
			"inputs":{
				"itemToAdd":"{{ HjOcX.outputs.item.context.appName }}@MANY",
				"insertLocation":"END",
				"listName":"{{ R63iM.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":55,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"d5b4i-1",
			"id":"PAZf0",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"subTitle":{
										"type":"string",
										"title":"subTitle"
									},
									"inputs":{
										"type":"object",
										"title":"inputs",
										"properties":{
											"repeatMode":{
												"type":"string",
												"title":"Repeat Mode"
											},
											"name":{
												"type":"string",
												"title":"Name"
											},
											"branches":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"inputs":{
															"type":"object",
															"properties":{
																"name":{
																	"type":"string",
																	"title":"Name"
																}
															},
															"additionalProperties":false,
															"title":"Inputs",
															"required":[]
														},
														"id":{
															"type":"string",
															"title":"Id"
														}
													},
													"additionalProperties":false
												},
												"title":"Branches",
												"required":[]
											}
										},
										"required":[]
									},
									"fallbackMode":{
										"type":"string",
										"title":"fallbackMode"
									},
									"groupId":{
										"type":"string",
										"title":"groupId"
									},
									"context":{
										"type":"object",
										"properties":{
											"appName":{
												"type":"string",
												"title":"appName"
											},
											"resourceName":{
												"type":"string",
												"title":"resourceName"
											},
											"type":{
												"type":"string",
												"title":"type"
											},
											"resourceVersion":{
												"type":"string",
												"title":"Resource Version"
											},
											"connectionId":{
												"type":"string",
												"title":"Connection Id"
											}
										},
										"title":"context",
										"additionalProperties":false,
										"required":[]
									},
									"skip":{
										"type":"boolean",
										"title":"skip"
									},
									"id":{
										"type":"string",
										"title":"id"
									},
									"trigger":{
										"type":"object",
										"properties":{
											"type":{
												"type":"string",
												"title":"type"
											}
										},
										"title":"trigger",
										"additionalProperties":false
									},
									"title":{
										"type":"string",
										"title":"title"
									},
									"type":{
										"type":"string",
										"title":"type"
									}
								},
								"additionalProperties":false
							},
							"title":"nodes"
						},
						"edges":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"toNodeId":{
										"type":"string",
										"title":"toNodeId"
									},
									"fromNodeId":{
										"type":"string",
										"title":"fromNodeId"
									},
									"type":{
										"type":"string",
										"title":"type"
									},
									"name":{
										"type":"string",
										"title":"Name"
									}
								},
								"additionalProperties":false
							},
							"title":"edges",
							"required":[]
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Nodes"
						},
						"edges":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Edges"
						},
						"connectionList":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Connection List"
						},
						"nbrList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"NodebuilderResource List"
						},
						"nbList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Nodebuilder List"
						}
					},
					"additionalProperties":false,
					"required":[
						"nbrList",
						"nbList"
					]
				},
				"compile_static":false,
				"code":"def connectionMap = [:]\n\nif (binding.hasVariable('connectionList')) {\n    connectionList?.each { item ->\n        try {\n            def parts = item?.split('@')\n            def appName = parts?.getAt(0)\n            def connectionId = parts?.getAt(1)\n            if (appName && connectionId && connectionId!=\"NONE\" && connectionId!=\"MANY\") {\n                connectionMap[appName] = connectionId\n            }\n        } catch(e) {\n            println \"Error processing item: ${item}, error: ${e.message}\"\n        }\n    }\n\n    def nbrMap = [:]\n    if(binding.hasVariable('nbrList')) {\n        nbrList.collectEntries{nbr->[(nbr.id)\n        : (nbr.properties?.displayName)]}\n    }\n\n     def nbMap = [:]\n    if(binding.hasVariable('nbList')) {\n        nbList.collectEntries{nb->[(nb.id) : (nb.properties?.displayName)]}\n    }\n\n    nodes?.each { node ->\n        def appName = node?.context?.appName\n        def resourceName = node?.context?.resourceName\n\n        if (appName && connectionMap.containsKey(appName)) {\n            node.context[\"connectionId\"] = connectionMap[appName]\n        }\n\n        if (appName && node.subTitle && appName.toLowerCase() == node.subTitle.toLowerCase() && nbMap[appName]) {\n            node.subTitle = nbMap[appName]\n        }\n\n         if (resourceName && node.title && resourceName?.contains(node.title)) {\n            if (nbrMap[resourceName]) {\n                node.subTitle = nbrMap[resourceName]\n            }\n        }\n    }\n}\n\n\nif (!binding.hasVariable('edges')) {\n    edges = []\n}\nreturn [\"nodes\": nodes, \"edges\": edges]\n",
				"isAsync":false,
				"parameters":{
					"nodes":{
						"source":"{{ ip4Ay.outputs.result.nodes }}",
						"ua:type":"mappedArray",
						"items":"{{ ip4Ay.outputs.result.nodes[0] }}"
					},
					"edges":{
						"source":"{{ ip4Ay.outputs.result.edges }}",
						"ua:type":"mappedArray",
						"items":"{{ ip4Ay.outputs.result.edges[0] }}"
					},
					"connectionList":{
						"source":"{{ R63iM.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ R63iM.outputs.items[0] }}"
					},
					"nbList":{
						"source":"{{ 6OQH4.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ 6OQH4.outputs.objects[0] }}"
					},
					"nbrList":{
						"source":"{{ gJvSe.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ gJvSe.outputs.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Add connectionId to node list",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":42,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"d5b4i-1",
			"id":"j9evf",
			"index":0,
			"inputs":{
				"result":{
					"nodes":{
						"ua:type":"mappedArray",
						"items":{
							"inputs":{
								"branches":{
									"ua:type":"mappedArray",
									"items":{
										"inputs":{
											"name":"{{ PAZf0.outputs.result.nodes[0].inputs.branches[0].inputs.name }}"
										},
										"id":"{{ PAZf0.outputs.result.nodes[0].inputs.branches[0].id }}"
									},
									"source":"{{ PAZf0.outputs.result.nodes[0].inputs.branches }}"
								},
								"repeatMode":"{{ PAZf0.outputs.result.nodes[0].inputs.repeatMode }}",
								"name":"{{ PAZf0.outputs.result.nodes[0].inputs.name }}"
							},
							"context":{
								"appName":"{{ PAZf0.outputs.result.nodes[0].context.appName }}",
								"resourceVersion":"{{ PAZf0.outputs.result.nodes[0].context.resourceVersion }}",
								"connectionId":"{{ PAZf0.outputs.result.nodes[0].context.connectionId }}",
								"resourceName":"{{ PAZf0.outputs.result.nodes[0].context.resourceName }}",
								"type":"{{ PAZf0.outputs.result.nodes[0].context.type }}"
							},
							"skip":"{{ PAZf0.outputs.result.nodes[0].skip }}",
							"subTitle":"{{ PAZf0.outputs.result.nodes[0].subTitle }}",
							"fallbackMode":"{{ PAZf0.outputs.result.nodes[0].fallbackMode }}",
							"groupId":"{{ PAZf0.outputs.result.nodes[0].groupId }}",
							"id":"{{ PAZf0.outputs.result.nodes[0].id }}",
							"trigger":{
								"type":"{{ PAZf0.outputs.result.nodes[0].trigger.type }}"
							},
							"title":"{{ PAZf0.outputs.result.nodes[0].title }}",
							"type":"{{ PAZf0.outputs.result.nodes[0].type }}"
						},
						"source":"{{ PAZf0.outputs.result.nodes }}"
					},
					"name":"AutogeneratedWorkflow",
					"edges":{
						"ua:type":"mappedArray",
						"items":{
							"name":"{{ PAZf0.outputs.result.edges[0].name }}",
							"toNodeId":"{{ PAZf0.outputs.result.edges[0].toNodeId }}",
							"fromNodeId":"{{ PAZf0.outputs.result.edges[0].fromNodeId }}",
							"type":"{{ PAZf0.outputs.result.edges[0].type }}"
						},
						"source":"{{ PAZf0.outputs.result.edges }}"
					},
					"description":"AutogeneratedWorkflow from LLM json Response",
					"connectionIdsList":{
						"source":"{{ R63iM.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ R63iM.outputs.items[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Return data to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":520,
	"projectId":63,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"Text_to_Workflow"
	],
	"version":146
}
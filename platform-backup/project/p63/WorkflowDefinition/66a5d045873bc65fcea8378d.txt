{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1722142789530,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1758655404406,
		"deployedBy":0,
		"deployedDefinitionId":"68d2f3ac38757c179b123df9",
		"status":"DEPLOYED",
		"version":78,
		"workflowVersion":115
	},
	"edges":[
		{
			"fromNodeId":"ItgTj",
			"priority":0,
			"skip":false,
			"toNodeId":"co9m5",
			"type":"next"
		},
		{
			"fromNodeId":"co9m5",
			"priority":0,
			"skip":false,
			"toNodeId":"SpE0Y",
			"type":"next"
		},
		{
			"fromNodeId":"SpE0Y",
			"priority":0,
			"skip":false,
			"toNodeId":"bCTeQ",
			"type":"next"
		},
		{
			"fromNodeId":"bCTeQ",
			"priority":0,
			"skip":false,
			"toNodeId":"8zK26",
			"type":"next"
		},
		{
			"fromNodeId":"8zK26",
			"priority":0,
			"skip":false,
			"toNodeId":"SKVj7",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"66a5d045873bc65fcea8378d",
	"lastModifiedBy":-1,
	"lcName":"text_to_workflow_get_payload_for_llm",
	"modifiedTime":1759243582256,
	"name":"Text_To_workflow_Get_payload_for_LLM",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":46,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"sf12D-1",
			"id":"ItgTj",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"payloads":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"additional":{
										"type":"object",
										"properties":{
											"used_actions":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"connector":{
															"type":"string",
															"title":"connector"
														},
														"action":{
															"type":"string",
															"title":"action"
														},
														"actionDescription":{
															"type":"string",
															"title":"actionDescription"
														},
														"resourceType":{
															"type":"string",
															"title":"resourceType"
														}
													},
													"additionalProperties":false
												},
												"title":"used_actions"
											},
											"rephrasedUserMessage":{
												"type":"string",
												"title":"Rephrased User Message"
											},
											"currentWorkflowActions":{
												"type":"string",
												"title":"Current Workflow Actions"
											}
										},
										"title":"additional",
										"additionalProperties":false,
										"required":[]
									},
									"messages":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"role":{
													"type":"string",
													"title":"role"
												},
												"blocks":{
													"type":"array",
													"items":{
														"type":"object",
														"properties":{
															"data":{
																"type":"object",
																"properties":{
																	"text":{
																		"type":"string",
																		"title":"text"
																	}
																},
																"title":"data",
																"additionalProperties":false
															},
															"blockType":{
																"type":"string",
																"title":"blockType"
															}
														},
														"additionalProperties":false
													},
													"title":"blocks"
												}
											},
											"additionalProperties":false
										},
										"title":"messages"
									}
								},
								"additionalProperties":false
							},
							"title":"payloads"
						}
					},
					"additionalProperties":false
				},
				"setup":{
					"properties":{
						"caseId":{
							"type":"string",
							"title":"Case Id"
						},
						"workflow":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Workflow"
						},
						"usedActions":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"connector":{
										"type":"string",
										"title":"Connector"
									},
									"action":{
										"type":"string",
										"title":"Action"
									},
									"actionDescription":{
										"type":"string",
										"title":"Action Description"
									},
									"resourceType":{
										"type":"string",
										"title":"Resource Type"
									}
								},
								"additionalProperties":false
							},
							"title":"Used Actions",
							"required":[]
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger from automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":115,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"sf12D-1",
			"id":"co9m5",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"List items",
							"ui:description":"Set the initial values in the list, defaults to empty"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object",
									"properties":{
										"connector":{
											"type":"string",
											"title":"connector"
										},
										"action":{
											"type":"string",
											"title":"action"
										},
										"actionDescription":{
											"type":"string",
											"title":"actionDescription"
										},
										"resourcetype":{
											"type":"string",
											"title":"resourcetype"
										}
									},
									"additionalProperties":false
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray",
					"source":"{{ ItgTj.outputs.usedActions }}",
					"items":{
						"connector":"{{ ItgTj.outputs.usedActions[0].connector }}",
						"action":"{{ ItgTj.outputs.usedActions[0].action }}",
						"actionDescription":"{{ ItgTj.outputs.usedActions[0].actionDescription }}",
						"resourcetype":"{{ ItgTj.outputs.usedActions[0].resourceType }}"
					}
				},
				"ua:title":"List",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"List",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"connector":{
										"type":"string",
										"title":"connector"
									},
									"action":{
										"type":"string",
										"title":"action"
									},
									"actionDescription":{
										"type":"string",
										"title":"actionDescription"
									},
									"resourcetype":{
										"type":"string",
										"title":"resourcetype"
									}
								}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":1070,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"sf12D-1",
			"id":"SpE0Y",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_caseId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ ItgTj.outputs.caseId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_message",
				"sortBy":[
					{
						"field":"cTm",
						"order":"DESC"
					}
				],
				"page":{
					"limit":6,
					"offset":0
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":55,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"sf12D-1",
			"id":"bCTeQ",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"used_action":{
							"type":"string",
							"title":"Used Action"
						},
						"currentWorkflowActions":{
							"type":"string",
							"title":"Current Workflow Actions"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"workflow":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Workflow"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"code":"class Node {\n    Map properties\n    \n    Node(Map properties) {\n        this.properties = properties\n    }\n}\n\nclass Edge {\n    Map properties\n    \n    Edge(Map properties) {\n        this.properties = properties\n    }\n}\n\ndef workflow = binding.getVariable('workflow')\nList<Node> nodes = workflow.nodes.collect { node ->\n    new Node((Map)node)\n}\n\nList<Edge> edges = workflow.edges.collect { edge ->\n    new Edge((Map)edge)\n}\n\nstatic List<Node> postToPre(List<Node> nodes, List<Edge> edges) {\n    Map<String, Node> nodeMap = [:]\n    Map<String, List<Edge>> outgoingEdges = [:]\n    Map<String, String> parentMap = [:]\n    \n    nodes.each { node ->\n        nodeMap[node.properties.id] = node\n    }\n    \n    edges.each { edge ->\n        outgoingEdges.computeIfAbsent(edge.properties.fromNodeId, { k -> [] }).add(edge)\n        if (edge.properties.type != \"loop\") {\n            parentMap[edge.properties.toNodeId] = edge.properties.fromNodeId\n        }\n    }\n    \n    String startNodeId = nodes.find { it.properties.type == \"START\" }?.properties?.id\n    if (!startNodeId && !nodes.isEmpty()) {\n        startNodeId = nodes.first().properties.id\n    } else if (nodes.isEmpty()) {\n        throw new RuntimeException(\"No nodes available to process\")\n    }\n    \n    List<Node> result = []\n    Set<String> visited = [] as Set\n    dfs(startNodeId, nodeMap, outgoingEdges, parentMap, visited, result)\n    \n    return result\n}\n\nstatic void dfs(String nodeId, Map<String, Node> nodeMap, Map<String, List<Edge>> outgoingEdges, \n                Map<String, String> parentMap, Set<String> visited, List<Node> result) {\n    if (visited.contains(nodeId)) return\n    visited.add(nodeId)\n    \n    Node node = nodeMap[nodeId]\n    \n    if (node.properties.type in [\"IF_ELSE\", \"BRANCH\", \"LOOP\"]) {\n        result.add(node)\n        List<Edge> edges = outgoingEdges.getOrDefault(nodeId, [])\n        edges.each { edge ->\n            dfs(edge.properties.toNodeId, nodeMap, outgoingEdges, parentMap, visited, result)\n        }\n    } else {\n        result.add(node)\n        String nextNodeId = getNextNodeId(nodeId, outgoingEdges)\n        if (nextNodeId) {\n            dfs(nextNodeId, nodeMap, outgoingEdges, parentMap, visited, result)\n        }\n    }\n}\n\nstatic String getNextNodeId(String nodeId, Map<String, List<Edge>> outgoingEdges) {\n    List<Edge> edges = outgoingEdges.getOrDefault(nodeId, [])\n    Edge nextEdge = edges.find { it.properties.type == \"next\" }\n    return nextEdge?.properties?.toNodeId\n}\n\ndef result1 = postToPre(nodes, edges);\n\n// println JsonOutput.prettyPrint(JsonOutput.toJson(result1.collect { it.properties }))\n\n\nMap<String, Integer> indexMapping = [:]\nMap<String, Node> nodeMap = [:]\n\nTreeMap<String, Object> makeThingsHappen(List<Node> nodes, Map<String, Integer> indexMapping, Map<String, Node> nodeMap) {\n    TreeMap<String, Object> map = getTreeMap(true)  // sort by index\n    String main_groId = nodes.first().properties.groupId\n    indexMapping[main_groId] = 0\n    map[getKey(main_groId,indexMapping)] = getTreeMap(true)\n    for(int ind = 0; ind< nodes.size(); ind++){\n        Node node = nodes[ind]\n        nodeMap[node.properties.id] = node\n        indexMapping[node.properties.id] = ind + 1\n        String[] splitid = node.properties.groupId.split(\"@\")\n        int index = getPosition(splitid, main_groId)\n        Object current_place = map[getKey(main_groId, indexMapping)]\n        for(int i= 1 ; i <= index; i++){\n            String next = getKey(splitid[index - i],indexMapping)\n            current_place = ((TreeMap<String, Object>) current_place)[next]\n//            println(current_place)   //sdfasdfasd\n            String secondNext = getKey(\"${splitid[index + i]}_${splitid[index - i]}\",indexMapping)\n            if (!((TreeMap<String, Object>) current_place).containsKey(secondNext)) {\n                ((TreeMap<String, Object>) current_place)[secondNext] = getTreeMap(true)\n            }\n            current_place = ((TreeMap<String, Object>) current_place)[secondNext]   // -> y/n, l, 1/2/3 + \"___\" : index\n        }\n        switch (node.properties.type) {\n            case \"BRANCH\":\n            case \"LOOP\":\n                ((TreeMap<String, Object>) current_place)[getKey(node.properties.id,indexMapping)] = getTreeMap(true)\n                break\n            case \"IF_ELSE\":\n                ((TreeMap<String, Object>) current_place)[getKey(node.properties.id,indexMapping)] =  getTreeMap(false)\n                break\n            case \"ACTION\":\n            case \"STOP\":\n            case \"START\":\n                TreeMap<String, String> details = new TreeMap<>()\n                details[\"connector\"] = node.properties.context?.appName ?: node.properties.title\n                details[\"action\"] = node.properties.context?.resourceName ?: node.properties.title\n                ((TreeMap<String, Object>) current_place)[getKey(node.properties.id,indexMapping)] = details\n                break\n        }\n    }\n    return map\n}\n\nList<Object> makeFinalOutput(TreeMap<String, Object> map, Map<String, Integer> indexMapping, Map<String, Node> nodeMap) {\n    List<Object> finalOutput = []\n    map.each { key, value ->\n        TreeMap<String, Object> valueMap = (TreeMap<String, Object>) value\n        String nodeId = key.split(\":\")[1]\n        Node node = nodeMap[nodeId]\n\n        switch (node.properties.type) {\n            case \"BRANCH\":\n                Map<String, Object> branchNode = [:]\n                Map<String, Object> branch = [:]\n                branchNode[\"connector\"] = node.properties.context?.appName ?: node.properties.title\n                branchNode[\"action\"] = node.properties.context?.appName ?: node.properties.title\n                branchNode[\"subflow\"] = branch\n                valueMap.each { subBranches ->\n                    String subBranchId = subBranches.key.split(\":\")[1].split(\"_\")[0]\n                    TreeMap<String, Object> valueMapSub = (TreeMap<String, Object>) subBranches.value\n                    branch[subBranchId] = makeFinalOutput(valueMapSub,indexMapping, nodeMap)\n                }\n                finalOutput.add(branchNode)\n                break\n            case \"LOOP\":\n                Map<String, Object> loopNode = [:]\n                valueMap.each { subLoop ->\n                    TreeMap<String, Object> loop = new TreeMap<>()\n                    loop[\"1\"] = makeFinalOutput((TreeMap<String, Object>) subLoop.value, indexMapping, nodeMap)\n                    loopNode[\"connector\"] = node.properties.context?.appName ?: node.properties.title\n                    loopNode[\"action\"] = node.properties.context?.resourceName ?: node.properties.title\n                    loopNode[\"subflow\"] = loop\n\n                }\n                finalOutput.add(loopNode)\n                break\n            case \"IF_ELSE\":\n                Map<String, Object> conditionNode = [:]\n                TreeMap<String, Object> condition = new TreeMap<String, Object>({ str1, str2 ->\n                    return str1 <=> str2\n                })\n                conditionNode[\"connector\"] = node.properties.context?.appName ?: node.properties.title\n                conditionNode[\"action\"] = node.properties.context?.appName ?: node.properties.title\n                conditionNode[\"subflow\"] = condition\n                valueMap.each { subCondition ->\n                    String subConditionId = subCondition.key.split(\":\")[1].split(\"_\")[0]\n                    if(subConditionId == \"y\"){\n                        subConditionId = \"1\"\n                    }\n                    else{\n                        subConditionId = \"2\"\n                    }\n                    condition[subConditionId] = makeFinalOutput((TreeMap<String, Object>) subCondition.value, indexMapping, nodeMap)\n                }\n                finalOutput.add(conditionNode)\n                break\n            case \"ACTION\":\n            case \"STOP\":\n            case \"START\":\n                finalOutput.add(value)\n                break\n        }\n    }\n    return finalOutput\n}\n\nint getPosition(String[] arr, String targetValue) {\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i].equals(targetValue)){\n            return i\n        }\n    }\n    return -1\n}\n\nTreeMap<String, Object> getTreeMap(boolean ascending) {\n    return new TreeMap<String, Object>({ str1, str2 ->\n        Integer index1 = Integer.parseInt(str1.split(\":\")[0])\n        Integer index2 = Integer.parseInt(str2.split(\":\")[0])\n        int compareIndex = ascending ? Integer.compare(index1, index2) : Integer.compare(index2, index1)\n        return compareIndex != 0 ? compareIndex : ascending ? str1.compareTo(str2) : str2.compareTo(str1)\n    })\n}\n\nString getKey(String groupId, Map<String, Integer> indexMapping) {\n    if (indexMapping.containsKey(groupId)) {\n        return \"${indexMapping[groupId]}:${groupId}\"\n    }\n    return \"0:${groupId}\"\n}\n\nstatic String convertFilter(Object filterObject) {\n    if (filterObject == null || !(filterObject instanceof Map)) {\n        return \"\"\n    }\n\n    Map<String, Object> filterMap = (Map<String, Object>) filterObject\n    if (filterMap.isEmpty()) {\n        return \"\"\n    }\n\n    if (filterMap.containsKey(\"filters\")) {\n        return processFilters(filterMap)\n    } else if (filterMap.containsKey(\"resolvedFilter\")) {\n        return processResolvedFilter(filterMap)\n    } else {\n        return processSingleFilter(filterMap)\n    }\n}\n\nprivate static String processResolvedFilter(Map<String, Object> filterMap) {\n    if (filterMap == null) {\n        return \"\"\n    }\n    return \"filter(${((Map<String, Object>) filterMap[\"resolvedFilter\"])[\"filter\"]}) \"\n}\n\nprivate static String processFilters(Map<String, Object> filterMap) {\n    if (!filterMap.containsKey(\"filters\") || !filterMap.containsKey(\"operator\")) {\n        return \"\"\n    }\n\n    List<Map<String, Object>> filters = (List<Map<String, Object>>) filterMap[\"filters\"]\n    if (filters == null) {\n        return \"\"\n    }\n\n    String operator = (String) filterMap[\"operator\"]\n    if (operator == null) {\n        return \"\"\n    }\n\n    StringBuilder result = new StringBuilder()\n    filters.eachWithIndex { filter, i ->\n        if (filter == null) return  // Skip null filters\n        String expression = convertFilter(filter)\n        result.append(expression)\n        if (i < filters.size() - 1) {\n            result.append(\" \").append(operator).append(\" \")\n        }\n    }\n    return \"(${result.toString()})\"\n}\n\nprivate static String processSingleFilter(Map<String, Object> filterMap) {\n    if (filterMap == null) {\n        return \"\"  // Null map handling\n    }\n\n    String property = (String) filterMap[\"property\"]\n    if (property == null) {\n        return \"\"  // Null property handling\n    }\n\n    Map<String, Object> filter = (Map<String, Object>) filterMap[\"filter\"]\n    if (filter == null) {\n        return \"\"  // Null filter handling\n    }\n\n    String operator = (String) filter[\"operator\"]\n    String value = (String) filter[\"value\"]\n    if (operator == null || value == null) {\n        return \"\"  // Null operator or value handling\n    }\n\n    String symbol = convertOperator(operator)\n    return \"$property $symbol $value\"\n}\n\nprivate static String convertOperator(String operator) {\n    if (operator == null) {\n        return \"\"  // Null operator handling\n    }\n    switch (operator) {\n        case \"EQUAL\":\n            return \"==\"\n        case \"NOT_EQUAL\":\n            return \"!=\"\n        default:\n            return operator  // Default case for unknown operators\n    }\n}\n\nTreeMap<String, Object> result = makeThingsHappen(result1,indexMapping, nodeMap)\nString statrNode = \"0:\" + nodes.first().properties.groupId\nList<Object> finalOutput = makeFinalOutput(result[statrNode], indexMapping, nodeMap)\ndef currentWorkflowActions = com.unifyapps.infra.utils.JsonUtils.toJson(finalOutput);\nif(currentWorkflowActions.contains(\"Select a trigger event\")) {\n    currentWorkflowActions = \"[]\"\n}\nreturn [\"used_action\": finalOutput.toString(), \"currentWorkflowActions\": currentWorkflowActions]",
				"isAsync":false,
				"parameters":{
					"workflow":"{{ ItgTj.outputs.workflow }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":52,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"sf12D-1",
			"id":"8zK26",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"payloads":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"additional":{
										"type":"object",
										"properties":{
											"used_actions":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{},
													"additionalProperties":false
												},
												"title":"used_actions",
												"required":[]
											},
											"rephrasedUserMessage":{
												"type":"string",
												"title":"Rephrased User Message"
											}
										},
										"title":"additional",
										"additionalProperties":false,
										"required":[]
									},
									"messages":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"role":{
													"type":"string",
													"title":"role"
												},
												"blocks":{
													"type":"array",
													"items":{
														"type":"object",
														"properties":{
															"data":{
																"type":"object",
																"properties":{
																	"text":{
																		"type":"string",
																		"title":"text"
																	}
																},
																"title":"data",
																"additionalProperties":false,
																"required":[]
															},
															"blockType":{
																"type":"string",
																"title":"blockType"
															}
														},
														"additionalProperties":false
													},
													"title":"blocks"
												}
											},
											"additionalProperties":false
										},
										"title":"messages"
									}
								},
								"additionalProperties":false
							},
							"title":"payloads"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"properties":{
						"messages":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Messages"
						},
						"workflow":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Workflow"
						},
						"predictedUsedActions":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"connector":{
										"type":"string",
										"title":"Connector"
									},
									"action":{
										"type":"string",
										"title":"Action"
									},
									"resourceType":{
										"type":"string",
										"title":"Resource Type"
									},
									"actionDescription":{
										"type":"string",
										"title":"Action Description"
									}
								},
								"additionalProperties":false
							},
							"title":"Predicted Used Actions",
							"required":[]
						},
						"used_action":{
							"type":"string",
							"title":"Used Action"
						}
					},
					"required":[]
				},
				"code":"def messagesPayload = []\ndef used_actions = getusedActionsFromWorkflow(workflow) \ndef rephrasedLastMessage = \"\"\n\nint i=0\nfor(msg in messages) {\n   \n     if(i==1) {  try {\n def actionNamesInUsedActions = used_actions.collect { it.action }\n def actionNamesInPredictedActions = predictedUsedActions.collect { it.action }\n\nif(predictedUsedActions?.size()>0 && actionNamesInPredictedActions != actionNamesInUsedActions) {\n    messagesPayload.add(getMessagePayload(\"assistant\", getAssistantReply(used_actions)))\n    messagesPayload.add(getMessagePayload(\"user\", \"update the workflow\"))\n}\n} catch(Exception e) {println(e)}\n    }\n\n    def role = \"user\"\n    def text = msg.properties.content.text\n    if(msg.properties.type != \"fan\") {\n        role = \"assistant\"\n        text = msg.properties.content.html\n        if(text == null || text?.isBlank()) {\n            text = msg.properties.content.text\n        }\n    } else {\n        if(rephrasedLastMessage?.isBlank()) {\n            rephrasedLastMessage = msg.properties.additional.rephrasedUserMessage\n        }\n    }\n    try {\n    messagesPayload.add(getMessagePayload(role, text))\n    } catch(Exception e) {\n        println(msg)\n    }\n    i++;\n}\n\n//println(JsonOutput.toJson([\"payloads\": [[\"messages\": messagesPayload, \"additional\": [ \"used_actions\":used_actions ]]]]))\n\nreturn [\"payloads\": [[\"messages\": messagesPayload, \"additional\": [ \"used_actions\":used_actions, \"rephrasedUserMessage\":  rephrasedLastMessage]]]]\n\n\ndef getMessagePayload(String role, String text) {\n    def blocks = [[\"data\": [\"text\": text], \"blockType\": \"Typography\"]]\n    return [\"role\" : role, \"blocks\" : blocks]\n}\n\ndef getusedActionsFromWorkflow(def workflow) {\n    def usedActions = []    \n    for(node in workflow.nodes){\n        if(node.context == null) {\n            continue\n        }\n        def usedAction = [\"connector\": node.context.appName, \"action\": node.context.resourceName,\n         \"actionDescription\": node.title]\n\n         if(node.type == \"START\" && node.trigger.type == \"EVENT\") {\n            usedAction.put(\"resourceType\", \"TRIGGER\")\n         } else {\n            usedAction.put(\"resourceType\", \"ACTION\")\n         }\n         usedActions.add(usedAction)\n    }\n\n    return usedActions\n}\n\ndef getAssistantReply(def used_actions) {\n    def reason = [\"reasoning\": \"I've updated the workflow for you\", \"workflow\": used_action]\n    return convertToJSON(reason)\n}\n\n\ndef convertToJSON(obj) {\n    if (obj instanceof Map) {\n       \"{\" + obj.collect { key, value ->\n            \"\\\"$key\\\": ${convertToJSON(value)}\"\n        }.join(\", \") + \"}\"\n    } else if (obj instanceof List) {\n        \"[\" + obj.collect { value ->\n            convertToJSON(value)\n        }.join(\", \") + \"]\"\n    } else if (obj instanceof String) {\n        \"\\\"${obj.replace('\"', '\\\\\"')}\\\"\"\n    } else {\n        obj.toString()\n    }\n}",
				"isAsync":false,
				"parameters":{
					"workflow":"{{ ItgTj.outputs.workflow }}",
					"messages":{
						"items":"{{ SpE0Y.outputs.objects }}",
						"ua:type":"mappedArray",
						"source":"{{ SpE0Y.outputs.objects }}"
					},
					"predictedUsedActions":{
						"ua:type":"mappedArray",
						"source":"{{ co9m5.outputs.items }}",
						"items":{
							"connector":"{{ co9m5.outputs.items[0].connector }}",
							"action":"{{ co9m5.outputs.items[0].action }}",
							"resourceType":"{{ co9m5.outputs.items[0].resourcetype }}",
							"actionDescription":"{{ co9m5.outputs.items[0].actionDescription }}"
						}
					},
					"used_action":"{{ bCTeQ.outputs.result.used_action }}"
				}
			},
			"skip":false,
			"subTitle":"Code By UnifyApps",
			"title":"Execute groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":42,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"sf12D-1",
			"id":"SKVj7",
			"index":0,
			"inputs":{
				"result":{
					"payloads":{
						"source":"{{ 8zK26.outputs.result.payloads }}",
						"ua:type":"mappedArray",
						"items":{
							"additional":{
								"used_actions":{
									"source":"{{ 8zK26.outputs.result.payloads[0].additional.used_actions }}",
									"ua:type":"mappedArray",
									"items":"{{ 8zK26.outputs.result.payloads[0].additional.used_actions }}"
								},
								"rephrasedUserMessage":"{{ 8zK26.outputs.result.payloads[0].additional.rephrasedUserMessage }}",
								"currentWorkflowActions":"{{ bCTeQ.outputs.result.currentWorkflowActions }}"
							},
							"messages":{
								"source":"{{ 8zK26.outputs.result.payloads[0].messages }}",
								"ua:type":"mappedArray",
								"items":{
									"role":"{{ 8zK26.outputs.result.payloads[0].messages[0].role }}",
									"blocks":{
										"source":"{{ 8zK26.outputs.result.payloads[0].messages[0].blocks }}",
										"ua:type":"mappedArray",
										"items":{
											"data":{
												"text":"{{ 8zK26.outputs.result.payloads[0].messages[0].blocks[0].data.text }}"
											},
											"blockType":"{{ 8zK26.outputs.result.payloads[0].messages[0].blocks[0].blockType }}"
										}
									}
								}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Return data to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1866,
	"projectId":63,
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"Text_to_Workflow"
	],
	"version":116
}
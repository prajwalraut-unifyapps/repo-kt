{
	"appsUsed":[
		
	],
	"createdTime":1752752497798,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1752762018278,
		"deployedBy":39713,
		"deployedDefinitionId":"687906a262d7239e6111d086",
		"status":"DEPLOYED",
		"version":1,
		"workflowVersion":5
	},
	"edges":[
		{
			"fromNodeId":"n_6KyoI",
			"priority":0,
			"skip":false,
			"toNodeId":"n_3qGNE",
			"type":"next"
		},
		{
			"fromNodeId":"n_3qGNE",
			"priority":0,
			"skip":false,
			"toNodeId":"n_OjGJW",
			"type":"next"
		},
		{
			"fromNodeId":"n_OjGJW",
			"priority":0,
			"skip":false,
			"toNodeId":"n_F5m3f",
			"type":"next"
		},
		{
			"fromNodeId":"n_F5m3f",
			"priority":0,
			"skip":false,
			"toNodeId":"n_R7anI",
			"type":"next"
		}
	],
	"id":"6878e1715821f42782a25ce0",
	"lastModifiedBy":39713,
	"lcName":"[virtu-support-checkin-bot-fn] checkin-rm-project-diff",
	"modifiedTime":1759565828507,
	"name":"[virtu-support-checkin-bot-fn] checkin-rm-project-diff",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":865,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Hw4aZ-1",
			"id":"n_6KyoI",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"queryParams":{
						"type":"object",
						"properties":{
							"email":{
								"type":"string",
								"title":"Email"
							},
							"startDate":{
								"type":"string",
								"title":"Start Date"
							},
							"endDate":{
								"type":"string",
								"title":"End Date"
							}
						},
						"additionalProperties":false,
						"required":[]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"200",
						"body":{
							"type":"object",
							"properties":{
								"UnAvailableProjectNumberList":{
									"type":"string",
									"title":"Un Available Project Number List"
								}
							},
							"additionalProperties":false,
							"required":[
								"UnAvailableProjectNumberList"
							]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":156,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_Hw4aZ-1",
			"id":"n_3qGNE",
			"index":2,
			"inputs":{
				"code":"\n public class ResponseList {\n    public List<string> UnAvailableProjectNumberList { get; set; } }\n\n\n public class Classification {\n        public string ClassCategory { get; set; }\n        public string ClassCode { get; set; } }\n\npublic class Construct {\n        public DateTime creationDate { get; set; }\n        public object creationSec { get; set; }\n        public DateTime lastModifiedDate { get; set; }\n        public object lastModifiedSec { get; set; }\n        public int assignmentDtlId { get; set; }\n        public int allocPercentage { get; set; }\n        public object attribute1 { get; set; }\n        public object attribute2 { get; set; }\n        public object attribute3 { get; set; }\n        public object attribute4 { get; set; }\n        public object attribute5 { get; set; }\n        public object attribute6 { get; set; }\n        public object attribute7 { get; set; }\n        public object attribute8 { get; set; }\n        public object attribute9 { get; set; }\n        public object attribute10 { get; set; }\n        public object attribute11 { get; set; }\n        public object attribute12 { get; set; }\n        public object attribute13 { get; set; }\n        public object attribute14 { get; set; }\n        public string attribute15 { get; set; }\n        public string billability { get; set; }\n        public object billabilityStatus { get; set; }\n        public string billabilityType { get; set; }\n        public int? billablePercentage { get; set; }\n        public int? createdBy { get; set; }\n        public DateTime createdDate { get; set; }\n        public object createdSec { get; set; }\n        public string dtlAssignmentName { get; set; }\n        public string endDate { get; set; }\n        public object expandableFlag { get; set; }\n        public object isLocked { get; set; }\n        public int? sourceDtlId { get; set; }\n        public string isDeleted { get; set; }\n        public int lastUpdatedBy { get; set; }\n        public DateTime lastUpdatedDate { get; set; }\n        public object lastUpdatedSec { get; set; }\n        public string startDate { get; set; } }\n\npublic class Project {\n        public string id { get; set; }\n        public string projectID { get; set; }\n        public string projectName { get; set; }\n        public string projectNumber { get; set; }\n        public string projectType { get; set; }\n        public string projectDesc { get; set; }\n        public DateTime projectStartDate { get; set; }\n        public DateTime projectCompletionDate { get; set; }\n        public object projectClosedDate { get; set; }\n        public string projectStatusCode { get; set; }\n        public string projectStatusName { get; set; }\n        public string projectSbuSegment { get; set; }\n        public string customerNumber { get; set; }\n        public string customerName { get; set; }\n        public string segmentId { get; set; }\n        public string deliveryCenter { get; set; }\n        public string createdDate { get; set; }\n        public string projectBusiness { get; set; }\n        public DateTime lastUpdatedDate { get; set; }\n        public string projectManagerPersonNumber { get; set; }\n        public string projectManagerEmailAddress { get; set; }\n        public object sbu { get; set; }\n        public object groupSbu { get; set; }\n        public string projectOrganization { get; set; }\n        public string projectManagerName { get; set; }\n        public List<Classification> classifications { get; set; }\n        public string account { get; set; }\n        public string clientName { get; set; } }\n\npublic class ProjectRole {\n        public object roleId { get; set; }\n        public string roleName { get; set; }\n        public DateTime startDate { get; set; }\n        public DateTime endDate { get; set; }\n        public string activeStatus { get; set; } }\n\npublic class RMProjectResponse {\n        public object assignmentId { get; set; }\n        public ProjectRole projectRole { get; set; }\n        public DateTime startDate { get; set; }\n        public DateTime endDate { get; set; }\n        public object lastWorkingDate { get; set; }\n        public object allocationPercentage { get; set; }\n        public Project project { get; set; }\n        public string workingAtc { get; set; }\n        public List<Construct> construct { get; set; }\n       // public int billRate { get; set; }\n        public string locationStatus { get; set; }\n        public string category { get; set; } }\n\n public class Item {\n        public object WorkPhoneCountryCode { get; set; }\n        public object WorkPhoneAreaCode { get; set; }\n        public object WorkPhoneNumber { get; set; }\n        public object WorkPhoneExtension { get; set; }\n        public object WorkPhoneLegislationCode { get; set; }\n        public object WorkMobilePhoneCountryCode { get; set; }\n        public object WorkMobilePhoneAreaCode { get; set; }\n        public string WorkMobilePhoneNumber { get; set; }\n        public object WorkMobilePhoneExtension { get; set; }\n        public object WorkMobilePhoneLegislationCode { get; set; }\n        public object HomePhoneCountryCode { get; set; }\n        public object HomePhoneAreaCode { get; set; }\n        public object HomePhoneNumber { get; set; }\n        public object HomePhoneExtension { get; set; }\n        public string Country { get; set; }\n        public object Region2 { get; set; }\n        public object AddressLine3 { get; set; }\n        public string AddressLine2 { get; set; }\n        public string AddressLine1 { get; set; }\n        public string City { get; set; }\n        public string FirstName { get; set; }\n        public string DisplayName { get; set; }\n        public string Salutation { get; set; }\n        public object MiddleName { get; set; }\n        public string LastName { get; set; }\n        public object PreferredName { get; set; }\n        public string PersonNumber { get; set; }\n        public string WorkEmail { get; set; }\n        public long LegalEntityId { get; set; }\n        public string HireDate { get; set; }\n        public object TerminationDate { get; set; }\n        public long PersonId { get; set; }\n        public string EffectiveStartDate { get; set; }\n        public string UserName { get; set; }\n        public string WorkerType { get; set; }\n        public List<Role> roles { get; set; } }\n\n    public class Role {\n        public string RoleName { get; set; }\n        public string RoleCommonName { get; set; }\n        public string RoleGUID { get; set; }\n        public string StartDate { get; set; }\n        public object EndDate { get; set; } }\n\n    public class EmpMinimalRoot {\n        public List<Item> items { get; set; } }\n\n\n\n\n\n\npublic class KeyVaultOps {\n        // KeyVaultOperations keyVaultOps = new KeyVaultOperations();\n    AzureServiceTokenProvider azureServiceTokenProvider = new AzureServiceTokenProvider();\n    public async Task<IDictionary<string, string>> getSecrets(string KeyVaultName, List<string> keysList) {\n        // KeyVaultClient keyVaultClient =\n        // new KeyVaultClient(\n        //     new KeyVaultClient.AuthenticationCallback(azureServiceTokenProvider.KeyVaultTokenCallback));\n        // IDictionary<string, string> keyVaultSecrets = new Dictionary<string, string>();\n        // try\n        // {\n        //     foreach (string secretName in keysList)\n        //     {\n        //         var secret = await keyVaultClient\n        //            .GetSecretAsync($\"https://{KeyVaultName}.vault.azure.net/secrets/{secretName}\")\n        //            .ConfigureAwait(false);\n        //         // obj.value=secret.ToString();\n        //         keyVaultSecrets.Add(secretName, secret.Value);\n        //     }\n        // }\n        // catch\n        // {\n        //     throw;\n        // }\n        // return keyVaultSecrets;\n\n  using (KeyVaultClient keyVaultClient = new KeyVaultClient(\n      new KeyVaultClient.AuthenticationCallback(azureServiceTokenProvider.KeyVaultTokenCallback)))\n  {\n      IDictionary<string, string> keyVaultSecrets = new Dictionary<string, string>();\n      try\n      {\n          foreach (string secretName in keysList)\n          {\n              var secret = await keyVaultClient\n              .GetSecretAsync($\"https://{KeyVaultName}.vault.azure.net/secrets/{secretName}\")\n              .ConfigureAwait(false);\n              // obj.value=secret.ToString();\n              keyVaultSecrets.Add(secretName, secret.Value);\n          }\n      }\n      catch\n      {\n          throw;\n      }\n      return keyVaultSecrets; } } }\n\n\n\npublic class KetVaultHandler\n  {\n    String KeyVaultName = \"\";\n\n    public KetVaultHandler()\n    {\n      KeyVaultName = Environment.GetEnvironmentVariable(\"KeyVaultName\");\n    }\n\n    public IDictionary<String, String> getSecret()\n    {\n      // Get KeyVault Values\n      KeyVaultOps kvOpsBoj = new KeyVaultOps();\n      // List<KeyValutObject> kvObjectList = new List<KeyValutObject>();\n      List<String> kvObjectList = new List<String>();\n      kvObjectList.Add(\"snow-bot-app-pwd\");\n      kvObjectList.Add(\"snow-bot-app-appID\");\n      kvObjectList.Add(\"virtu-Integration-AD-Tenent\");\n      kvObjectList.Add(\"Virtu-Business-Public-sub-key\");\n      kvObjectList.Add(\"Virtusa-People-Subscription-Key\");\n      kvObjectList.Add(\"Virtu-Business-Internal-sub-key\");\n      kvObjectList.Add(\"ADServiceAccount-Snow-ServicePrinciple\");\n      kvObjectList.Add(\"ADServiceAccount-Snow-securityCredencials\");\n      kvObjectList.Add(\"RMPaasResourceId\");\n\n\n      IDictionary<String, String> keyValutsSecrets = new Dictionary<String, String>();\n      try\n      {\n        Object obj = kvOpsBoj.getSecrets(KeyVaultName, kvObjectList).GetAwaiter().GetResult();\n        keyValutsSecrets = (IDictionary<String, String>)obj;\n      }\n      //   catch (Exception e)\n      catch (KeyVaultErrorException)\n      {\n        // Console.WriteLine($\"Key Vault error: {ex.Message}\");\n      }\n      catch (HttpRequestException)\n      {\n        // Console.WriteLine($\"HTTP request error: {ex.Message}\");\n      }\n      catch (TaskCanceledException)\n      {\n        // Console.WriteLine($\"Task was canceled: {ex.Message}\");\n      }\n      catch (OperationCanceledException)\n      {\n        // Console.WriteLine($\"Operation was canceled: {ex.Message}\");\n      }\n      // catch (Exception)\n      // {\n      //     //log.LogError(\"Error on getting KeyVault values \" + e.StackTrace);\n\n      // } \n\n      /*\n        String checkinSkillBotAppPassword = \"mur7Q~3BBQ6OMP0mgcb4yznszpHCa_8Z77tbm\";\n                  String checkinSkillBotAppID = \"534dbbda-3603-415f-aa15-9324ba178af3\";\n                  String virtusaTenantID = \"0d85160c-5899-44ca-acc8-db1501b993b6\";\n                  String virtusaBusinessPublicSubkey = \"dd36199dae5f44a089259cdbb2fa054c\";\n                  String virtusaPeopleSubkey = \"07a7960d8e1b46dcb49418a26ebf10c9\";*/\n\n      /*  keyValutsSecrets.Add(\"snow-bot-app-pwd\", \"UT87Q~ED_P.fH61uTGFfDkeHKOV45qwl0~zTq\");\n        keyValutsSecrets.Add(\"snow-bot-app-appID\", \"81ed145c-3c8f-4116-b71c-56c137e8f173\");\n        keyValutsSecrets.Add(\"virtu-Integration-AD-Tenent\", \"0d85160c-5899-44ca-acc8-db1501b993b6\");\n        // keyValutsSecrets.Add(\"Virtu-Business-Public-sub-key\", \"dd36199dae5f44a089259cdbb2fa054c\");\n      //  keyValutsSecrets.Add(\"Virtusa-People-Subscription-Key\", \"07a7960d8e1b46dcb49418a26ebf10c9\");\n        // keyValutsSecrets.Add(\"Virtu-Business-Internal-sub-key\", \"1afa0b11d8c54bbbb416bf9ecf5eb8aa\");\n          keyValutsSecrets.Add(\"Virtu-Business-Public-sub-key\", \"dd36199dae5f44a089259cdbb2fa054c\");\n        keyValutsSecrets.Add(\"Virtusa-People-Subscription-Key\", \"eb393a2936024d92aa84d71e018e0400\");\n        keyValutsSecrets.Add(\"Virtu-Business-Internal-sub-key\", \"1afa0b11d8c54bbbb416bf9ecf5eb8aa\");\n\n        keyValutsSecrets.Add(\"ADServiceAccount-Snow-ServicePrinciple\", \"CN=Chathura Prasad Amarathunga,OU=Colombo,OU=Virtusans,OU=ATC Colombo,DC=Virtusa,DC=com\");\n        keyValutsSecrets.Add(\"ADServiceAccount-Snow-securityCredencials\", \"\");*/\n\n      return keyValutsSecrets; } }\n\n\n public class GetAADToken\n    {\n        String APIMServerUrl = \"\";\n        String KeyVaultName = \"\";\n        String TokenAPIURLPath = \"\";\n        String CheckinProjectAPIPath = \"\";\n        String ProjectAPIURLPath = \"\";\n        String EmployeeMinimalUrl = \"\";\n        public GetAADToken()\n        {\n            APIMServerUrl = Environment.GetEnvironmentVariable(\"APIMServerURL\");\n            KeyVaultName = Environment.GetEnvironmentVariable(\"KeyVaultName\");\n            TokenAPIURLPath = Environment.GetEnvironmentVariable(\"TokenAPIURLPath\");\n            CheckinProjectAPIPath = Environment.GetEnvironmentVariable(\"CheckinProjectAPIPath\");\n            ProjectAPIURLPath = Environment.GetEnvironmentVariable(\"ProjectAPIURLPath\");\n            EmployeeMinimalUrl = Environment.GetEnvironmentVariable(\"EmployeeMinimalUrl\");\n        }\n\n        public async Task<string> GetToken()\n        {\n            // Get KeyVault Values\n            // KeyVaultOps kvOpsBoj = new KeyVaultOps();\n            // List<KeyValutObject> kvObjectList = new List<KeyValutObject>();\n            // List<String> kvObjectList = new List<String>();\n            /*\n                        kvObjectList.Add(\"checkinSkill-bot-app-pwd\");\n                        kvObjectList.Add(\"checkinSkill-bot-app-appID\");\n                        kvObjectList.Add(\"virtu-Integration-AD-Tenent\");\n                        kvObjectList.Add(\"Virtu-Business-Public-sub-key\");\n                        kvObjectList.Add(\"Virtusa-People-Subscription-Key\");\n            */\n\n            KetVaultHandler keyVaultHandlerObj = new KetVaultHandler();\n            IDictionary<String, String> keyValutsSecrets = keyVaultHandlerObj.getSecret();\n\n\n            /*   try\n               {\n                   Object obj = await kvOpsBoj.getSecrets(KeyVaultName, kvObjectList);\n               keyValutsSecrets = (IDictionary<String, String>)obj;\n               }\n               catch (Exception e)\n               {\n                   //log.LogError(\"Error on getting KeyVault values \" + e.StackTrace);\n\n               } */\n\n            String secureToken = keyValutsSecrets[\"snow-bot-app-pwd\"];\n            String checkinSkillBotAppID = keyValutsSecrets[\"snow-bot-app-appID\"];\n            // String virtusaTenantID = keyValutsSecrets[\"virtu-Integration-AD-Tenent\"];\n            String virtusaBusinessPublicSubkey = keyValutsSecrets[\"Virtu-Business-Public-sub-key\"];\n            // String virtusaPeopleSubkey = keyValutsSecrets[\"Virtusa-People-Subscription-Key\"];\n\n            String tokenRquestBody = \"client_id=\" + checkinSkillBotAppID + \"&grant_type=client_credentials&client_secret=\" + secureToken + \"&resource=fb37e32e-cf16-434b-93e6-3420f7bc11f9\";\n            String TokenAPI = APIMServerUrl.Replace(\"http://\", \"https://\") + TokenAPIURLPath;\n            String responseString = \"\";\n            String BearerToken = \"\";\n            // call API\n            using (var client = new HttpClient())\n            {\n\n                client.BaseAddress = new Uri(TokenAPI);\n                client.DefaultRequestHeaders.Accept.Clear();\n                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/x-www-form-urlencoded\"));\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", virtusaBusinessPublicSubkey);\n\n                using (var content = new StringContent(tokenRquestBody, Encoding.UTF8, \"application/x-www-form-urlencoded\"))\n                {\n                    // HTTP POST\n                    HttpResponseMessage response = client.PostAsync(TokenAPI, content).Result;\n                    if (response.IsSuccessStatusCode)\n                    {\n                        responseString = response.Content.ReadAsStringAsync().Result;\n                        // log.LogInformation(\"AD Token received successfully.\");\n                    }\n                    else\n                    {\n                        // log.LogError(\"Error on getting token. Status code: \" + response.StatusCode);\n                    }\n                    BearerToken = JsonConvert.DeserializeObject<TokenRespponse>(responseString).access_token;\n                }\n\n            }\n            return BearerToken;\n        }\n\n        // Get Token with the Audiance\n\n        public string GetToken(string audiance) {\n            // Get KeyVault Values\n            // KeyVaultOps kvOpsBoj = new KeyVaultOps();\n            // List<KeyValutObject> kvObjectList = new List<KeyValutObject>();\n            // List<String> kvObjectList = new List<String>();\n            /*\n                        kvObjectList.Add(\"checkinSkill-bot-app-pwd\");\n                        kvObjectList.Add(\"checkinSkill-bot-app-appID\");\n                        kvObjectList.Add(\"virtu-Integration-AD-Tenent\");\n                        kvObjectList.Add(\"Virtu-Business-Public-sub-key\");\n                        kvObjectList.Add(\"Virtusa-People-Subscription-Key\");\n            */\n\n            KetVaultHandler keyVaultHandlerObj = new KetVaultHandler();\n            IDictionary<String, String> keyValutsSecrets = keyVaultHandlerObj.getSecret();\n\n\n            /*   try\n               {\n                   Object obj = await kvOpsBoj.getSecrets(KeyVaultName, kvObjectList);\n               keyValutsSecrets = (IDictionary<String, String>)obj;\n               }\n               catch (Exception e)\n               {\n                   //log.LogError(\"Error on getting KeyVault values \" + e.StackTrace);\n\n               } */\n\n            String secureToken = keyValutsSecrets[\"snow-bot-app-pwd\"];\n            String checkinSkillBotAppID = keyValutsSecrets[\"snow-bot-app-appID\"];\n            // String virtusaTenantID = keyValutsSecrets[\"virtu-Integration-AD-Tenent\"];\n            String virtusaBusinessPublicSubkey = keyValutsSecrets[\"Virtu-Business-Public-sub-key\"];\n            // String virtusaPeopleSubkey = keyValutsSecrets[\"Virtusa-People-Subscription-Key\"];\n\n\n            String tokenRquestBody = \"client_id=\" + checkinSkillBotAppID + \"&grant_type=client_credentials&client_secret=\" + secureToken + \"&resource=\" + audiance;\n            String TokenAPI = APIMServerUrl.Replace(\"http://\", \"https://\") + TokenAPIURLPath;\n            String responseString = \"\";\n            String BearerToken = \"\";\n            // call API\n            using (var client = new HttpClient())\n            {\n\n                client.BaseAddress = new Uri(TokenAPI);\n                client.DefaultRequestHeaders.Accept.Clear();\n                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/x-www-form-urlencoded\"));\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", virtusaBusinessPublicSubkey);\n\n                using (var content = new StringContent(tokenRquestBody, Encoding.UTF8, \"application/x-www-form-urlencoded\"))\n                {\n                    // HTTP POST\n                    HttpResponseMessage response = client.PostAsync(TokenAPI, content).Result;\n                    if (response.IsSuccessStatusCode)\n                    {\n                        responseString = response.Content.ReadAsStringAsync().Result;\n                        // log.LogInformation(\"AD Token received successfully.\");\n                    }\n                    else\n                    {\n                        // log.LogError(\"Error on getting token. Status code: \" + response.StatusCode);\n                    }\n                    BearerToken = JsonConvert.DeserializeObject<TokenRespponse>(responseString).access_token; } }\n            return BearerToken; } }\n\npublic class GetV5ProjectDetails {\n        readonly String APIMServerUrl;\n        readonly String KeyVaultName;\n        readonly String TokenAPIURLPath;\n        readonly String CheckinProjectAPIPath;\n        readonly String ProjectAPIURLPath;\n        readonly String EmployeeMinimalUrl;\n\n        public GetV5ProjectDetails() {\n            APIMServerUrl = Environment.GetEnvironmentVariable(\"APIMServerURL\");\n            KeyVaultName = Environment.GetEnvironmentVariable(\"KeyVaultName\");\n            TokenAPIURLPath = Environment.GetEnvironmentVariable(\"TokenAPIURLPath\");\n            CheckinProjectAPIPath = Environment.GetEnvironmentVariable(\"CheckinProjectAPIPath\");\n            ProjectAPIURLPath = Environment.GetEnvironmentVariable(\"ProjectAPIURLPath\");\n            EmployeeMinimalUrl = Environment.GetEnvironmentVariable(\"EmployeeMinimalUrl\"); }\n        public async Task<List<VelocityProject>> GetV5Project(String startDate, String endDate, String userName) {\n            // Get KeyVault Values\n            // KeyVaultOps kvOpsBoj = new KeyVaultOps();\n            // List<KeyValutObject> kvObjectList = new List<KeyValutObject>();\n            // List<String> kvObjectList = new List<String>();\n            // Project Number List for return\n            String veloicyProjectNumberList = \"\";\n            // List<CheckinV5mapping> checkinv5MappingList = new List<CheckinV5mapping>();\n\n\n            KetVaultHandler keyVaultHandlerObj = new KetVaultHandler();\n            IDictionary<String, String> keyValutsSecrets = keyVaultHandlerObj.getSecret();//  new Dictionary<String, String>();\n\n\n            //  String virtusaTenantID = keyValutsSecrets[\"virtu-Integration-AD-Tenent\"];\n            String virtusaBusinessPublicSubkey = keyValutsSecrets[\"Virtu-Business-Public-sub-key\"];\n            // String virtusaPeopleSubkey = keyValutsSecrets[\"Virtusa-People-Subscription-Key\"];\n            String virtusaBusinessInternalSubkey = keyValutsSecrets[\"Virtu-Business-Internal-sub-key\"];\n\n\n            GetAADToken aADToken = new GetAADToken();\n            String BearerToken = aADToken.GetToken().GetAwaiter().GetResult();\n            // log.LogInformation(responseString);\n\n            // call Checkin API\n            String checkinProjectAPIURL = APIMServerUrl + CheckinProjectAPIPath;\n            String responseString = \"\";\n            Root checkinProjectResponse;\n\n            using (var client = new HttpClient())\n            {\n\n                client.BaseAddress = new Uri(checkinProjectAPIURL);\n                client.DefaultRequestHeaders.Accept.Clear();\n                // client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/x-www-form-urlencoded\"));\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", virtusaBusinessInternalSubkey);\n                client.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + BearerToken);\n\n                // HTTP GET\n                // String urlParameters = \"?FromDate=\" + startDate + \"&ToDate=\" + endDate + \"&Timestamp=0&Employee=\" + userName;\n                String urlParameters = \"?P_FROM_DATE=\" + startDate + \"&P_TO_DATE=\" + endDate + \"&P_IN_TIME_STAMP=0&p_emp_login_id=\" + userName;\n                HttpResponseMessage response = client.GetAsync(urlParameters).Result;\n                if (response.IsSuccessStatusCode)\n                {\n                    responseString = response.Content.ReadAsStringAsync().Result;\n                    // log.LogInformation(\"Checkin Project Data Received \");\n\n                }\n                else\n                {\n                    // log.LogError(\" error on getting Project  \" + responseString);\n                }\n                checkinProjectResponse = JsonConvert.DeserializeObject<Root>(responseString);\n                // log.LogInformation(\"ADD Lenght \" + checkinProjectResponse.Project.ADD.Count);\n\n            }\n            // Get All the velocity project ID ADD and Update lists\n            // if (checkinProjectResponse?.items != null)\n            // {\n            //     foreach (var item in checkinProjectResponse.items)\n            //     {\n            //         //log.LogInformation(item.projectname + \" \" + item.velocityprojectid);\n            //         veloicyProjectNumberList = veloicyProjectNumberList + \",\" + item.veloprojectnumber;\n            //         // CheckinV5mapping chev5mappingObj = new CheckinV5mapping();\n            //     }\n            // }\n            if (checkinProjectResponse?.items != null)\n            {\n                veloicyProjectNumberList = string.Join(\",\", checkinProjectResponse.items.Select(item => item.veloprojectnumber));\n            }\n\n\n\n            // log.LogInformation(\" project Numnber list \" + veloicyProjectNumberList);\n            // get the project detils \n\n            List<VelocityProject> v5Project = new List<VelocityProject>();\n            String v5ProjectResoponse = \"\";\n            String velocityProjectAPIBaseURL = APIMServerUrl + ProjectAPIURLPath;\n            using (var client = new HttpClient())\n            {\n\n                client.BaseAddress = new Uri(velocityProjectAPIBaseURL);\n                client.DefaultRequestHeaders.Accept.Clear();\n                // client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/x-www-form-urlencoded\"));\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", virtusaBusinessPublicSubkey);\n                client.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + BearerToken);\n\n                // HTTP GET\n                HttpResponseMessage response = client.GetAsync(\"?projectNumber=\" + veloicyProjectNumberList).Result;\n                if (response.IsSuccessStatusCode)\n                {\n                    v5ProjectResoponse = response.Content.ReadAsStringAsync().Result;\n                    // log.LogInformation(\"V5 project Data Received  Received \");\n\n                }\n                else\n                {\n                    // log.LogError(\" error on getting V5 Project  \" + v5ProjectResoponse);\n                }\n                // v5Project = JsonConvert.DeserializeObject<List<VelocityProject>>(v5ProjectResoponse);\n                v5Project.AddRange(JsonConvert.DeserializeObject<List<VelocityProject>>(v5ProjectResoponse) ?? new List<VelocityProject>());\n                // log.LogInformation(\"project Lenght \" + v5Project.Count);\n\n            }\n\n            // append PM name\n            // create PM person number List \n            // string PMPersonNumnerList = \"\";\n            StringBuilder PMPersonNumnerList = new StringBuilder();\n            Boolean first = true;\n\n            // foreach (var v5ProjectItem in v5Project)\n            // {\n            //     if (v5ProjectItem.projectManagerPersonNumber != null)\n            //     {\n\n\n            //         if (first)\n            //         {\n            //             // PMPersonNumnerList = v5ProjectItem.projectManagerPersonNumber;\n            //             PMPersonNumnerList.Append(v5ProjectItem.projectManagerPersonNumber);\n            //             first = false;\n            //             continue;\n            //         }\n            //         // PMPersonNumnerList = PMPersonNumnerList + \",\" + v5ProjectItem.projectManagerPersonNumber;\n            //         PMPersonNumnerList.AppendJoin(\",\", v5ProjectItem.projectManagerPersonNumber);\n            //     }\n            // }\n\n            foreach (var v5ProjectItem in v5Project.Where(item => item.projectManagerPersonNumber != null))\n            {\n                if (first)\n                {\n                    PMPersonNumnerList.Append(v5ProjectItem.projectManagerPersonNumber);\n                    first = false;\n                    continue;\n                }\n                PMPersonNumnerList.AppendJoin(\",\", v5ProjectItem.projectManagerPersonNumber);\n            }\n\n            EmpMinimalRoot empMinimalRootObj = getEmployeeList(PMPersonNumnerList.ToString(), virtusaBusinessPublicSubkey, BearerToken);\n\n\n            // Iterate chekin Project list\n            List<VelocityProject> v5ProjectDetailswithCheckinDataList = new List<VelocityProject>();\n            // filter Checkin Project List\n            var fromDate = DateTime.Parse(startDate);\n            var toDate = DateTime.Parse(endDate);\n\n            // List<checkin.project.Item> filteredCheckinProjectList = new List<checkin.project.Item>();\n            // filteredCheckinProjectList = checkinProjectResponse.items.Where(checkinProj => (checkinProj.userallocationstartdate <= fromDate) && checkinProj.userallocationenddate >= toDate).ToList();\n            // List<checkin.project.Item> filteredCheckinProjectList = checkinProjectResponse.items.Where(checkinProj => (checkinProj.userallocationstartdate <= toDate) && checkinProj.userallocationenddate >= fromDate).ToList();\n            List<checkin.project.Item> filteredCheckinProjectList = checkinProjectResponse?.items?\n                .Where(checkinProj => checkinProj.userallocationstartdate <= toDate && checkinProj.userallocationenddate >= fromDate)\n                .ToList() ?? new List<checkin.project.Item>();\n            // foreach (var item in checkinProjectResponse.items)\n            foreach (var item in filteredCheckinProjectList)\n            {\n\n                VelocityProject v5ProjObj = v5Project.FirstOrDefault(p => p.projectNumber == item.veloprojectnumber);\n\n\n                VelocityProject v5ProjObjN = new VelocityProject();\n                v5ProjObjN.checkinProjectId = item.projectid;\n                v5ProjObjN.projectID = v5ProjObj.projectID;\n                v5ProjObjN.projectName = item.projectname;\n                v5ProjObjN.projectNumber = v5ProjObj.projectNumber;\n                v5ProjObjN.projectStartDate = v5ProjObj.projectStartDate;\n                v5ProjObjN.projectCompletionDate = v5ProjObj.projectCompletionDate;\n                v5ProjObjN.projectClosedDate = v5ProjObj.projectClosedDate;\n\n                v5ProjObjN.projectStatusCode = v5ProjObj.projectStatusCode;\n                v5ProjObjN.projectStatusName = v5ProjObj.projectStatusName;\n                v5ProjObjN.customerNumber = v5ProjObj.customerNumber;\n                v5ProjObjN.customerName = v5ProjObj.customerName;\n                v5ProjObjN.projectManagerPersonNumber = v5ProjObj.projectManagerPersonNumber;\n                v5ProjObjN.projectManagerEmailAddress = v5ProjObj.projectManagerEmailAddress;\n                v5ProjObjN.projectCode = v5ProjObj.projectCode;\n                v5ProjObjN.typeDescription = v5ProjObj.typeDescription;\n                v5ProjObjN.projectTypeID = v5ProjObj.projectTypeID;\n                v5ProjObjN.scheduledStartDate = v5ProjObj.scheduledStartDate;\n                v5ProjObjN.scheduledFinishDate = v5ProjObj.scheduledFinishDate;\n                v5ProjObjN.targetStartDate = v5ProjObj.targetStartDate;\n\n                v5ProjObjN.targetFinishDate = v5ProjObj.targetFinishDate;\n                v5ProjObjN.organizationName = v5ProjObj.organizationName;\n\n                // append PM name\n                var minimalItem = empMinimalRootObj.items.FirstOrDefault(s => s.PersonNumber == v5ProjObjN.projectManagerPersonNumber);\n                if (minimalItem != null)\n                {\n                    v5ProjObjN.projectManagerName = minimalItem.DisplayName;\n                }\n\n\n                // log.LogInformation(\"v5ProjObj.projectName \" + v5ProjObj.projectName  + \"  \"+item.projectname);\n                v5ProjectDetailswithCheckinDataList.Add(v5ProjObjN);\n            }\n\n\n\n            /* foreach (var v5ProjectItem in v5Project)\n             {\n                 var minimalItem = empMinimalRootObj.items.FirstOrDefault(s => s.PersonNumber == v5ProjectItem.projectManagerPersonNumber);\n                 if (minimalItem != null)\n                 {\n                     v5ProjectItem.projectManagerName = minimalItem.DisplayName;\n                 }\n\n                 var checkinv5mapping = checkinv5MappingList.FirstOrDefault(s => s.velociyProjectNumber == v5ProjectItem.projectNumber);\n                 if (checkinv5mapping != null)\n                 {\n                     v5ProjectItem.checkinProjectId = checkinv5mapping.checkinProjectId;\n                     v5ProjectItem.projectName = checkinv5mapping.checkinProjectName;\n                 }\n             }*/\n\n            /*foreach (var item in v5ProjectDetailswithCheckinDataList)\n            {\n                log.LogInformation(\" project Name\" + item.projectName);\n            }*/\n            //return v5Project;\n            return v5ProjectDetailswithCheckinDataList;\n\n        }\n\n// get v5Project with accesstoken\n        public async Task<List<VelocityProject>> GetV5Project(String startDate, String endDate, String userName,string accessTokenVal)\n        {\n            // Get KeyVault Values\n            // KeyVaultOps kvOpsBoj = new KeyVaultOps();\n            // List<KeyValutObject> kvObjectList = new List<KeyValutObject>();\n            // List<String> kvObjectList = new List<String>();\n            // Project Number List for return\n            String veloicyProjectNumberList = \"\";\n            // List<CheckinV5mapping> checkinv5MappingList = new List<CheckinV5mapping>();\n\n\n            KetVaultHandler keyVaultHandlerObj = new KetVaultHandler();\n            IDictionary<String, String> keyValutsSecrets = keyVaultHandlerObj.getSecret();//  new Dictionary<String, String>();\n\n\n            //  String virtusaTenantID = keyValutsSecrets[\"virtu-Integration-AD-Tenent\"];\n            String virtusaBusinessPublicSubkey = keyValutsSecrets[\"Virtu-Business-Public-sub-key\"];\n            // String virtusaPeopleSubkey = keyValutsSecrets[\"Virtusa-People-Subscription-Key\"];\n            String virtusaBusinessInternalSubkey = keyValutsSecrets[\"Virtu-Business-Internal-sub-key\"];\n\n\n           // GetAADToken aADToken = new GetAADToken();\n            String BearerToken =accessTokenVal;\n            // log.LogInformation(responseString);\n\n            // call Checkin API\n            String checkinProjectAPIURL = APIMServerUrl + CheckinProjectAPIPath;\n            String responseString = \"\";\n            Root checkinProjectResponse;\n\n            using (var client = new HttpClient())\n            {\n\n                client.BaseAddress = new Uri(checkinProjectAPIURL);\n                client.DefaultRequestHeaders.Accept.Clear();\n                // client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/x-www-form-urlencoded\"));\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", virtusaBusinessInternalSubkey);\n                client.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + BearerToken);\n\n                // HTTP GET\n                // String urlParameters = \"?FromDate=\" + startDate + \"&ToDate=\" + endDate + \"&Timestamp=0&Employee=\" + userName;\n                String urlParameters = \"?P_FROM_DATE=\" + startDate + \"&P_TO_DATE=\" + endDate + \"&P_IN_TIME_STAMP=0&p_emp_login_id=\" + userName;\n                HttpResponseMessage response = client.GetAsync(urlParameters).Result;\n                if (response.IsSuccessStatusCode)\n                {\n                    responseString = response.Content.ReadAsStringAsync().Result;\n                    // log.LogInformation(\"Checkin Project Data Received \");\n\n                }\n                else\n                {\n                    // log.LogError(\" error on getting Project  \" + responseString);\n                }\n                checkinProjectResponse = JsonConvert.DeserializeObject<Root>(responseString);\n                // log.LogInformation(\"ADD Lenght \" + checkinProjectResponse.Project.ADD.Count);\n\n            }\n            // Get All the velocity project ID ADD and Update lists\n            // if (checkinProjectResponse?.items != null)\n            // {\n            //     foreach (var item in checkinProjectResponse.items)\n            //     {\n            //         //log.LogInformation(item.projectname + \" \" + item.velocityprojectid);\n            //         veloicyProjectNumberList = veloicyProjectNumberList + \",\" + item.veloprojectnumber;\n            //         // CheckinV5mapping chev5mappingObj = new CheckinV5mapping();\n\n            //     }\n            // }\n\n            if (checkinProjectResponse?.items != null)\n            {\n                veloicyProjectNumberList = string.Join(\",\", checkinProjectResponse.items.Select(item => item.veloprojectnumber));\n            }\n\n\n\n            // log.LogInformation(\" project Numnber list \" + veloicyProjectNumberList);\n            // get the project detils \n\n            List<VelocityProject> v5Project = new List<VelocityProject>();\n            String v5ProjectResoponse = \"\";\n            String velocityProjectAPIBaseURL = APIMServerUrl + ProjectAPIURLPath;\n            using (var client = new HttpClient())\n            {\n\n                client.BaseAddress = new Uri(velocityProjectAPIBaseURL);\n                client.DefaultRequestHeaders.Accept.Clear();\n                // client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/x-www-form-urlencoded\"));\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", virtusaBusinessPublicSubkey);\n                client.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + BearerToken);\n\n                // HTTP GET\n                HttpResponseMessage response = client.GetAsync(\"?projectNumber=\" + veloicyProjectNumberList).Result;\n                if (response.IsSuccessStatusCode)\n                {\n                    v5ProjectResoponse = response.Content.ReadAsStringAsync().Result;\n                    // log.LogInformation(\"V5 project Data Received  Received \");\n\n                }\n                else\n                {\n                    // log.LogError(\" error on getting V5 Project  \" + v5ProjectResoponse);\n                }\n                // v5Project = JsonConvert.DeserializeObject<List<VelocityProject>>(v5ProjectResoponse);\n                v5Project.AddRange(JsonConvert.DeserializeObject<List<VelocityProject>>(v5ProjectResoponse) ?? new List<VelocityProject>());\n                // log.LogInformation(\"project Lenght \" + v5Project.Count);\n\n            }\n\n            // append PM name\n            // create PM person number List \n            // string PMPersonNumnerList = \"\";\n            StringBuilder PMPersonNumnerList = new StringBuilder();\n            Boolean first = true;\n            // foreach (var v5ProjectItem in v5Project)\n            // {\n            //     if (v5ProjectItem.projectManagerPersonNumber != null)\n            //     {\n\n\n            //         if (first)\n            //         {\n            //             // PMPersonNumnerList = v5ProjectItem.projectManagerPersonNumber;\n            //             PMPersonNumnerList.Append(v5ProjectItem.projectManagerPersonNumber);\n\n            //             first = false;\n            //             continue;\n            //         }\n            //         // PMPersonNumnerList = PMPersonNumnerList + \",\" + v5ProjectItem.projectManagerPersonNumber;\n            //         PMPersonNumnerList.AppendJoin(\",\", v5ProjectItem.projectManagerPersonNumber);\n            //     }\n            // }\n\n            foreach (var v5ProjectItem in v5Project.Where(item => item.projectManagerPersonNumber != null))\n            {\n                if (first)\n                {\n                    PMPersonNumnerList.Append(v5ProjectItem.projectManagerPersonNumber);\n                    first = false;\n                    continue;\n                }\n                PMPersonNumnerList.AppendJoin(\",\", v5ProjectItem.projectManagerPersonNumber);\n            }\n\n            EmpMinimalRoot empMinimalRootObj = getEmployeeList(PMPersonNumnerList.ToString(), virtusaBusinessPublicSubkey, BearerToken);\n\n\n            // Iterate chekin Project list\n            List<VelocityProject> v5ProjectDetailswithCheckinDataList = new List<VelocityProject>();\n            // filter Checkin Project List\n            var fromDate = DateTime.Parse(startDate);\n            var toDate = DateTime.Parse(endDate);\n\n            // List<checkin.project.Item> filteredCheckinProjectList = new List<checkin.project.Item>();\n            // filteredCheckinProjectList = checkinProjectResponse.items.Where(checkinProj => (checkinProj.userallocationstartdate <= fromDate) && checkinProj.userallocationenddate >= toDate).ToList();\n            // List<checkin.project.Item> filteredCheckinProjectList = checkinProjectResponse.items.Where(checkinProj => (checkinProj.userallocationstartdate <= toDate) && checkinProj.userallocationenddate >= fromDate).ToList();\n            List<checkin.project.Item> filteredCheckinProjectList = checkinProjectResponse?.items?\n                .Where(checkinProj => checkinProj.userallocationstartdate <= toDate && checkinProj.userallocationenddate >= fromDate)\n                .ToList() ?? new List<checkin.project.Item>();\n            // foreach (var item in checkinProjectResponse.items)\n            foreach (var item in filteredCheckinProjectList)\n            {\n\n                VelocityProject v5ProjObj = v5Project.FirstOrDefault(p => p.projectNumber == item.veloprojectnumber);\n\n                VelocityProject v5ProjObjN = new VelocityProject();\n                v5ProjObjN.checkinProjectId = item.projectid;\n                v5ProjObjN.projectID = v5ProjObj.projectID;\n                v5ProjObjN.projectName = item.projectname;\n                v5ProjObjN.projectNumber = v5ProjObj.projectNumber;\n                v5ProjObjN.projectStartDate = v5ProjObj.projectStartDate;\n                v5ProjObjN.projectCompletionDate = v5ProjObj.projectCompletionDate;\n                v5ProjObjN.projectClosedDate = v5ProjObj.projectClosedDate;\n\n                v5ProjObjN.projectStatusCode = v5ProjObj.projectStatusCode;\n                v5ProjObjN.projectStatusName = v5ProjObj.projectStatusName;\n                v5ProjObjN.customerNumber = v5ProjObj.customerNumber;\n                v5ProjObjN.customerName = v5ProjObj.customerName;\n                v5ProjObjN.projectManagerPersonNumber = v5ProjObj.projectManagerPersonNumber;\n                v5ProjObjN.projectManagerEmailAddress = v5ProjObj.projectManagerEmailAddress;\n                v5ProjObjN.projectCode = v5ProjObj.projectCode;\n                v5ProjObjN.typeDescription = v5ProjObj.typeDescription;\n                v5ProjObjN.projectTypeID = v5ProjObj.projectTypeID;\n                v5ProjObjN.scheduledStartDate = v5ProjObj.scheduledStartDate;\n                v5ProjObjN.scheduledFinishDate = v5ProjObj.scheduledFinishDate;\n                v5ProjObjN.targetStartDate = v5ProjObj.targetStartDate;\n\n                v5ProjObjN.targetFinishDate = v5ProjObj.targetFinishDate;\n                v5ProjObjN.organizationName = v5ProjObj.organizationName;\n\n                // append PM name\n                var minimalItem = empMinimalRootObj.items.FirstOrDefault(s => s.PersonNumber == v5ProjObjN.projectManagerPersonNumber);\n                if (minimalItem != null)\n                {\n                    v5ProjObjN.projectManagerName = minimalItem.DisplayName;\n                }\n\n\n                // log.LogInformation(\"v5ProjObj.projectName \" + v5ProjObj.projectName  + \"  \"+item.projectname);\n                v5ProjectDetailswithCheckinDataList.Add(v5ProjObjN);\n            }\n\n\n\n            /* foreach (var v5ProjectItem in v5Project)\n             {\n                 var minimalItem = empMinimalRootObj.items.FirstOrDefault(s => s.PersonNumber == v5ProjectItem.projectManagerPersonNumber);\n                 if (minimalItem != null)\n                 {\n                     v5ProjectItem.projectManagerName = minimalItem.DisplayName;\n                 }\n\n                 var checkinv5mapping = checkinv5MappingList.FirstOrDefault(s => s.velociyProjectNumber == v5ProjectItem.projectNumber);\n                 if (checkinv5mapping != null)\n                 {\n                     v5ProjectItem.checkinProjectId = checkinv5mapping.checkinProjectId;\n                     v5ProjectItem.projectName = checkinv5mapping.checkinProjectName;\n                 }\n             }*/\n\n            /*foreach (var item in v5ProjectDetailswithCheckinDataList)\n            {\n                log.LogInformation(\" project Name\" + item.projectName);\n            }*/\n            //return v5Project;\n            return v5ProjectDetailswithCheckinDataList;\n\n        }\n        public EmpMinimalRoot getEmployeeList(string personNumList, string subscriptionKey, string accessToken)\n        {\n\n            //call employee minimal API\n            EmpMinimalRoot employeeMinimalRoot = null;\n            string employeeMinimalRes = \"\";\n            string employeeMinimalAPIBaseURL = APIMServerUrl + EmployeeMinimalUrl;\n            using (var client = new HttpClient())\n            {\n\n                client.BaseAddress = new Uri(employeeMinimalAPIBaseURL);\n                client.DefaultRequestHeaders.Accept.Clear();\n                // client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/x-www-form-urlencoded\"));\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\n                client.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + accessToken);\n                client.DefaultRequestHeaders.Add(\"REST-Framework-Version\", \"2\");\n\n                // HTTP GET\n                HttpResponseMessage response = client.GetAsync(\"?q=PersonNumber in (\" + personNumList + \")\").Result;\n                if (response.IsSuccessStatusCode)\n                {\n                    employeeMinimalRes = response.Content.ReadAsStringAsync().Result;\n                    // log.LogInformation(\"Employee Minimal Data Received  Received \");\n\n                }\n                else\n                {\n                    // log.LogError(\" error on getting Employee Minimal  \" + employeeMinimalRes);\n                }\n                employeeMinimalRoot = JsonConvert.DeserializeObject<EmpMinimalRoot>(employeeMinimalRes);\n                // log.LogInformation(\"employee minimal Lenght \" + employeeMinimalRoot?.items.Count);\n\n            }\n            return (employeeMinimalRoot == null ? new EmpMinimalRoot() : employeeMinimalRoot);\n        }\n    }\n\n\n\n\n\n\n\npublic class CompareRMAndCheckinProject\n    {\n        readonly String EmployeeMinimalUrl;\n        readonly String APIMServerUrl;\n\n        //RMAllocation\n        readonly String RMAllocationProjectAPIPath;\n\n\n        public CompareRMAndCheckinProject()\n        {\n\n            EmployeeMinimalUrl = Environment.GetEnvironmentVariable(\"EmployeeMinimalUrl\");\n            APIMServerUrl = Environment.GetEnvironmentVariable(\"APIMServerURL\");\n\n\n            //RMAllocation\n            RMAllocationProjectAPIPath = Environment.GetEnvironmentVariable(\"RMAllocationProjectAPIPath\");\n\n        }\n\n        public ResponseList getCheckinNotAvailableProjectList(string email, string startDate, string endDate)\n        {\n\n            KetVaultHandler keyVaultHandlerObj = new KetVaultHandler();\n            IDictionary<String, String> keyValutsSecrets = keyVaultHandlerObj.getSecret();\n\n            String subscriptionKey = keyValutsSecrets[\"Virtu-Business-Public-sub-key\"];\n            String RMPaasClientId = keyValutsSecrets[\"RMPaasResourceId\"];\n\n            GetAADToken aADToken = new GetAADToken();\n            // String accessToken = aADToken.GetToken(log).GetAwaiter().GetResult();\n            String aADTokenWithRMAud = aADToken.GetToken(RMPaasClientId);\n\n\n\n            //call employee minimal API\n            EmpMinimalRoot employeeMinimalRoot = null;\n            string employeeMinimalRes = \"\";\n            string employeeMinimalAPIBaseURL = APIMServerUrl + EmployeeMinimalUrl;\n            using (var client = new HttpClient())\n            {\n                client.BaseAddress = new Uri(employeeMinimalAPIBaseURL);\n                client.DefaultRequestHeaders.Accept.Clear();\n                // client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/x-www-form-urlencoded\"));\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\n                client.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + aADTokenWithRMAud);\n                // client.DefaultRequestHeaders.Add(\"REST-Framework-Version\", \"2\");\n\n                // HTTP GET\n                HttpResponseMessage response = client.GetAsync(\"?q=WorkEmail=\" + email).Result;\n                if (response.IsSuccessStatusCode)\n                {\n                    employeeMinimalRes = response.Content.ReadAsStringAsync().Result;\n                    // log.LogInformation(\"Employee Minimal Data Received  Received \");\n\n                }\n                else\n                {\n                    // log.LogError(\" error on getting Employee Minimal  \");\n                }\n                employeeMinimalRoot = JsonConvert.DeserializeObject<EmpMinimalRoot>(employeeMinimalRes);\n                // log.LogInformation(\"employee minimal Lenght \" + employeeMinimalRoot.items.Count);\n                // log.LogInformation(\"employee person number \" + employeeMinimalRoot?.items[0].PersonNumber);\n                //log.LogInformation(\"employee person name \" + employeeMinimalRoot.items[0]);\n\n            }\n\n            //Call RM Allocation function\n            //  List<Project> RMAllocationProjects = GetRMAllocationProjectNumbers(employeeMinimalRoot.items[0].PersonNumber, log);//.GetAwaiter().GetResult();\n\n            List<string> RMProjectNumberList = GetRMAllocationProjectNumbers(employeeMinimalRoot?.items[0].PersonNumber, startDate, endDate, aADTokenWithRMAud);\n\n            /*foreach (var item in RMAllocationProjects)\n            {\n                if (item.projectNumber != null)\n                {\n                    RMProjectNumberList.Add(item.projectNumber);\n                }\n            }*/\n\n            //Get V5 Project details\n            string userName = email.Split(\"@\")[0];\n            GetV5ProjectDetails getV5Project = new GetV5ProjectDetails();\n            List<VelocityProject> v5ProjectList = getV5Project.GetV5Project(startDate, endDate, userName).GetAwaiter().GetResult();\n\n            List<string> v5ProjectNumberList = v5ProjectList.Select(o => o.projectNumber).ToList();\n\n            //Comparing two list\n\n            List<string> NotMatchedProjectNumberList = new List<string>();\n\n            // foreach (string item in RMProjectNumberList)\n            // {\n            //     if (!v5ProjectNumberList.Contains(item))\n\n            //         NotMatchedProjectNumberList.Add(item);\n            // }\n\n            NotMatchedProjectNumberList.AddRange(RMProjectNumberList.Where(item => !v5ProjectNumberList.Contains(item)));\n\n            ResponseList ResponseList = new ResponseList();\n\n            ResponseList.UnAvailableProjectNumberList = NotMatchedProjectNumberList;\n\n            return ResponseList;\n        }\n\n\n\n        public List<String> GetRMAllocationProjectNumbers(String PersonNumber, string startDate, string endDate, string AADToken)\n        {\n            KetVaultHandler keyVaultHandlerObj = new KetVaultHandler();\n            IDictionary<String, String> keyValutsSecrets = keyVaultHandlerObj.getSecret();\n\n            // String virtusaBusinessInternalSubkey = keyValutsSecrets[\"Virtu-Business-Internal-sub-key\"];\n\n            //String checkinSkillBotAppPassword = keyValutsSecrets[\"snow-bot-app-pwd\"];\n            //String checkinSkillBotAppID = keyValutsSecrets[\"snow-bot-app-appID\"];\n            // String virtusaTenantID = keyValutsSecrets[\"virtu-Integration-AD-Tenent\"];\n            String virtusaBusinessPublicSubkey = keyValutsSecrets[\"Virtu-Business-Public-sub-key\"];\n            // String virtusaPeopleSubkey = keyValutsSecrets[\"Virtusa-People-Subscription-Key\"];\n\n\n            //GetAADToken aADToken = new GetAADToken();\n            // String BearerToken = aADToken.GetToken(log).GetAwaiter().GetResult();\n\n            // call Checkin API\n            String RMAllocationProjectAPIURL = APIMServerUrl + RMAllocationProjectAPIPath + PersonNumber;\n            String responseString = \"\";\n            // List<RMProjectResponse> RMAllocationProjectList = new List<RMProjectResponse>();\n\n            using (var client = new HttpClient())\n            {\n\n                client.BaseAddress = new Uri(RMAllocationProjectAPIURL);\n                client.DefaultRequestHeaders.Accept.Clear();\n                client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", virtusaBusinessPublicSubkey);\n                client.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + AADToken);\n\n                // HTTP GET\n                // String urlParameters = PersonNumber;\n                HttpResponseMessage response = client.GetAsync(\"\").Result;\n                if (response.IsSuccessStatusCode)\n                {\n                    responseString = response.Content.ReadAsStringAsync().Result;\n                    // log.LogInformation(\"RM Allocation data received \");\n                    // log.LogInformation(\" RM Response \" + responseString);\n                }\n                else\n                {\n                    // log.LogError(\" error on getting RM Allocation  \" + responseString);\n                }\n            }\n            List<RMProjectResponse> RootList = JsonConvert.DeserializeObject<List<RMProjectResponse>>(responseString);\n\n            //filter Project\n            var fromDate = DateTime.Parse(startDate);\n            var toDate = DateTime.Parse(endDate);\n\n            List<RMProjectResponse> RMAllocationProjectList = RootList.Where(RMProj => (RMProj.startDate <= toDate) && RMProj.endDate >= fromDate).ToList();\n\n            // get project number List\n            List<String> projectNumberList = RMAllocationProjectList.Select(o => o.project.projectNumber).ToList();\n            // log.LogInformation(\"RM Project List count \" + projectNumberList.Count);\n            //  projectList = projectList.Where(id => id != \"\").ToArray();\n            /*  foreach (var item in RootList)\n              {\n                  RMAllocationProjectList.Add(item.project);\n              }*/\n\n            foreach (var item in projectNumberList)\n            {\n                // log.LogInformation(\"RM Project List \" + item);\n            }\n            return projectNumberList; } }\n\n\nCompareRMAndCheckinProject getProjectDiff = new CompareRMAndCheckinProject();\n\n\n\nvar resultObject = new Dictionary<string, object>\n{ { \"itemList\", getProjectDiff.getCheckinNotAvailableProjectList(email, startDate, endDate) } };\n\nresultObject",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":803,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_Hw4aZ-1",
			"id":"n_OjGJW",
			"index":3,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"UnAvailableProjectNumberList"
					],
					"properties":{
						"UnAvailableProjectNumberList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Un Available Project Number List"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"email",
						"VirtuBusinessPublicSubKey",
						"RMPaasResourceId",
						"snowBotAppPwd",
						"snowBotAppAppID",
						"APIMServerUrl",
						"EmployeeMinimalUrl"
					],
					"properties":{
						"email":{
							"type":"string",
							"title":"Email"
						},
						"VirtuBusinessPublicSubKey":{
							"type":"string",
							"title":"Virtu Business Public Sub Key"
						},
						"RMPaasResourceId":{
							"type":"string",
							"title":"RM Paas Resource Id"
						},
						"snowBotAppPwd":{
							"type":"string",
							"title":"Snow Bot App Pwd"
						},
						"snowBotAppAppID":{
							"type":"string",
							"title":"Snow Bot App App ID"
						},
						"APIMServerUrl":{
							"type":"string",
							"title":"APIM Server Url"
						},
						"EmployeeMinimalUrl":{
							"type":"string",
							"title":"Employee Minimal Url"
						}
					}
				},
				"code":"// Imports from standard Java libraries\nimport java.net.HttpURLConnection\nimport java.net.URL\nimport java.nio.charset.StandardCharsets\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.util.stream.Collectors\n\n// Requires a standard Java JSON library, like org.json.\n// This library must be available on the classpath.\nimport org.json.JSONObject\nimport java.net.HttpURLConnection\nimport java.net.URL\nimport java.net.URLEncoder\nimport java.nio.charset.StandardCharsets\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.util.stream.Collectors\n\n// Requires a standard Java JSON library (e.g., org.json) to be on the classpath.\nimport org.json.JSONObject\n\n\nimport java.net.HttpURLConnection\nimport java.net.URL\nimport java.nio.charset.StandardCharsets\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.time.LocalDate\nimport java.util.stream.Collectors\n\n// Requires a standard Java JSON library (e.g., org.json) to be on the classpath.\nimport org.json.JSONArray\nimport org.json.JSONObject\n\nimport java.time.LocalDate\n// Assumes org.json library is on the classpath\nimport org.json.JSONArray\nimport org.json.JSONObject\n\n\nimport java.net.HttpURLConnection\nimport java.net.URL\nimport java.net.URLEncoder\nimport java.nio.charset.StandardCharsets\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.util.stream.Collectors\n\n\nimport java.time.LocalDate\n// Assumes the org.json library is available on the classpath\nimport org.json.JSONArray\nimport org.json.JSONObject\n\n/**\n * Fetches and merges project data from multiple sources.\n *\n * This script assumes the following variables are globally defined:\n * - APIMServerUrl (String)\n * - CheckinProjectAPIPath (String)\n * - ProjectAPIURLPath (String)\n * - EmployeeMinimalUrl (String)\n * - virtusaBusinessInternalSubkey (String)\n * - virtusaBusinessPublicSubkey (String)\n * - bearerToken (String, the AAD token)\n *\n * @param startDateStr The start date in \"YYYY-MM-DD\" format.\n * @param endDateStr The end date in \"YYYY-MM-DD\" format.\n * @param userName The user's login ID.\n * @return A list of maps, where each map represents a fully detailed project.\n */\ndef getV5Projects(String startDateStr, String endDateStr, String userName) {\n    // === 1. Get initial project list from Check-in API ===\n    def checkinParams = \"P_FROM_DATE=${startDateStr}&P_TO_DATE=${endDateStr}&P_IN_TIME_STAMP=0&p_emp_login_id=${userName}\"\n    def checkinApiUrl = \"${APIMServerUrl}${CheckinProjectAPIPath}?${checkinParams}\"\n    def checkinHeaders = [\n        \"Ocp-Apim-Subscription-Key\": virtusaBusinessInternalSubkey,\n        \"Authorization\": \"Bearer ${bearerToken}\"\n    ]\n    def checkinResponseStr = makeApiGetRequest(checkinApiUrl, checkinHeaders)\n    if (!checkinResponseStr) return []\n\n    def checkinItems = new JSONObject(checkinResponseStr).optJSONArray(\"items\")?.toList()?.collect { it as JSONObject } ?: []\n    if (checkinItems.isEmpty()) return []\n\n    def veloProjectNumbers = checkinItems.collect { it.optString(\"veloprojectnumber\") }.findAll { it }.join(',')\n    if (!veloProjectNumbers) return []\n\n    // === 2. Get full project details from Velocity API ===\n    def velocityApiUrl = \"${APIMServerUrl}${ProjectAPIURLPath}?projectNumber=${veloProjectNumbers}\"\n    def v5Headers = [\n        \"Ocp-Apim-Subscription-Key\": virtusaBusinessPublicSubkey,\n        \"Authorization\": \"Bearer ${bearerToken}\"\n    ]\n    def v5ProjectResponseStr = makeApiGetRequest(velocityApiUrl, v5Headers)\n    if (!v5ProjectResponseStr) return []\n    \n    def v5Projects = new JSONArray(v5ProjectResponseStr).toList().collect { it as JSONObject }\n    // For efficient lookup, convert the list to a map keyed by project number\n    def v5ProjectsMap = v5Projects.collectEntries { [(it.optString(\"projectNumber\")): it] }\n\n    // === 3. Get details for all Project Managers ===\n    def pmPersonNumbers = v5Projects.collect { it.optString(\"projectManagerPersonNumber\") }.findAll { it }.unique().join(',')\n    def pmDetailsMap = [:]\n    if (pmPersonNumbers) {\n        def employeeApiUrl = \"${APIMServerUrl}${EmployeeMinimalUrl}?q=PersonNumber in (${pmPersonNumbers})\"\n        def employeeHeaders = v5Headers + [\"REST-Framework-Version\": \"2\"] // Add framework version header\n        def employeeResponseStr = makeApiGetRequest(employeeApiUrl, employeeHeaders)\n        if (employeeResponseStr) {\n            def pmItems = new JSONObject(employeeResponseStr).optJSONArray(\"items\")?.toList()?.collect { it as JSONObject } ?: []\n            // Create a map of PMs keyed by their person number\n            pmDetailsMap = pmItems.collectEntries { [(it.optString(\"PersonNumber\")): it] }\n        }\n    }\n\n    // === 4. Filter, merge, and transform the data ===\n    def fromDate = LocalDate.parse(startDateStr)\n    def toDate = LocalDate.parse(endDateStr)\n\n    def filteredCheckinProjects = checkinItems.findAll { item ->\n        def projStartDate = LocalDate.parse(item.optString(\"userallocationstartdate\"))\n        def projEndDate = LocalDate.parse(item.optString(\"userallocationenddate\"))\n        !projStartDate.isAfter(toDate) && !projEndDate.isBefore(fromDate)\n    }\n\n    def finalProjectList = filteredCheckinProjects.collect { checkinItem ->\n        def v5Project = v5ProjectsMap[checkinItem.optString(\"veloprojectnumber\")]\n        if (!v5Project) return null // Skip if no matching project detail was found\n\n        def pmPersonNumber = v5Project.optString(\"projectManagerPersonNumber\")\n        def pm = pmDetailsMap[pmPersonNumber]\n\n        // Create a new map representing the final merged project object\n        // This directly corresponds to the `v5ProjObjN` object in the C# code\n        [\n            checkinProjectId:         checkinItem.optString(\"projectid\"),\n            projectName:              checkinItem.optString(\"projectname\"),\n            projectID:                v5Project.optString(\"projectID\"),\n            projectNumber:            v5Project.optString(\"projectNumber\"),\n            projectManagerName:       pm?.optString(\"DisplayName\"),\n            projectManagerPersonNumber: pmPersonNumber,\n            projectManagerEmailAddress: v5Project.optString(\"projectManagerEmailAddress\"),\n            projectStartDate:         v5Project.optString(\"projectStartDate\"),\n            projectCompletionDate:    v5Project.optString(\"projectCompletionDate\"),\n            projectStatusCode:        v5Project.optString(\"projectStatusCode\"),\n            projectStatusName:        v5Project.optString(\"projectStatusName\"),\n            customerName:             v5Project.optString(\"customerName\")\n            // ... add any other fields from v5Project as needed\n        ]\n    }.findAll { it != null } // Remove any entries that failed to merge\n\n    return finalProjectList\n}\n\n\n/**\n * A helper function to execute an HTTP GET request.\n * @param apiUrl The full URL for the API endpoint.\n * @param headers A map of request headers.\n * @return The response body as a String, or null on failure.\n */\nprivate String makeApiGetRequest(String apiUrl, Map<String, String> headers) {\n    HttpURLConnection conn = null\n    try {\n        URL url = new URL(apiUrl)\n        conn = (HttpURLConnection) url.openConnection()\n        conn.requestMethod = 'GET'\n        headers.each { key, value -> conn.setRequestProperty(key, value) }\n\n        if (conn.responseCode in 200..<300) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.inputStream, StandardCharsets.UTF_8))) {\n                return reader.lines().collect(Collectors.joining(\"\\n\"))\n            }\n        }\n    } catch (Exception e) {\n        // Silently fail as requested\n    } finally {\n        conn?.disconnect()\n    }\n    return null\n}\n\n\n/**\n * Fetches and merges project data from multiple sources.\n *\n * This script assumes the following variables are globally defined:\n * - APIMServerUrl (String)\n * - CheckinProjectAPIPath (String)\n * - ProjectAPIURLPath (String)\n * - EmployeeMinimalUrl (String) // Assumed for PM details\n * - virtusaBusinessInternalSubkey (String)\n * - virtusaBusinessPublicSubkey (String)\n * - bearerToken (String, the AAD token)\n *\n * @param startDateStr The start date in \"YYYY-MM-DD\" format.\n * @param endDateStr The end date in \"YYYY-MM-DD\" format.\n * @param userName The user's login ID.\n * @return A list of maps, where each map represents a fully detailed project.\n */\ndef getV5Projects(String startDateStr, String endDateStr, String userName) {\n    // === Step 1: Get initial project list from Check-in API ===\n    def checkinParams = \"P_FROM_DATE=${startDateStr}&P_TO_DATE=${endDateStr}&P_IN_TIME_STAMP=0&p_emp_login_id=${userName}\"\n    def checkinApiUrl = \"${APIMServerUrl}${CheckinProjectAPIPath}?${checkinParams}\"\n    def checkinHeaders = [\n        \"Ocp-Apim-Subscription-Key\": virtusaBusinessInternalSubkey,\n        \"Authorization\": \"Bearer ${bearerToken}\"\n    ]\n    def checkinResponseStr = makeApiGetRequest(checkinApiUrl, checkinHeaders)\n    if (!checkinResponseStr) return []\n\n    def checkinProjectResponse = new JSONObject(checkinResponseStr)\n    def checkinItems = checkinProjectResponse.optJSONArray(\"items\")?.toList()?.collect { it as JSONObject } ?: []\n    if (checkinItems.isEmpty()) return []\n\n    def veloProjectNumbers = checkinItems.collect { it.optString(\"veloprojectnumber\") }.findAll { it }.join(',')\n    if (!veloProjectNumbers) return []\n\n    // === Step 2: Get full project details from Velocity API ===\n    def velocityApiUrl = \"${APIMServerUrl}${ProjectAPIURLPath}?projectNumber=${veloProjectNumbers}\"\n    def velocityHeaders = [\n        \"Ocp-Apim-Subscription-Key\": virtusaBusinessPublicSubkey,\n        \"Authorization\": \"Bearer ${bearerToken}\"\n    ]\n    def v5ProjectResponseStr = makeApiGetRequest(velocityApiUrl, velocityHeaders)\n    if (!v5ProjectResponseStr) return []\n    \n    def v5Projects = new JSONArray(v5ProjectResponseStr).toList().collect { it as JSONObject }\n    // For efficient lookup, convert the list to a map keyed by project number\n    def v5ProjectsMap = v5Projects.collectEntries { [(it.optString(\"projectNumber\")): it] }\n\n    // === Step 3: Get details for all Project Managers ===\n    def pmPersonNumbers = v5Projects.collect { it.optString(\"projectManagerPersonNumber\") }.findAll { it }.unique().join(',')\n    def pmDetails = [:]\n    if (pmPersonNumbers) {\n        def employeeApiUrl = \"${APIMServerUrl}${EmployeeMinimalUrl}?q=PersonNumber=${pmPersonNumbers}\" // Assuming API supports comma-separated list\n        def employeeResponseStr = makeApiGetRequest(employeeApiUrl, velocityHeaders) // Reusing public key headers\n        if (employeeResponseStr) {\n            def empResponse = new JSONObject(employeeResponseStr)\n            def pmItems = empResponse.optJSONArray(\"items\")?.toList()?.collect { it as JSONObject } ?: []\n            // Create a map of PMs keyed by their person number\n            pmDetails = pmItems.collectEntries { [(it.optString(\"PersonNumber\")): it] }\n        }\n    }\n\n    // === Step 4: Filter, merge, and transform the data ===\n    def fromDate = LocalDate.parse(startDateStr)\n    def toDate = LocalDate.parse(endDateStr)\n\n    def filteredCheckinProjects = checkinItems.findAll { item ->\n        def projStartDate = LocalDate.parse(item.optString(\"userallocationstartdate\"))\n        def projEndDate = LocalDate.parse(item.optString(\"userallocationenddate\"))\n        !projStartDate.isAfter(toDate) && !projEndDate.isBefore(fromDate)\n    }\n\n    def finalProjectList = filteredCheckinProjects.collect { checkinItem ->\n        def v5Project = v5ProjectsMap[checkinItem.optString(\"veloprojectnumber\")]\n        if (!v5Project) return null // Skip if no matching project detail was found\n\n        def pmPersonNumber = v5Project.optString(\"projectManagerPersonNumber\")\n        def pm = pmDetails[pmPersonNumber]\n\n        // Create a new map representing the final merged project object\n        [\n            checkinProjectId:         checkinItem.optString(\"projectid\"),\n            projectName:              checkinItem.optString(\"projectname\"), // Name from check-in data\n            projectID:                v5Project.optString(\"projectID\"),\n            projectNumber:            v5Project.optString(\"projectNumber\"),\n            projectManagerName:       pm?.optString(\"DisplayName\"), // PM Name from employee data\n            projectManagerPersonNumber: pmPersonNumber,\n            // Copy all other desired fields from the detailed v5Project object\n            projectStartDate:         v5Project.optString(\"projectStartDate\"),\n            projectCompletionDate:    v5Project.optString(\"projectCompletionDate\"),\n            projectStatusCode:        v5Project.optString(\"projectStatusCode\"),\n            customerName:             v5Project.optString(\"customerName\")\n            // ... add any other fields as needed\n        ]\n    }.findAll { it != null } // Remove any entries that failed to merge\n\n    return finalProjectList\n}\n\n\n\n/**\n * Gets a list of project numbers for a person that are active within a given date range.\n *\n * This script assumes the following variables are globally defined:\n * - APIMServerUrl (String)\n * - RMAllocationProjectAPIPath (String)\n * - virtusaBusinessPublicSubkey (String)\n *\n * @param personNumber The employee's person number.\n * @param startDateStr The start of the date range to check (e.g., \"2025-01-31\").\n * @param endDateStr The end of the date range to check (e.g., \"2025-07-17\").\n * @param aadToken The authorization bearer token.\n * @return A list of project number strings, or an empty list on failure.\n */\ndef getRMAllocationProjectNumbers(String personNumber, String startDateStr, String endDateStr, String aadToken) {\n    // 1. Construct the API URL\n    def apiUrl = \"${APIMServerUrl}${RMAllocationProjectAPIPath}${personNumber}\"\n    HttpURLConnection conn = null\n    String responseString = \"\"\n\n    // 2. Make the HTTP GET request\n    try {\n        URL url = new URL(apiUrl)\n        conn = (HttpURLConnection) url.openConnection()\n        conn.requestMethod = 'GET'\n        conn.setRequestProperty('Accept', 'application/json')\n        conn.setRequestProperty('Ocp-Apim-Subscription-Key', virtusaBusinessPublicSubkey)\n        conn.setRequestProperty('Authorization', \"Bearer ${aadToken}\")\n\n        if (conn.responseCode in 200..<300) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.inputStream, StandardCharsets.UTF_8))) {\n                responseString = reader.lines().collect(Collectors.joining(\"\\n\"))\n            }\n        } else {\n            // On API error, return an empty list\n            return []\n        }\n    } catch (Exception e) {\n        // On any exception, return an empty list\n        return []\n    } finally {\n        conn?.disconnect()\n    }\n\n    if (!responseString) {\n        return []\n    }\n    \n    // 3. Parse dates and JSON response\n    JSONArray projectsJsonArray = new JSONArray(responseString)\n    LocalDate fromDate = LocalDate.parse(startDateStr)\n    LocalDate toDate = LocalDate.parse(endDateStr)\n\n    // Convert JSONArray to a List for easier processing with Groovy closures\n    List<JSONObject> projectsList = projectsJsonArray.toList().collect { it as JSONObject }\n\n    // 4. Filter projects by date range and extract project numbers\n    def projectNumberList = projectsList.findAll { proj ->\n        // Parse the project's own start and end dates\n        def projStartDate = LocalDate.parse(proj.optString(\"startDate\"))\n        def projEndDate = LocalDate.parse(proj.optString(\"endDate\"))\n\n        // The project overlaps if its period is not entirely after OR not entirely before the query range.\n        // Condition: (projStart <= toDate) AND (projEnd >= fromDate)\n        !projStartDate.isAfter(toDate) && !projEndDate.isBefore(fromDate)\n\n    }.collect { filteredProj ->\n        // Safely access the nested project number\n        filteredProj.optJSONObject(\"project\")?.optString(\"projectNumber\")\n\n    }.findAll { it } // Remove any null or empty strings from the final list\n\n    return projectNumberList\n}\n\n/**\n * Retrieves a bearer token from the token endpoint using only standard Java libraries.\n *\n * This script assumes the following variables are globally defined:\n * - snow_bot_app_appID (String)\n * - secureToken (String)\n * - virtusaBusinessPublicSubkey (String)\n * - APIMServerUrl (String)\n * - TokenAPIURLPath (String)\n *\n * @param audience The resource audience for the token request.\n * @return The access token string, or an empty string if it fails.\n */\ndef getToken(String audience) {\n    // Construct the request body using Groovy's GString interpolation\n    def tokenRequestBody = \"client_id=${snow_bot_app_appID}&grant_type=client_credentials&client_secret=${secureToken}&resource=${audience}\"\n    def tokenApiUrl = \"${APIMServerUrl.replace('http://', 'https://')}${TokenAPIURLPath}\"\n\n    def bearerToken = ''\n    HttpURLConnection conn = null\n\n    try {\n        // 1. Setup the HTTP connection using java.net.*\n        URL url = new URL(tokenApiUrl)\n        conn = (HttpURLConnection) url.openConnection()\n        conn.requestMethod = 'POST'\n        conn.doOutput = true\n\n        // 2. Set request headers\n        conn.setRequestProperty('Content-Type', 'application/x-www-form-urlencoded')\n        conn.setRequestProperty('Accept', 'application/x-www-form-urlencoded')\n        conn.setRequestProperty('Ocp-Apim-Subscription-Key', virtusaBusinessPublicSubkey)\n\n        // 3. Write the request body to the output stream\n        conn.outputStream.withWriter(StandardCharsets.UTF_8.name()) { writer ->\n            writer.write(tokenRequestBody)\n        }\n\n        // 4. Process the response\n        def responseCode = conn.responseCode\n        if (responseCode >= 200 && responseCode < 300) {\n            println \"AD Token received successfully.\"\n            \n            // Read response stream using standard Java classes\n            def responseString\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.inputStream, StandardCharsets.UTF_8))) {\n                responseString = reader.lines().collect(Collectors.joining(\"\\n\"))\n            }\n\n            // Parse response using a standard Java JSON library (org.json)\n            def jsonResponse = new JSONObject(responseString)\n            bearerToken = jsonResponse.getString(\"access_token\")\n\n        } else {\n            println \"Error on getting token. Status code: ${responseCode}\"\n            // Read error stream for more details\n            def errorDetails = \"\"\n            if (conn.errorStream != null) {\n                 try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.errorStream, StandardCharsets.UTF_8))) {\n                    errorDetails = reader.lines().collect(Collectors.joining(\"\\n\"))\n                }\n            }\n            println \"Error details: ${errorDetails}\"\n        }\n    } catch (Exception e) {\n        println \"An exception occurred while getting the token: ${e.message}\"\n    } finally { // The missing bracket was before this 'finally' block.\n        conn?.disconnect()\n    }\n\n    return bearerToken\n}\n\n\n\ndef aADTokenWithRMAud= getToken(RMPaasResourceId)\n\n    HttpURLConnection conn = null\n    JSONObject employeeMinimalRoot = null\n\n    try {\n        // 1. Construct the final URL, encoding the email parameter\n        def encodedEmail = URLEncoder.encode(email, StandardCharsets.UTF_8.name())\n        def apiUrl = \"${APIMServerUrl}${EmployeeMinimalUrl}?q=WorkEmail=${encodedEmail}\"\n        \n        // 2. Setup the HTTP GET request\n        URL url = new URL(apiUrl)\n        conn = (HttpURLConnection) url.openConnection()\n        conn.requestMethod = 'GET'\n\n        // 3. Set the necessary request headers\n        conn.setRequestProperty('Accept', 'application/json')\n        conn.setRequestProperty('Ocp-Apim-Subscription-Key', subscriptionKey)\n        conn.setRequestProperty('Authorization', \"Bearer ${aADTokenWithRMAud}\")\n\n        // 4. Check the response and parse the result\n        def responseCode = conn.responseCode\n        if (responseCode >= 200 && responseCode < 300) {\n            def responseString\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.inputStream, StandardCharsets.UTF_8))) {\n                responseString = reader.lines().collect(Collectors.joining(\"\\n\"))\n            }\n\n            if (responseString) {\n                employeeMinimalRoot = new JSONObject(responseString)\n            }\n        }\n    } catch (Exception e) {\n        // Exception occurred, return null as no logging is desired.\n        return null\n    } finally {\n        conn?.disconnect()\n    }\ngetRMAllocationProjectNumbers(employeeMinimalRoot?.items[0].PersonNumber, startDate, endDate,aADTokenWithRMAud)\n\n\ndef userName = email.split('@')[0]\n\n    // 2. Get the list of projects from the V5/Check-in system\n    def v5ProjectList = getV5Projects(startDate, endDate, userName)\n\n    // 3. Extract just the project numbers (equivalent to C# .Select)\n    def v5ProjectNumberList = v5ProjectList.collect { it.projectNumber }\n\n    // 4. Get the list of projects from the RM system\n    def RMProjectNumberList = getRMAllocationProjectNumbers(personNumber, startDate, endDate, aadToken)\n\n    // 5. Compare the two lists to find numbers in RM but not in V5.\n    // Groovy's list subtraction operator is a clean way to do this.\n    def notMatchedProjectNumberList = RMProjectNumberList - v5ProjectNumberList\n\n    // 6. Format the response as a map, similar to the C# ResponseList object\n    return [\"UnAvailableProjectNumberList\": notMatchedProjectNumberList]\n",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"email":"{{ n_6KyoI.outputs.queryParams.email }}",
					"VirtuBusinessPublicSubKey":"{{ __ENV__.outputs.Virtu-Business-Public-sub-key }}",
					"RMPaasResourceId":"{{ __ENV__.outputs.RMPaasResourceId }}",
					"snowBotAppPwd":"{{ __ENV__.outputs.snow-bot-app-pwd }}",
					"snowBotAppAppID":"{{ __ENV__.outputs.snow-bot-app-appID }}",
					"APIMServerUrl":"APIMServerUrl",
					"EmployeeMinimalUrl":"EmployeeMinimalUrl"
				}
			},
			"skip":true,
			"subTitle":"Code",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":812,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Hw4aZ-1",
			"id":"n_F5m3f",
			"index":4,
			"inputs":{
				"automationId":"6878e1d26d8971fb930cc927",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{}
			},
			"skip":true,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":818,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Hw4aZ-1",
			"id":"n_R7anI",
			"index":5,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200",
				"body":{
					"UnAvailableProjectNumberList":"{{ n_OjGJW.outputs.result.UnAvailableProjectNumberList }}"
				},
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39713,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":11
}
{
	"appsUsed":[
		
	],
	"createdTime":1759229585185,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_w3L5T",
			"priority":0,
			"skip":false,
			"toNodeId":"n_leC1R",
			"type":"next"
		},
		{
			"fromNodeId":"n_leC1R",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sFerY",
			"type":"next"
		}
	],
	"id":"68dbb6913a8ae40264e8464f",
	"lastModifiedBy":308,
	"lcName":"[dp-func-extractbip-prod-sa]schedulebipfunction",
	"modifiedTime":1759229662642,
	"name":"[dp-func-extractbip-prod-sa]ScheduleBIPFunction",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":970,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_MKOHG-1",
			"id":"n_w3L5T",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"ok",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":44,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_MKOHG-1",
			"id":"n_leC1R",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Xml.Linq;\n\npublic static class BIPReportScheduler\n{\n    // This is the main entry point your platform will call.\n    // It assumes all input/environment variables are available in its scope.\n    public static async Task<object> Run()\n    {\n        try\n        {\n            // The main logic from your 'ContinueScheduleBIP' function starts here.\n            string dateTimeSuffix = Regex.Replace(DateTime.UtcNow.ToString(\"s\"), \"[-,:]\", \"\").Replace(\"T\", \"_\");\n            string scheduleJobName = $\"{entityName}_{bipType}_{dateTimeSuffix}\";\n\n            // 1. Log the start of the execution to the database.\n            FunctionExecutionLog(bipId, chunkNumber, bipType, \"Starter\", \"In Progress\", 0, null);\n\n            // 2. Schedule the report by manually calling the SOAP service.\n            string scheduledJobId = await ScheduleReportViaHttp(scheduleJobName);\n\n            // 3. Poll for the job status until it completes.\n            await PollForJobCompletion(scheduledJobId);\n            \n            // 4. Update the final status in the database.\n            ConfigTableStatusUpdate(bipId, \"Success\", null, null, null, null);\n\n            return new { Status = \"Success\", ScheduledJobId = scheduledJobId };\n        }\n        catch (Exception ex)\n        {\n            // Log any errors to the database.\n            Console.WriteLine($\"Error in BIPReportScheduler: {ex.Message}\");\n            ExecuteProcedureWithParameter(\"YourErrorLog_SP\", new List<SqlParameter>\n            {\n                new SqlParameter(\"@BipId\", int.Parse(bipId)),\n                new SqlParameter(\"@FailLogMessage\", ex.Message),\n                new SqlParameter(\"@Status\", \"Failed\"),\n                new SqlParameter(\"@BipType\", bipType)\n            });\n            return new { Status = \"Failed\", Error = ex.Message };\n        }\n    }\n\n    // ===================================================================================\n    // >> REPLACEMENT FOR 'FusionBIPScheduleServiceReference' <<\n    // This section manually builds and sends SOAP XML requests using HttpClient.\n    // ===================================================================================\n\n    private static async Task<string> ScheduleReportViaHttp(string scheduleJobName)\n    {\n        string soapEnvelope = $@\"\n        <soapenv:Envelope xmlns:soapenv=\"\"http://schemas.xmlsoap.org/soap/envelope/\"\" xmlns:v2=\"\"http://xmlns.oracle.com/oxp/service/PublicReportService\"\">\n           <soapenv:Header/>\n           <soapenv:Body>\n              <v2:scheduleReport>\n                 <v2:scheduleRequest>\n                    <v2:deliveryChannels>\n                       <v2:ftpOptions>\n                          <v2:item>\n                             <v2:ftpServerName>{FTP_SERVER_NAME}</v2:ftpServerName>\n                             <v2:ftpUserName>{FTP_USER_NAME}</v2:ftpUserName>\n                             <v2:ftpUserPassword>{FTP_PASSWORD}</v2:ftpUserPassword>\n                             <v2:remoteFile>{FTP_ROOT_FOLDER}{entityName}_{bipType}.xml</v2:remoteFile>\n                             <v2:sftpOption>false</v2:sftpOption>\n                          </v2:item>\n                       </v2:ftpOptions>\n                    </v2:deliveryChannels>\n                    <v2:reportRequest>\n                       <v2:attributeFormat>xml</v2:attributeFormat>\n                       <v2:byPassCache>true</v2:byPassCache>\n                       <v2:flattenXML>false</v2:flattenXML>\n                       <v2:reportAbsolutePath>{reportPath}</v2:reportAbsolutePath>\n                       </v2:reportRequest>\n                    <v2:saveDataOption>true</v2:saveDataOption>\n                    <v2:saveOutputOption>true</v2:saveOutputOption>\n                    <v2:schedulePublicOption>true</v2:schedulePublicOption>\n                    <v2:userJobName>{scheduleJobName}</v2:userJobName>\n                 </v2:scheduleRequest>\n                 <v2:userID>{FusionEndPointUserName}</v2:userID>\n                 <v2:password>{FusionEndPointPassword}</v2:password>\n              </v2:scheduleReport>\n           </soapenv:Body>\n        </soapenv:Envelope>\";\n\n        using (var client = new HttpClient())\n        {\n            var content = new StringContent(soapEnvelope, Encoding.UTF8, \"text/xml\");\n            client.DefaultRequestHeaders.Add(\"SOAPAction\", \"http://xmlns.oracle.com/oxp/service/PublicReportService/scheduleReport\");\n            \n            HttpResponseMessage response = await client.PostAsync(FusionEndPointScheduleURL, content);\n            response.EnsureSuccessStatusCode();\n            \n            string responseXml = await response.Content.ReadAsStringAsync();\n            XDocument doc = XDocument.Parse(responseXml);\n            XNamespace v2 = \"http://xmlns.oracle.com/oxp/service/v2\";\n            string jobId = doc.Descendants(v2 + \"scheduleReportReturn\").FirstOrDefault()?.Value;\n            \n            return jobId;\n        }\n    }\n\n    private static async Task PollForJobCompletion(string scheduledJobId)\n    {\n        string schedulerStatus = \"IN_PROGRESS\";\n        while (schedulerStatus != \"SUCCESS\")\n        {\n            Thread.Sleep(10000); // Wait 10 seconds between checks\n\n            string soapEnvelope = $@\"\n            <soapenv:Envelope xmlns:soapenv=\"\"http://schemas.xmlsoap.org/soap/envelope/\"\" xmlns:v2=\"\"http://xmlns.oracle.com/oxp/service/PublicReportService\"\">\n               <soapenv:Header/>\n               <soapenv:Body>\n                  <v2:getScheduledReportStatus>\n                     <v2:scheduledJobID>{scheduledJobId}</v2:scheduledJobID>\n                     <v2:userID>{FusionEndPointUserName}</v2:userID>\n                     <v2:password>{FusionEndPointPassword}</v2:password>\n                  </v2:getScheduledReportStatus>\n               </soapenv:Body>\n            </soapenv:Envelope>\";\n            \n            using (var client = new HttpClient())\n            {\n                var content = new StringContent(soapEnvelope, Encoding.UTF8, \"text/xml\");\n                client.DefaultRequestHeaders.Add(\"SOAPAction\", \"http://xmlns.oracle.com/oxp/service/PublicReportService/getScheduledReportStatus\");\n\n                HttpResponseMessage response = await client.PostAsync(FusionEndPointScheduleURL, content);\n                response.EnsureSuccessStatusCode();\n\n                string responseXml = await response.Content.ReadAsStringAsync();\n                XDocument doc = XDocument.Parse(responseXml);\n                XNamespace v2 = \"http://xmlns.oracle.com/oxp/service/v2\";\n                schedulerStatus = doc.Descendants(v2 + \"jobStatus\").FirstOrDefault()?.Value;\n                \n                if (schedulerStatus.Contains(\"ERROR\") || schedulerStatus.Contains(\"FAILED\"))\n                {\n                    string message = doc.Descendants(v2 + \"message\").FirstOrDefault()?.Value;\n                    throw new Exception($\"Scheduler failed with status '{schedulerStatus}': {message}\");\n                }\n            }\n        }\n    }\n\n    // ===================================================================================\n    // >> REPLACEMENT FOR 'DatabaseWriter' <<\n    // This section contains the methods from your DatabaseWriter class.\n    // ===================================================================================\n\n    public static void FunctionExecutionLog(string bipId, string chunkNumber, string bipType, string methodName, string status, long dataSize, string message)\n    {\n        var parameters = new List<SqlParameter>\n        {\n            new SqlParameter(\"@BipId\", int.Parse(bipId)),\n            new SqlParameter(\"@ChunkNumber\", int.Parse(chunkNumber)),\n            new SqlParameter(\"@BipType\", bipType),\n            new SqlParameter(\"@MethodName\", methodName),\n            new SqlParameter(\"@Status\", status),\n            new SqlParameter(\"@DataSize\", dataSize),\n            new SqlParameter(\"@FailLogMessage\", (object)message ?? DBNull.Value)\n        };\n        ExecuteProcedureWithParameter(\"YourExecutionLog_SP\", parameters);\n    }\n\n    public static void ConfigTableStatusUpdate(string bipId, string pklExtractionStatus, string extractionStatus, string extractionDate, string lastModifiedDate, string ingestionStatus)\n    {\n        var parameters = new List<SqlParameter>\n        {\n            new SqlParameter(\"@BipId\", int.Parse(bipId)),\n            new SqlParameter(\"@PKLExtractionStatus\", (object)pklExtractionStatus ?? DBNull.Value),\n            new SqlParameter(\"@ExtactionStatus\", (object)extractionStatus ?? DBNull.Value),\n            new SqlParameter(\"@LastExtactionDate\", (object)extractionDate ?? DBNull.Value),\n            new SqlParameter(\"@LastModifiedDate\", (object)lastModifiedDate ?? DBNull.Value),\n            new SqlParameter(\"@IngestionStatus\", (object)ingestionStatus ?? DBNull.Value)\n        };\n        ExecuteProcedureWithParameter(\"YourConfigUpdate_SP\", parameters);\n    }\n    \n    public static void ExecuteProcedureWithParameter(string storedProcedureName, List<SqlParameter> paramList)\n    {\n        using (var con = new SqlConnection(StagingDBConnectionString))\n        {\n            using (SqlCommand cmd = new SqlCommand(storedProcedureName, con))\n            {\n                cmd.CommandType = CommandType.StoredProcedure;\n                cmd.Parameters.AddRange(paramList.ToArray());\n                con.Open();\n                cmd.ExecuteNonQuery();\n            }\n        }\n    }\n}",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":921,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_MKOHG-1",
			"id":"n_sFerY",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_ok",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":308,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":3
}
{
	"appsUsed":[
		
	],
	"createdTime":1759229585185,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_w3L5T",
			"priority":0,
			"skip":false,
			"toNodeId":"n_leC1R",
			"type":"next"
		},
		{
			"fromNodeId":"n_leC1R",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sFerY",
			"type":"next"
		}
	],
	"id":"68dbb6913a8ae40264e8464f",
	"lastModifiedBy":308,
	"lcName":"[dp-func-extractbip-prod-sa]schedulebipfunction",
	"modifiedTime":1759235282750,
	"name":"[dp-func-extractbip-prod-sa]ScheduleBIPFunction",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":970,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_MKOHG-1",
			"id":"n_w3L5T",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"ok",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":44,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_MKOHG-1",
			"id":"n_leC1R",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Xml.Linq;\nusing Newtonsoft.Json;\n\npublic static class ScheduleFusionBIPFunction\n{\n    public static async Task<object> Run(dynamic body)\n    {\n        try\n        {\n            // 1. Read Inputs from the body\n            string bipId = body.bipId;\n            string entityName = body.entityName;\n            string reportPath = body.reportPath;\n            string parameterList = body.parameterList;\n            string bipType = body.bipType;\n            string chunkNumber = body.chunkNumber;\n            string dataLakePath = body.dataLakePath;\n\n            Task.Run(() => ContinueScheduleBIP(bipId, entityName, reportPath, parameterList, bipType, chunkNumber, dataLakePath));\n\n            return new { Result = $\"Request Accepted for BIP entity {entityName}\" };\n        }\n        catch (Exception ex)\n        {\n            return new { Error = \"ERROR\"};\n        }\n    }\n\n    private static async Task ContinueScheduleBIP(string bipId, string entityName, string reportPath, string parameterList, string bipType, string chunkNumber, string dataLakePath)\n    {\n        try\n        {\n            string dateTimeSuffix = Regex.Replace(DateTime.UtcNow.ToString(\"s\"), \"[-,:]\", \"\").Replace(\"T\", \"_\");\n            string scheduleJobName = $\"{entityName}_{bipType}_{dateTimeSuffix}\";\n\n            FunctionExecutionLog(bipId, chunkNumber, bipType, \"Starter\", \"IN PROGRESS\", 0, null);\n\n            string reportSchedulerResponse = await ScheduleReport(bipId, chunkNumber, entityName, bipType, parameterList, reportPath, scheduleJobName);\n\n            if (bipType == \"PKL\" || bipType == \"AUDIT\")\n                ConfigTableStatusUpdate(bipId, \"SUCCESS\", null, null, null, null);\n            else\n                ConfigTableStatusUpdate(bipId, null, null, null, null, \"SUCCESS\");\n        }\n        catch (Exception ex)\n        {\n            var paramList = new List<SqlParameter>\n            {\n                new SqlParameter(\"@BipId\", SqlDbType.Int) { Value = bipId },\n                new SqlParameter(\"@Message\", SqlDbType.VarChar) { Value = ex.Message },\n                new SqlParameter(\"@Status\", SqlDbType.VarChar) { Value = \"FAILED\" },\n                new SqlParameter(\"@BipType\", SqlDbType.VarChar) { Value = bipType }\n            };\n            ExecuteProcedureWithParameter(\"[config].[USP_SET_FUSION_BIP_REPORT_EXTACTION_STATUS]\", paramList);\n            throw;\n        }\n    }\n\n    private static async Task<string> ScheduleReport(string bipId, string chunkNumber, string entityName, string bipType, string parameterList, string reportPath, string scheduleJobName)\n    {\n        FunctionExecutionLog(bipId, chunkNumber, bipType, Const.A_RunReportXml, Const.InProgressStatus, 0, null);\n        try\n        {\n            string scheduledJobId = await ScheduleReportWithHttpClient(parameterList, reportPath, scheduleJobName, entityName, bipType);\n            string schedulerStatus = Const.schedularInProgressStatus;\n            int retryCount = 0;\n\n            while (schedulerStatus != Const.schedularSuccessStatus)\n            {\n                Thread.Sleep(10000);\n                try\n                {\n                     schedulerStatus = await GetScheduleStatusWithHttpClient(scheduledJobId);\n                     if (schedulerStatus == Const.schedularErrorStatus || schedulerStatus == Const.schedularFailedStatus || schedulerStatus == Const.schedularDeliveryFailedStatus || schedulerStatus == Const.schedularDeliveryErrorStatus)\n                     {\n                         throw new Exception($\"Scheduler failed with status: {schedulerStatus}\");\n                     }\n                }\n                catch(Exception ex)\n                {\n                    if(ex.Message.Contains(Const.objectReferrenceErrorMessage) && retryCount < 10) {\n                        retryCount++;\n                    }\n                    else {\n                        throw;\n                    }\n                }\n            }\n            \n            // RESTORED: Final logging logic from original code\n            if (bipType == Const.BipTypePKL || bipType == Const.BipTypeAudit || bipType == Const.BipTypeData)\n            {\n                FunctionExecutionLog(bipId, chunkNumber, bipType, Const.A_RunReportXml, Const.InProgressStatus, 0, null);\n            }\n            else\n            {\n                FunctionExecutionLog(bipId, chunkNumber, bipType, Const.A_RunReportXml, Const.SuccessStatus, 0, null);\n            }\n            return Const.SuccessStatus;\n        }\n        catch (Exception ex) {\n            FunctionExecutionLog(bipId, chunkNumber, bipType, Const.A_RunReportXml, Const.FailedStatus, 0, ex.Message);\n            throw new Exception($\"ERROR : {scheduleJobName} - {ex.Message}\");\n        }\n    }\n\n    // ===================================================================================\n    // >> RE-IMPLEMENTATION OF FusionBIPScheduleServiceReference <<\n    // This section uses HttpClient to manually send SOAP requests.\n    // ===================================================================================\n\n    private static async Task<string> ScheduleReportWithHttpClient(string parameterList, string reportPath, string scheduleJobName, string entityName, string bipType)\n    {\n        string endpoint = Environment.GetEnvironmentVariable(\"FusionEndPointScheduleURL\");\n        string username = Environment.GetEnvironmentVariable(\"FusionEndPointUserName\");\n        string password = Environment.GetEnvironmentVariable(\"FusionEndPointPassword\");\n        \n        string soapPayload = BuildScheduleReportPayload(parameterList, reportPath, scheduleJobName, entityName, bipType);\n\n        using (HttpClient client = new HttpClient())\n        {\n            StringContent content = new StringContent(soapPayload, Encoding.UTF8, \"text/xml\");\n            client.DefaultRequestHeaders.Add(\"SOAPAction\", \"scheduleReport\");\n\n            HttpResponseMessage response = await client.PostAsync(endpoint, content);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                throw new Exception($\"SOAP API call to schedule report failed with status {response.StatusCode}: {responseContent}\");\n            }\n            \n            // Parse the SOAP response to get the Job ID\n            XDocument doc = XDocument.Parse(responseContent);\n            XNamespace v2 = \"http://xmlns.oracle.com/oxp/service/v2\";\n            string jobId = doc.Descendants(v2 + \"scheduleReportReturn\").FirstOrDefault()?.Value;\n            \n            if (string.IsNullOrEmpty(jobId))\n            {\n                throw new Exception(\"Could not find scheduleReportReturn (Job ID) in SOAP response.\");\n            }\n            return jobId;\n        }\n    }\n\n    private static async Task<string> GetScheduleStatusWithHttpClient(string scheduledJobId)\n    {\n        string endpoint = Environment.GetEnvironmentVariable(\"FusionEndPointScheduleURL\");\n        string username = Environment.GetEnvironmentVariable(\"FusionEndPointUserName\");\n        string password = Environment.GetEnvironmentVariable(\"FusionEndPointPassword\");\n\n        string soapPayload = BuildGetStatusPayload(scheduledJobId, username, password);\n\n        using (HttpClient client = new HttpClient())\n        {\n            StringContent content = new StringContent(soapPayload, Encoding.UTF8, \"text/xml\");\n            client.DefaultRequestHeaders.Add(\"SOAPAction\", \"getScheduledReportStatus\");\n            \n            HttpResponseMessage response = await client.PostAsync(endpoint, content);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                throw new Exception($\"SOAP API call to get status failed with status {response.StatusCode}: {responseContent}\");\n            }\n\n            XDocument doc = XDocument.Parse(responseContent);\n            XNamespace v2 = \"http://xmlns.oracle.com/oxp/service/v2\";\n            string jobStatus = doc.Descendants(v2 + \"jobStatus\").FirstOrDefault()?.Value;\n\n            return jobStatus ?? \"Unknown\";\n        }\n    }\n\n    private static string BuildScheduleReportPayload(string parameterList, string reportPath, string scheduleJobName, string entityName, string bipType)\n    {\n        // This function builds the complex SOAP XML needed to schedule a report.\n        // It's a direct translation of creating and setting properties on the C# objects.\n        string ftpServerName = Environment.GetEnvironmentVariable(\"FTPServerName\");\n        string ftpUserName = Environment.GetEnvironmentVariable(\"FTPUserName\");\n        string ftpUserPassword = Environment.GetEnvironmentVariable(\"FTPPassword\");\n        string ftpRootFolder = Environment.GetEnvironmentVariable(\"FTPRootFolder\");\n        string fileName = $\"{entityName}_{bipType}.xml\";\n\n        var parametersXml = new StringBuilder();\n        foreach (var param in parameterList.Split('|'))\n        {\n            var parts = param.Split('=');\n            if (parts.Length > 1)\n            {\n                parametersXml.Append($@\"\n                    <v2:item>\n                        <v2:name>{parts[0]}</v2:name>\n                        <v2:values>\n                            <v2:item>{parts[1]}</v2:item>\n                        </v2:values>\n                    </v2:item>\");\n            }\n        }\n\n        return $@\"\n        <soapenv:Envelope xmlns:soapenv=\"\"http://schemas.xmlsoap.org/soap/envelope/\"\" xmlns:v2=\"\"http://xmlns.oracle.com/oxp/service/v2\"\">\n           <soapenv:Header/>\n           <soapenv:Body>\n              <v2:scheduleReport>\n                 <v2:scheduleRequest>\n                    <v2:deliveryChannels>\n                       <v2:ftpOptions>\n                          <v2:item>\n                             <v2:ftpServerName>{ftpServerName}</v2:ftpServerName>\n                             <v2:ftpUserName>{ftpUserName}</v2:ftpUserName>\n                             <v2:ftpUserPassword>{ftpUserPassword}</v2:ftpUserPassword>\n                             <v2:remoteFile>{ftpRootFolder}{fileName}</v2:remoteFile>\n                             <v2:sftpOption>false</v2:sftpOption>\n                          </v2:item>\n                       </v2:ftpOptions>\n                    </v2:deliveryChannels>\n                    <v2:reportRequest>\n                       <v2:attributeFormat>xml</v2:attributeFormat>\n                       <v2:byPassCache>true</v2:byPassCache>\n                       <v2:flattenXML>false</v2:flattenXML>\n                       <v2:parameterNameValues>\n                          <v2:listOfParamNameValues>\n                            {parametersXml}\n                          </v2:listOfParamNameValues>\n                       </v2:parameterNameValues>\n                       <v2:reportAbsolutePath>{reportPath}</v2:reportAbsolutePath>\n                       <v2:sizeOfDataChunkDownload>-1</v2:sizeOfDataChunkDownload>\n                    </v2:reportRequest>\n                    <v2:saveDataOption>true</v2:saveDataOption>\n                    <v2:saveOutputOption>true</v2:saveOutputOption>\n                    <v2:schedulePublicOption>true</v2:schedulePublicOption>\n                    <v2:userJobName>{scheduleJobName}</v2:userJobName>\n                 </v2:scheduleRequest>\n                 <v2:userID>{Environment.GetEnvironmentVariable(\"FusionEndPointUserName\")}</v2:userID>\n                 <v2:password>{Environment.GetEnvironmentVariable(\"FusionEndPointPassword\")}</v2:password>\n              </v2:scheduleReport>\n           </soapenv:Body>\n        </soapenv:Envelope>\";\n    }\n    \n    private static string BuildGetStatusPayload(string scheduledJobId, string username, string password)\n    {\n         return $@\"\n         <soapenv:Envelope xmlns:soapenv=\"\"http://schemas.xmlsoap.org/soap/envelope/\"\" xmlns:v2=\"\"http://xmlns.oracle.com/oxp/service/v2\"\">\n           <soapenv:Header/>\n           <soapenv:Body>\n              <v2:getScheduledReportStatus>\n                 <v2:scheduledJobID>{scheduledJobId}</v2:scheduledJobID>\n                 <v2:userID>{username}</v2:userID>\n                 <v2:password>{password}</v2:password>\n              </v2:getScheduledReportStatus>\n           </soapenv:Body>\n        </soapenv:Envelope>\";\n    }\n\n    // ===================================================================================\n    // >> RE-IMPLEMENTATION OF DatabaseWriter <<\n    // This section uses standard System.Data.SqlClient to talk to the database.\n    // ===================================================================================\n\n    private static void ExecuteProcedureWithParameter(string storedProcedureName, List<SqlParameter> paramList)\n    {\n        string connStr = Environment.GetEnvironmentVariable(\"StagingDBConnectionString\");\n        using (var con = new SqlConnection(connStr))\n        {\n            using (SqlCommand cmd = new SqlCommand(storedProcedureName, con))\n            {\n                cmd.CommandType = CommandType.StoredProcedure;\n                cmd.Parameters.AddRange(paramList.ToArray());\n                con.Open();\n                cmd.ExecuteNonQuery();\n            }\n        }\n    }\n\n    private static void FunctionExecutionLog(string bipId, string chunkNumber, string bipType, string methodName, string status, long dataSize, string message)\n    {\n        var paramList = new List<SqlParameter>\n        {\n            new SqlParameter(\"@BipId\", SqlDbType.Int) { Value = int.Parse(bipId) },\n            new SqlParameter(\"@ChunkNumber\", SqlDbType.Int) { Value = int.Parse(chunkNumber) },\n            new SqlParameter(\"@BipType\", SqlDbType.VarChar) { Value = bipType },\n            new SqlParameter(\"@MethodName\", SqlDbType.VarChar) { Value = methodName },\n            new SqlParameter(\"@Status\", SqlDbType.VarChar) { Value = status },\n            new SqlParameter(\"@DataSize\", SqlDbType.BigInt) { Value = dataSize },\n            new SqlParameter(\"@Message\", SqlDbType.VarChar) { Value = (object)message ?? DBNull.Value }\n        };\n        ExecuteProcedureWithParameter(\"[audit].[USP_INSERT_FUSION_BIP_REPORT_EXTRACTION_EXECUTION_LOG]\", paramList);\n    }\n\n    private static void ConfigTableStatusUpdate(string bipId, string pklExtractionStatus, string extractionStatus, string extractionDate, string lastModifiedDate, string ingestionStatus)\n    {\n        var paramList = new List<SqlParameter>\n        {\n            new SqlParameter(\"@BipId\", SqlDbType.Int) { Value = bipId },\n            new SqlParameter(\"@PKLExtractionStatus\", SqlDbType.VarChar) { Value = (object)pklExtractionStatus ?? DBNull.Value },\n            new SqlParameter(\"@ExtactionStatus\", SqlDbType.VarChar) { Value = (object)extractionStatus ?? DBNull.Value },\n            new SqlParameter(\"@LastExtactionDate\", SqlDbType.DateTime) { Value = (object)extractionDate ?? DBNull.Value },\n            new SqlParameter(\"@LastModifiedDate\", SqlDbType.DateTime) { Value = (object)lastModifiedDate ?? DBNull.Value },\n            new SqlParameter(\"@IngestionStatus\", SqlDbType.VarChar) { Value = (object)ingestionStatus ?? DBNull.Value }\n        };\n        ExecuteProcedureWithParameter(\"[config].[USP_UPDATE_FUSION_BIP_REPORT_CONFIGURATION_STATUS]\", paramList);\n    }\n}",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":921,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_MKOHG-1",
			"id":"n_sFerY",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_ok",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":308,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":4
}
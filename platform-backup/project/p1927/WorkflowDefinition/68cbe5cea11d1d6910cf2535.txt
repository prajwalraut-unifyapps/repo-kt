{
	"appsUsed":[
		
	],
	"createdTime":1758193102565,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1758785854236,
		"deployedBy":103171,
		"deployedDefinitionId":"68d4f13e6ead205f9aa8da44",
		"status":"DEPLOYED",
		"version":2,
		"workflowVersion":16
	},
	"edges":[
		{
			"fromNodeId":"n_vy8G1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_J96dR",
			"type":"next"
		},
		{
			"fromNodeId":"n_J96dR",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Z6Z7l",
			"type":"next"
		}
	],
	"id":"68cbe5cea11d1d6910cf2535",
	"lastModifiedBy":103171,
	"lcName":"[virtu-rpa-contractuploadfn]contract_validation",
	"modifiedTime":1758891639758,
	"name":"[virtu-rpa-contractuploadfn]contract_validation",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":877,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Ismw0-1",
			"id":"n_vy8G1",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"result",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[
								"result"
							]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":777,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Ismw0-1",
			"id":"n_J96dR",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"result":{
							"type":"string",
							"title":"Result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"body":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Body"
						}
					}
				},
				"configurationMode":"MANUAL",
				"code":"import pandas as pd\nimport json\n\ndef validate_contract_data(data):\n\n    if isinstance(data, str):\n        payload = json.loads(data)\n    else:\n        payload = data\n    \n    contract_data = payload['contract_data']\n    customer_data = payload['customer_data']\n    project_data = payload['project_data']\n    project_task_data = payload['project_task_data']\n    transaction_type_data = payload['transaction_types']\n    \n    contract_data_df = pd.DataFrame(contract_data)\n    customer_data_df = pd.DataFrame(customer_data)\n    project_data_df = pd.DataFrame(project_data)\n    project_task_data_df = pd.DataFrame(project_task_data)\n    transaction_type_data_df = pd.DataFrame(transaction_type_data)\n    \n    List1 = []\n    lst_strng = ''\n    \n    if contract_data_df['Index'].nunique() != len(contract_data_df.index):\n        out_string = '{\"Overall Status\":\"Fail\",\"error_lines\":\"Non Unique Index\"}'\n    else:\n        for line in contract_data:\n            errormessage = ''\n            lst_strng = ''\n            \n            if line['Index'] == '':\n                errormessage = errormessage + '|Index is Mandatory'\n            if line['Business Unit'] == '':\n                errormessage = errormessage + '|Business Unit is Mandatory'\n            if line['Contract Number'] == '':\n                errormessage = errormessage + '|Contract Number is Mandatory'\n            if line['Description'] == '':\n                errormessage = errormessage + '|Description is Mandatory'\n            if line['Customer Number'] == '':\n                errormessage = errormessage + '|Customer Number is Mandatory'\n            if line['Customer Name'] == '':\n                errormessage = errormessage + '|Customer Name is Mandatory'\n            if line['Contract Currency'] == '':\n                errormessage = errormessage + '|Contract Currency is Mandatory'\n            if line['Header Start Date'] == '':\n                errormessage = errormessage + '|Header Start Date is Mandatory'\n            if line['Header End Date'] == '':\n                errormessage = errormessage + '|Header End Date is Mandatory'\n            if line['Contract Amount'] == '':\n                errormessage = errormessage + '|Contract Amount is Mandatory'\n            if line['Line Name'] == '':\n                errormessage = errormessage + '|Line Name is Mandatory'\n            if line['Line Start Date'] == '':\n                errormessage = errormessage + '|Line Start Date is Mandatory'\n            if line['Line End Date'] == '':\n                errormessage = errormessage + '|Line End Date is Mandatory'\n            if line['Line Amount'] == '':\n                errormessage = errormessage + '|Line Amount is Mandatory'\n            if line['Ship To Site'] == '':\n                errormessage = errormessage + '|Ship To Site is Mandatory'\n            if line['Bill To Site'] == '':\n                errormessage = errormessage + '|Bill To Site is Mandatory'\n            if line['Inventory Organization'] == '':\n                errormessage = errormessage + '|Inventory Organization is Mandatory'\n            if line['Billing Entity Number(BSV)'] == '':\n                errormessage = errormessage + '|Billing Entity Number(BSV) is Mandatory'\n            if line['Bill Plan Name'] == '':\n                errormessage = errormessage + '|Bill Plan Name is Mandatory'\n            if line['Bill Method'] == '':\n                errormessage = errormessage + '|Bill Method is Mandatory'\n            if line['Bill set'] == '':\n                errormessage = errormessage + '|Bill set is Mandatory'\n            if line['Payment Terms'] == '':\n                errormessage = errormessage + '|Payment Terms is Mandatory'\n            if line['Revenue Plan Name'] == '':\n                errormessage = errormessage + '|Revenue Plan Name is Mandatory'\n            if line['Revenue Method'] == '':\n                errormessage = errormessage + '|Revenue Method is Mandatory'\n            if line['Project Number'] == '':\n                errormessage = errormessage + '|Project Number is Mandatory'\n            if line['Task Number'] == '':\n                errormessage = errormessage + '|Task Number is Mandatory'\n            if line['Funded Amount'] == '':\n                errormessage = errormessage + '|Funded Amount is Mandatory'\n            if line['Genarated Invoice Status'] == '':\n                errormessage = errormessage + '|Genarated Invoice Status is Mandatory'\n            \n            if float(line['Contract Amount']) <= 0:\n                errormessage = errormessage + '|Contract Amount need to be greater than 0'\n            if float(line['Line Amount']) <= 0:\n                errormessage = errormessage + '|Line Amount need to be greater than 0'\n            if float(line['Funded Amount']) <= 0:\n                errormessage = errormessage + '|Funded Amount need to be greater than 0'\n            \n            # Date Validations\n            if line['Header Start Date'] > line['Header End Date']:\n                errormessage = errormessage + '|Header End date is before Header Start Date'\n            if line['Header Start Date'] == line['Header End Date']:\n                errormessage = errormessage + '|Header End date is equal to Header Start Date'\n            if line['Line Start Date'] > line['Line End Date']:\n                errormessage = errormessage + '|Line End date is before Line Start Date'\n            if line['Line Start Date'] == line['Line End Date']:\n                errormessage = errormessage + '|Line End date is equal to Line Start Date'\n            if line['Header Start Date'] > line['Line Start Date']:\n                errormessage = errormessage + '|Line Start date is before Header Start Date'\n            if line['Header End Date'] < line['Line End Date']:\n                errormessage = errormessage + '|Line End date is after Header End Date'\n            \n            if line['Signed/Work At Risk'] != '':\n                if line['Signed/Work At Risk'] != 'Signed' and line['Signed/Work At Risk'] != 'Work At Risk':\n                    errormessage = errormessage + '|Invalid Contract Signed value'\n            \n            if line['Genarated Invoice Status'] != 'Submitted' and line['Genarated Invoice Status'] != 'Draft' and line['Genarated Invoice Status'] != 'Released':\n                errormessage = errormessage + '|Invalid Genarated Invoice Status value'\n            \n            if line['Line Type'] != 'Services' and line['Line Type'] != 'Expenses':\n                errormessage = errormessage + '|Invalid Line Type value'\n            \n            if line['Engagement Type'] != 'Fixed Price' and line['Engagement Type'] != 'FPR Non-Utilization' and line['Engagement Type'] != 'Time and Material' and line['Engagement Type'] != 'Retainer-T and M' and line['Engagement Type'] != 'FPR Utilization':\n                errormessage = errormessage + '|Invalid Engagement Type value'\n            \n            if (line['Engagement Type'] == 'Fixed Price' and line['Line Type'] == 'Services' and line['Bill Method'] != 'Amount Based Invoice'):\n                errormessage = errormessage + '|Bill Method is incorrect'\n            \n            if (line['Engagement Type'] == 'Fixed Price' and line['Line Type'] == 'Services' and line['Revenue Method'] != 'Percent Complete Revenue'):\n                errormessage = errormessage + '|Revenue Method is incorrect'\n            \n            if ((line['Engagement Type'] == 'FPR Non-Utilization' or line['Engagement Type'] == 'FPR Utilization') and line['Line Type'] == 'Services' and line['Bill Method'] != 'Amount Based Invoice'):\n                errormessage = errormessage + '|Bill Method is incorrect'\n            \n            if ((line['Engagement Type'] == 'FPR Non-Utilization' or line['Engagement Type'] == 'FPR Utilization') and line['Line Type'] == 'Services' and line['Revenue Method'] != 'Amount Based Revenue'):\n                errormessage = errormessage + '|Revenue Method is incorrect'\n            \n            if (line['Engagement Type'] == 'Time and Material' and line['Line Type'] == 'Services' and not (line['Bill Method'] == 'Bill Rate Invoice' or line['Bill Method'] == 'Client Timesheet' or line['Bill Method'] == 'Client Timesheet - Disc' or line['Bill Method'] == 'Bill Rate Invoice - Disc')):\n                errormessage = errormessage + '|Bill Method is incorrect'\n            \n            if (line['Engagement Type'] == 'Time and Material' and line['Line Type'] == 'Services' and not (line['Revenue Method'] != 'As Incurred Revenue' or line['Revenue Method'] != 'Bill Rate Revenue')):\n                errormessage = errormessage + '|Revenue Method is incorrect'\n            \n            if (line['Engagement Type'] == 'Retainer-T and M' and line['Line Type'] == 'Services' and line['Bill Method'] != 'Bill Rate Invoice'):\n                errormessage = errormessage + '|Bill Method is incorrect'\n            \n            if (line['Engagement Type'] == 'Retainer-T and M' and line['Line Type'] == 'Services' and line['Revenue Method'] != 'As Incurred Revenue'):\n                errormessage = errormessage + '|Revenue Method is incorrect'\n            \n            if (line['Line Type'] == 'Expenses' and not (line['Bill Method'] == 'Amount Based Invoice' or line['Bill Method'] == 'Cost Reimbursable Invoice')):\n                errormessage = errormessage + '|Bill Method is incorrect'\n            \n            if (line['Line Type'] == 'Expenses' and not (line['Revenue Method'] == 'Amount Based Revenue' or line['Revenue Method'] == 'Cost Reimbursable Revenue' or line['Revenue Method'] == 'As Incurred Revenue')):\n                errormessage = errormessage + '|Revenue Method is incorrect'\n            \n            filter_1 = '`Contract Number`== \"' + line['Contract Number'] + '\"'\n            current_cont_h_df = contract_data_df.query(filter_1, inplace=False)\n            \n            if is_header_consistent(current_cont_h_df):\n                errormessage = errormessage\n            else:\n                errormessage = errormessage + '|Contract Header is Inconsistent'\n            \n            filter_2 = '`Contract Number`== \"' + line['Contract Number'] + '\" & `Line Name`== \"' + line['Line Name'] + '\"'\n            current_cont_l_df = contract_data_df.query(filter_2, inplace=False)\n            \n            if is_line_consistent(current_cont_l_df):\n                errormessage = errormessage\n            else:\n                errormessage = errormessage + '|Contract Line is Inconsistent'\n            \n            if contract_data_df.empty:\n                errormessage = errormessage + '|Customer Number and Customer Name not matching'\n            else:\n                filter_3 = '`CUSTOMER_NAME`== \"' + line['Customer Name'] + '\" & `CUSTOMER_NUMBER`== \"' + line['Customer Number'] + '\"'\n                current_cust_df1 = customer_data_df.query(filter_3, inplace=False)\n                \n                if is_not_valid(current_cust_df1):\n                    errormessage = errormessage + '|Customer Number and Customer Name not matching'\n            \n            if project_data_df.empty:\n                errormessage = errormessage + '|Invalid Project Number'\n            else:\n                filter_4 = '`PROJECT_NUMBER`== \"' + line['Project Number'] + '\"'\n                current_prj_df1 = project_data_df.query(filter_4, inplace=False)\n                \n                if is_not_valid(current_prj_df1):\n                    errormessage = errormessage + '|Invalid Project Number'\n            \n            if project_data_df.empty:\n                errormessage = errormessage + '|Business Unit not aligned with the project'\n            else:\n                filter_5 = '`PROJECT_NUMBER`== \"' + line['Project Number'] + '\" & `BUSINESS_UNIT`== \"' + line['Business Unit'] + '\"'\n                current_prj_df2 = project_data_df.query(filter_5, inplace=False)\n                \n                if is_not_valid(current_prj_df2):\n                    errormessage = errormessage + '|Business Unit not aligned with the project'\n            \n            if customer_data_df.empty:\n                errormessage = errormessage + '|Ship to Site is invalid'\n            else:\n                filter_6 = '`CUSTOMER_NAME`== \"' + line['Customer Name'] + '\" & `CUSTOMER_NUMBER`== \"' + line['Customer Number'] + '\" & `BUSINESS_UNIT`== \"' + line['Business Unit'] + '\" & `SHIP_TO_LOCATION`== \"' + line['Ship To Site']+ '\"'\n                current_cust_df2 = customer_data_df.query(filter_6, inplace=False)\n                \n                if is_not_valid(current_cust_df2):\n                    errormessage = errormessage + '|Ship to Site is invalid'\n            \n            if customer_data_df.empty:\n                errormessage = errormessage + '|Bill to Site is invalid'\n            else:\n                filter_7 = '`CUSTOMER_NAME`== \"' + line['Customer Name'] + '\" & `CUSTOMER_NUMBER`== \"' + line['Customer Number'] + '\" & `BUSINESS_UNIT`== \"' + line['Business Unit'] + '\" & `BILL_TO_LOCATION`== \"' + line['Bill To Site']+ '\"'\n                current_cust_df3 = customer_data_df.query(filter_7, inplace=False)\n                \n                if is_not_valid(current_cust_df3):\n                    errormessage = errormessage + '|Bill to Site is invalid'\n            \n            if project_task_data_df.empty:\n                errormessage = errormessage + '|Task Number Invalid'\n            else:\n                filter_8 = '`PROJECT_NUMBER`== \"' + line['Project Number'] + '\" & `TASK_NUMBER`== \"' + line['Task Number'] + '\"'\n                prj_task_df3 = project_task_data_df.query(filter_8, inplace=False)\n                \n                if is_not_valid(prj_task_df3):\n                    errormessage = errormessage + '|Task Number Invalid'\n            \n            if transaction_type_data_df.empty:\n                errormessage = errormessage + '|Transaction Type Invalid'\n            else:\n                filter_9 = '`NAME`== \"' + line['Billing Entity Number(BSV)'] + '\"'\n                trans_type_df1 = transaction_type_data_df.query(filter_9, inplace=False)\n                \n                if is_not_valid(trans_type_df1):\n                    errormessage = errormessage + '|Transaction Type Invalid'\n            \n            if errormessage != '':\n                lst_strng = '{\"Index\" : \"' + line['Index'] + '\", \"Message\" : \"' + errormessage + '\"}'\n                List1.append(lst_strng)\n        \n        error_lines = ''\n        out_string = ''\n        \n        if not List1:\n            out_string = '{\"Overall Status\":\"Success\"}'\n        else:\n            for item in List1:\n                error_lines = error_lines + item + ','\n            \n            error_lines = error_lines[0:len(error_lines)-1]\n            out_string = '{\"Overall Status\":\"Fail\",\"error_lines\": ['+error_lines+']}'\n    \n    return out_string\n\ndef is_header_consistent(cont_df):\n    if ((cont_df['Business Unit'].nunique() > 1) or\n            (cont_df['Contract Number'].nunique() > 1) or\n            (cont_df['Description'].nunique() > 1) or\n            (cont_df['Customer Number'].nunique() > 1) or\n            (cont_df['Customer Name'].nunique() > 1) or\n            (cont_df['Contract Currency'].nunique() > 1) or\n            (cont_df['Header Start Date'].nunique() > 1) or\n            (cont_df['Header End Date'].nunique() > 1) or\n            (cont_df['Contract Amount'].nunique() > 1) or\n            (cont_df['Inventory Organization'].nunique() > 1) or\n            (cont_df['Billing Entity Number(BSV)'].nunique() > 1) or\n            (cont_df['Genarated Invoice Status'].nunique() > 1)):\n        return False\n    else:\n        return True\n\ndef is_line_consistent(line_df):\n    if ((line_df['Line Name'].nunique() > 1) or\n            (line_df['Line Description'].nunique() > 1) or\n            (line_df['Line Start Date'].nunique() > 1) or\n            (line_df['Line End Date'].nunique() > 1) or\n            (line_df['Line Amount'].nunique() > 1) or\n            (line_df['PO Number'].nunique() > 1) or\n            (line_df['Ship To Site'].nunique() > 1) or\n            (line_df['Bill To Site'].nunique() > 1) or\n            (line_df['Engagement Type'].nunique() > 1) or\n            (line_df['Signed/Work At Risk'].nunique() > 1)):\n        return False\n    else:\n        return True\n\ndef is_not_valid(p_df):\n    if len(p_df.index) == 0:\n        return True\n\ndata = body \nresult = validate_contract_data(data)",
				"imports":[
					"pandas"
				],
				"isAsync":false,
				"python_version":"3.8",
				"captureStdOutput":false,
				"parameters":{
					"body":"{{ n_vy8G1.outputs.body }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":830,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Ismw0-1",
			"id":"n_Z6Z7l",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_result",
				"body":{
					"result":"{{ n_J96dR.outputs.result }}"
				},
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":308,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":18
}
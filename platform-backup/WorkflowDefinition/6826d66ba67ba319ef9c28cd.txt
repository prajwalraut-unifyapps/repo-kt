{
	"appsUsed":[
		"openai"
	],
	"createdTime":1748544437599,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759243623522,
		"deployedBy":-1,
		"deployedDefinitionId":"68dbed679213d707c2d274cb",
		"status":"DEPLOYED",
		"version":46,
		"workflowVersion":111
	},
	"edges":[
		{
			"fromNodeId":"2z5FW",
			"priority":0,
			"skip":false,
			"toNodeId":"Sb6RP",
			"type":"next"
		},
		{
			"fromNodeId":"Sb6RP",
			"priority":0,
			"skip":false,
			"toNodeId":"FSBKb",
			"type":"next"
		},
		{
			"fromNodeId":"FSBKb",
			"priority":0,
			"skip":false,
			"toNodeId":"9jTas",
			"type":"next"
		},
		{
			"fromNodeId":"9jTas",
			"priority":0,
			"skip":false,
			"toNodeId":"txF1M",
			"type":"next"
		},
		{
			"fromNodeId":"txF1M",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"N4P3y",
			"type":"if"
		},
		{
			"fromNodeId":"N4P3y",
			"priority":0,
			"skip":false,
			"toNodeId":"uBXMm",
			"type":"next"
		},
		{
			"fromNodeId":"uBXMm",
			"priority":0,
			"skip":false,
			"toNodeId":"05VFf",
			"type":"next"
		},
		{
			"fromNodeId":"05VFf",
			"priority":0,
			"skip":false,
			"toNodeId":"afOZq",
			"type":"loop"
		},
		{
			"fromNodeId":"afOZq",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"05VFf",
			"type":"next"
		},
		{
			"fromNodeId":"txF1M",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"n_p8NTq",
			"type":"next"
		},
		{
			"fromNodeId":"n_p8NTq",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_XOBY5",
			"type":"if"
		},
		{
			"fromNodeId":"n_XOBY5",
			"priority":0,
			"skip":false,
			"toNodeId":"n_gskbd",
			"type":"next"
		},
		{
			"fromNodeId":"n_p8NTq",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"LiAZv",
			"type":"next"
		},
		{
			"fromNodeId":"LiAZv",
			"priority":0,
			"skip":false,
			"toNodeId":"sIvJb",
			"type":"next"
		},
		{
			"fromNodeId":"sIvJb",
			"priority":0,
			"skip":false,
			"toNodeId":"BdU2A",
			"type":"loop"
		},
		{
			"fromNodeId":"BdU2A",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"sIvJb",
			"type":"next"
		},
		{
			"fromNodeId":"05VFf",
			"priority":0,
			"skip":false,
			"toNodeId":"nUFAz",
			"type":"next"
		},
		{
			"fromNodeId":"n_gskbd",
			"priority":0,
			"skip":false,
			"toNodeId":"nUFAz",
			"type":"next"
		},
		{
			"fromNodeId":"sIvJb",
			"priority":0,
			"skip":false,
			"toNodeId":"nUFAz",
			"type":"next"
		},
		{
			"fromNodeId":"nUFAz",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"V437X",
			"type":"if"
		},
		{
			"fromNodeId":"V437X",
			"priority":0,
			"skip":false,
			"toNodeId":"ZdDt6",
			"type":"next"
		},
		{
			"fromNodeId":"ZdDt6",
			"priority":0,
			"skip":false,
			"toNodeId":"2wKEh",
			"type":"loop"
		},
		{
			"fromNodeId":"2wKEh",
			"priority":0,
			"skip":false,
			"toNodeId":"2oPET",
			"type":"next"
		},
		{
			"fromNodeId":"2oPET",
			"priority":0,
			"skip":false,
			"toNodeId":"95hHk",
			"type":"loop"
		},
		{
			"fromNodeId":"95hHk",
			"priority":0,
			"skip":false,
			"toNodeId":"WyVPw",
			"type":"next"
		},
		{
			"fromNodeId":"WyVPw",
			"priority":0,
			"skip":false,
			"toNodeId":"odeZg",
			"type":"next"
		},
		{
			"fromNodeId":"odeZg",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"JhX7F",
			"type":"if"
		},
		{
			"fromNodeId":"JhX7F",
			"priority":0,
			"skip":false,
			"toNodeId":"0UFdn",
			"type":"next"
		},
		{
			"fromNodeId":"0UFdn",
			"priority":0,
			"skip":false,
			"toNodeId":"AxnaD",
			"type":"next"
		},
		{
			"fromNodeId":"odeZg",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"AxnaD",
			"type":"next"
		},
		{
			"fromNodeId":"AxnaD",
			"priority":0,
			"skip":false,
			"toNodeId":"hVN5y",
			"type":"next"
		},
		{
			"fromNodeId":"hVN5y",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"2oPET",
			"type":"next"
		},
		{
			"fromNodeId":"2oPET",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"ZdDt6",
			"type":"next"
		},
		{
			"fromNodeId":"nUFAz",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"4vYXs",
			"type":"next"
		},
		{
			"fromNodeId":"4vYXs",
			"priority":0,
			"skip":false,
			"toNodeId":"9toZn",
			"type":"next"
		},
		{
			"fromNodeId":"9toZn",
			"priority":0,
			"skip":false,
			"toNodeId":"n_biABS",
			"type":"loop"
		},
		{
			"fromNodeId":"n_biABS",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ELaqM",
			"type":"if"
		},
		{
			"fromNodeId":"n_ELaqM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_fsHKq",
			"type":"loop"
		},
		{
			"fromNodeId":"n_fsHKq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_oyOYh",
			"type":"next"
		},
		{
			"fromNodeId":"n_oyOYh",
			"priority":0,
			"skip":false,
			"toNodeId":"_Z5hmq",
			"type":"loop"
		},
		{
			"fromNodeId":"_Z5hmq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_xyE6b",
			"type":"next"
		},
		{
			"fromNodeId":"n_xyE6b",
			"priority":0,
			"skip":false,
			"toNodeId":"_NIdrL",
			"type":"next"
		},
		{
			"fromNodeId":"_NIdrL",
			"priority":0,
			"skip":false,
			"toNodeId":"_YBEct",
			"type":"next"
		},
		{
			"fromNodeId":"_YBEct",
			"priority":0,
			"skip":false,
			"toNodeId":"_pLZKb",
			"type":"next"
		},
		{
			"fromNodeId":"_pLZKb",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"n_oyOYh",
			"type":"next"
		},
		{
			"fromNodeId":"n_oyOYh",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ELaqM",
			"type":"next"
		},
		{
			"fromNodeId":"n_biABS",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Rx5w0",
			"type":"next"
		},
		{
			"fromNodeId":"n_Rx5w0",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sLlNP",
			"type":"next"
		},
		{
			"fromNodeId":"n_sLlNP",
			"name":"1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sLlNP@1",
			"type":"branch"
		},
		{
			"fromNodeId":"n_sLlNP@1",
			"priority":0,
			"skip":false,
			"toNodeId":"_q49PO",
			"type":"next"
		},
		{
			"fromNodeId":"_q49PO",
			"priority":0,
			"skip":false,
			"toNodeId":"_NVeuk",
			"type":"next"
		},
		{
			"fromNodeId":"n_sLlNP",
			"name":"2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sLlNP@2",
			"type":"branch"
		},
		{
			"fromNodeId":"n_sLlNP@2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JGLnw",
			"type":"next"
		},
		{
			"fromNodeId":"n_JGLnw",
			"priority":0,
			"skip":false,
			"toNodeId":"n_j9oad",
			"type":"next"
		},
		{
			"fromNodeId":"n_sLlNP",
			"name":"3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sLlNP@3",
			"type":"branch"
		},
		{
			"fromNodeId":"n_sLlNP@3",
			"priority":0,
			"skip":false,
			"toNodeId":"_3xC8I",
			"type":"next"
		},
		{
			"fromNodeId":"_3xC8I",
			"priority":0,
			"skip":false,
			"toNodeId":"_0QZX2",
			"type":"next"
		},
		{
			"fromNodeId":"_NVeuk",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Q7OtS",
			"type":"next"
		},
		{
			"fromNodeId":"n_j9oad",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Q7OtS",
			"type":"next"
		},
		{
			"fromNodeId":"_0QZX2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Q7OtS",
			"type":"next"
		},
		{
			"fromNodeId":"n_sLlNP",
			"name":"default",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Q7OtS",
			"type":"branch"
		},
		{
			"fromNodeId":"n_Q7OtS",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sctMD",
			"type":"if"
		},
		{
			"fromNodeId":"n_sctMD",
			"priority":0,
			"skip":false,
			"toNodeId":"_XFT4O",
			"type":"next"
		},
		{
			"fromNodeId":"n_Q7OtS",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"Xs5Wx",
			"type":"next"
		},
		{
			"fromNodeId":"Xs5Wx",
			"priority":0,
			"skip":false,
			"toNodeId":"n_pijV3",
			"type":"next"
		},
		{
			"fromNodeId":"_XFT4O",
			"priority":0,
			"skip":false,
			"toNodeId":"CxsRP",
			"type":"next"
		},
		{
			"fromNodeId":"Bgn0J",
			"priority":0,
			"skip":false,
			"toNodeId":"CxsRP",
			"type":"next"
		},
		{
			"fromNodeId":"n_pijV3",
			"priority":0,
			"skip":false,
			"toNodeId":"CxsRP",
			"type":"next"
		},
		{
			"fromNodeId":"CxsRP",
			"priority":0,
			"skip":false,
			"toNodeId":"rRj1D",
			"type":"loop"
		},
		{
			"fromNodeId":"rRj1D",
			"priority":0,
			"skip":false,
			"toNodeId":"n_L6T0u",
			"type":"next"
		},
		{
			"fromNodeId":"n_L6T0u",
			"priority":0,
			"skip":false,
			"toNodeId":"XBLGV",
			"type":"next"
		},
		{
			"fromNodeId":"XBLGV",
			"priority":0,
			"skip":false,
			"toNodeId":"bRe5O",
			"type":"next"
		},
		{
			"fromNodeId":"bRe5O",
			"priority":0,
			"skip":false,
			"toNodeId":"Bgn0J",
			"type":"next"
		},
		{
			"fromNodeId":"n_ELaqM",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"9toZn",
			"type":"next"
		},
		{
			"fromNodeId":"CxsRP",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"9toZn",
			"type":"next"
		},
		{
			"fromNodeId":"ZdDt6",
			"priority":0,
			"skip":false,
			"toNodeId":"LMbkU",
			"type":"next"
		},
		{
			"fromNodeId":"9toZn",
			"priority":0,
			"skip":false,
			"toNodeId":"LMbkU",
			"type":"next"
		},
		{
			"fromNodeId":"LMbkU",
			"name":"success",
			"priority":0,
			"skip":false,
			"toNodeId":"9Q9PL",
			"type":"next"
		},
		{
			"fromNodeId":"LMbkU",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"Tm2os",
			"type":"error"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"6826d66ba67ba319ef9c28cd",
	"lastModifiedBy":-1,
	"lcName":"codechunker (dnd)",
	"modifiedTime":1759371941074,
	"name":"CodeChunker (DND)",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":345,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gTKtD-1",
			"id":"2z5FW",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"text":{
										"type":"string",
										"title":"text"
									},
									"chunkMetadata":{
										"type":"object",
										"title":"chunkMetadata"
									}
								},
								"additionalProperties":false
							},
							"title":"chunks"
						},
						"success":{
							"type":"string",
							"title":"Success"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"FileDetails":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"File Details"
						},
						"mimeType":{
							"type":"string",
							"title":"mimeType"
						},
						"chunkMetadata":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"chunkMetadata"
						},
						"KnowledgeId":{
							"type":"string",
							"title":"Knowledge Id"
						},
						"KnowledgeVersion":{
							"type":"integer",
							"title":"Knowledge Version"
						},
						"SharedWithIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Shared With Ids"
						},
						"AuthorEmail":{
							"type":"string",
							"title":"Author Email"
						},
						"UniqueEntityId":{
							"type":"string",
							"title":"Unique Entity Id"
						},
						"url":{
							"type":"string",
							"title":"Url"
						},
						"Agentic":{
							"type":"boolean",
							"title":"Agentic",
							"default":"false"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":359,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gTKtD-1",
			"id":"Sb6RP",
			"index":2,
			"inputs":{
				"automationId":"6708d355e5c64343ba9b278e",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"mimeType":"{{ 2z5FW.outputs.mimeType }}",
					"knowledgeId":"{{ 2z5FW.outputs.KnowledgeId }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gTKtD-1",
			"id":"FSBKb",
			"index":3,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object",
									"properties":{
										"text":{
											"type":"string",
											"title":"text"
										},
										"chunkMetadata":{
											"type":"object",
											"properties":{
												"contentForGeneration":{
													"type":"string",
													"title":"contentForGeneration",
													"required":[]
												}
											},
											"additionalProperties":false,
											"title":"chunkMetadata",
											"required":[]
										}
									},
									"additionalProperties":false,
									"required":[]
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"Chunks",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"Chunks",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"text":{
										"type":"string",
										"title":"text"
									},
									"chunkMetadata":{
										"type":"object",
										"properties":{
											"contentForGeneration":{
												"type":"string",
												"title":"contentForGeneration",
												"required":[]
											}
										},
										"additionalProperties":false,
										"title":"chunkMetadata",
										"required":[]
									}
								},
								"required":[]
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gTKtD-1",
			"id":"9jTas",
			"index":4,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"CodeContent",
				"ua:list_type":"STRING"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"CodeContent",
							"disableActions":true,
							"items":{
								"type":"string"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":340,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gTKtD-1",
			"id":"txF1M",
			"index":5,
			"inputs":{
				"filters":[
					{
						"property":"{{ 2z5FW.outputs.url }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":360,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"txF1M@gTKtD-1@y",
			"id":"N4P3y",
			"index":6,
			"inputs":{
				"automationId":"67da7f7305ff7e5fe6f32c4b",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"url":"{{ 2z5FW.outputs.url }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"unify_ai",
				"resourceVersion":347,
				"resourceName":"unify_ai_read_unstructured_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"txF1M@gTKtD-1@y",
			"id":"uBXMm",
			"index":7,
			"inputs":{
				"file":"{{ N4P3y.outputs.downloadedFile }}"
			},
			"skip":false,
			"subTitle":"Unify AI",
			"title":"Read file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":351,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"txF1M@gTKtD-1@y",
			"id":"05VFf",
			"index":8,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ uBXMm.outputs.page_contents }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"05VFf@txF1M@gTKtD-1@y@l",
			"id":"afOZq",
			"index":9,
			"inputs":{
				"itemToAdd":"{{ 05VFf.outputs.item }}",
				"insertLocation":"START",
				"listName":"{{ 9jTas.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":437,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"txF1M@gTKtD-1@n",
			"id":"n_p8NTq",
			"index":10,
			"inputs":{
				"filters":[
					{
						"property":"{{ 2z5FW.outputs.mimeType }}",
						"filter":{
							"operator":"EQUAL",
							"value":"text/vbscript"
						}
					},
					{
						"property":"{{ 2z5FW.outputs.mimeType }}",
						"filter":{
							"operator":"EQUAL",
							"value":"text/x-progress"
						}
					}
				],
				"operator":"OR"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":446,
				"resourceName":"utility_by_unifyapps_download_file_as_string",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_p8NTq@txF1M@gTKtD-1@n@y",
			"id":"n_XOBY5",
			"index":11,
			"inputs":{
				"file":"{{ 2z5FW.outputs.FileDetails }}",
				"encoding":"utf8"
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Download file as string",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_p8NTq@txF1M@gTKtD-1@n@y",
			"id":"n_gskbd",
			"index":12,
			"inputs":{
				"itemToAdd":"{{ n_XOBY5.outputs.fileContent }}",
				"insertLocation":"END",
				"listName":"{{ 9jTas.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"unify_ai",
				"resourceVersion":347,
				"resourceName":"unify_ai_read_unstructured_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_p8NTq@txF1M@gTKtD-1@n@n",
			"id":"LiAZv",
			"index":13,
			"inputs":{
				"file":"{{ 2z5FW.outputs.FileDetails }}"
			},
			"skip":false,
			"subTitle":"Unify AI",
			"title":"Read file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":351,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_p8NTq@txF1M@gTKtD-1@n@n",
			"id":"sIvJb",
			"index":14,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ LiAZv.outputs.page_contents }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"sIvJb@n_p8NTq@txF1M@gTKtD-1@n@n@l",
			"id":"BdU2A",
			"index":15,
			"inputs":{
				"itemToAdd":"{{ sIvJb.outputs.item }}",
				"insertLocation":"END",
				"listName":"{{ 9jTas.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":340,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gTKtD-1",
			"id":"nUFAz",
			"index":16,
			"inputs":{
				"filters":[
					{
						"property":"{{ 2z5FW.outputs.Agentic }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":352,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"nUFAz@gTKtD-1@y",
			"id":"V437X",
			"index":17,
			"inputs":{
				"result":{
					"success":"NOT READY YET"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":351,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"nUFAz@gTKtD-1@y",
			"id":"ZdDt6",
			"index":18,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ 9jTas.outputs.items }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":359,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"ZdDt6@nUFAz@gTKtD-1@y@l",
			"id":"2wKEh",
			"index":19,
			"inputs":{
				"automationId":"66bbb74eda2bd42ba22030d0",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"filePath":".py",
					"fileDetails":"{{ 2z5FW.outputs.FileDetails }}",
					"text":"{{ ZdDt6.outputs.item }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Code to graph transformer",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":350,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"ZdDt6@nUFAz@gTKtD-1@y@l",
			"id":"2oPET",
			"index":20,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ 2wKEh.outputs.nodes }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"For each node in code",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2oPET@ZdDt6@nUFAz@gTKtD-1@y@l@l",
			"id":"95hHk",
			"index":21,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodeText":{
							"type":"string",
							"title":"Node Text"
						},
						"allowed":{
							"type":"boolean",
							"title":"Allowed"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"node":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Node"
						}
					},
					"additionalProperties":false,
					"required":[
						"node"
					]
				},
				"compile_static":false,
				"code":"\n// only index methods and classes\nif ((node?.labels?.contains('CLASS') || node?.labels?.contains('METHOD'))) {\n\n    String type = node?.labels?.contains('CLASS') ? \"class\" : \"method\"\n\n    // Determine language\n    List<String> langs = [\"python\", \"java\"]\n    String language = node?.labels?.find { it in langs } ?: \"unknown\"\n\n    // Build readable fragments\n    List<String> fragments = []\n    fragments << \"the following is a ${language} ${type}\"\n    node.params.each { String key, Object value ->\n        String humanKey = key.replaceAll('_', ' ')\n        fragments << \"the ${humanKey} is: ${value}\"\n    }\n\n    return [\"nodeText\" : fragments.join(', '), \"allowed\" : true]\n}\n\nreturn [\"allowed\": false]",
				"parameters":{
					"node":"{{ 2oPET.outputs.item }}"
				}
			},
			"skip":false,
			"subTitle":"Convert node to text",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"continue",
				"resourceVersion":341,
				"resourceName":"continue",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2oPET@ZdDt6@nUFAz@gTKtD-1@y@l@l",
			"id":"WyVPw",
			"index":22,
			"inputs":{
				"loop":"2oPET",
				"conditions":{
					"filters":[
						{
							"property":"{{ 95hHk.outputs.result.allowed }}",
							"filter":{
								"operator":"EQUAL",
								"value":"false"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"subTitle":"Continue",
			"title":"Continue",
			"type":"CONTINUE"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":340,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2oPET@ZdDt6@nUFAz@gTKtD-1@y@l@l",
			"id":"odeZg",
			"index":23,
			"inputs":{
				"filters":[
					{
						"property":"{{ CELiN.outputs.result.summarizeCode }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Summarize code using LLM",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"odeZg@2oPET@ZdDt6@nUFAz@gTKtD-1@y@l@l@y",
			"id":"JhX7F",
			"index":24,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"prompt":{
							"type":"string",
							"title":"Prompt"
						}
					},
					"additionalProperties":false,
					"required":[
						"prompt"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"node":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Node"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def prompt = \"You are a semantic‐search indexer for source code. I will give you an object that contains all the metadata and source of a class or method. Your job is to turn that into a rich, detailed text description that can be used for semantic search.  Generate:  1. **Title**: a one‐line summary (e.g. “User.return_book method”) 2. **Purpose**: what the code is for 3. **Parameters**: list each parameter and its role 4. **Behavior**: key side-effects, state changes, exceptions 5. **Return**: what it returns (or `void`) 6. **Context**: the class, module/file path, and how it fits 7. **Tags**: a short list of keywords  Format your output as clear, human‐readable text. Do not include anything else.  Do it for the following object: ${node}\"\n\nreturn [\"prompt\": prompt.toString()]",
				"parameters":{
					"node":"{{ 2oPET.outputs.item.params }}"
				}
			},
			"skip":false,
			"subTitle":"Configure prompt",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":359,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"odeZg@2oPET@ZdDt6@nUFAz@gTKtD-1@y@l@l@y",
			"id":"0UFdn",
			"index":25,
			"inputs":{
				"automationId":"66dfd76eb70dad256986b784",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"type":"text",
					"response_format":"text",
					"content":"{{ JhX7F.outputs.result.prompt }}",
					"modelId":"e_67e7ceee30312c2e8d113570"
				}
			},
			"skip":false,
			"subTitle":"Call LLM",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2oPET@ZdDt6@nUFAz@gTKtD-1@y@l@l",
			"id":"AxnaD",
			"index":26,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"chunk":{
							"type":"string",
							"title":"Chunk"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"llmDescription":{
							"type":"string",
							"title":"Llm Description"
						},
						"nodeText":{
							"type":"string",
							"title":"Node Text"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def llm = binding.hasVariable('llmDescription') ? llmDescription : \"\"\ndef node = binding.hasVariable('nodeText') ? nodeText : \"\"\n\nreturn [\"chunk\" : (llm + \"\\n\" + node).toString()]",
				"parameters":{
					"llmDescription":"{{ 0UFdn.outputs.llmResponse }}",
					"nodeText":"{{ 95hHk.outputs.result.nodeText }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":348,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2oPET@ZdDt6@nUFAz@gTKtD-1@y@l@l",
			"id":"hVN5y",
			"index":27,
			"inputs":{
				"itemToAdd":{
					"text":"{{ AxnaD.outputs.result.chunk }}",
					"chunkMetadata":"{{ 2z5FW.outputs.chunkMetadata }}"
				},
				"insertLocation":"END",
				"listName":"{{ FSBKb.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"nUFAz@gTKtD-1@n",
			"id":"4vYXs",
			"index":28,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"Lang":{
							"type":"string",
							"title":"Lang"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"configurationMode":"DEFAULT",
				"input":{
					"type":"object",
					"properties":{
						"mimeType":{
							"type":"string",
							"title":"Mime Type"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"code":"MIMETYPE_TO_CODE_TYPE = {\n    'text/x-c++src': 'C++',\n    'text/x-go': 'Go',\n    'text/x-java-source': 'Java',\n    'text/x-kotlin': 'Kotlin',\n    'text/javascript': 'JS',\n    'text/typescript': 'TypeScript',\n    'text/x-php': 'PHP',\n    'text/x-python': 'Python',\n    'text/x-progress' : \"Progress\"\n}\n\nresult = {\"Lang\":MIMETYPE_TO_CODE_TYPE.get(mimeType,\"\")}",
				"isAsync":false,
				"python_version":"3.12",
				"parameters":{
					"mimeType":"{{ 2z5FW.outputs.mimeType }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":350,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"nUFAz@gTKtD-1@n",
			"id":"9toZn",
			"index":29,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ 9jTas.outputs.items }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":437,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9toZn@nUFAz@gTKtD-1@n@l",
			"id":"n_biABS",
			"index":30,
			"inputs":{
				"filters":[
					{
						"property":"{{ 2z5FW.outputs.mimeType }}",
						"filter":{
							"operator":"EQUAL",
							"value":"text/sql"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":453,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_biABS@9toZn@nUFAz@gTKtD-1@n@l@y",
			"id":"n_ELaqM",
			"index":31,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ 9jTas.outputs.items }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_ELaqM@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@y@l",
			"id":"n_fsHKq",
			"index":32,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"chunks"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"codecontent":{
							"type":"string",
							"title":"codecontent"
						}
					},
					"additionalProperties":false
				},
				"code":"def chunk_sql_string(sql_string: str):\n    import sqlparse\n    import hashlib\n    import json\n    from typing import List, Dict, Any  \n    statements = sqlparse.split(sql_string)\n    chunks = []\n    for i, statement_text in enumerate(statements):\n        cleaned_statement = statement_text.strip()\n        if not cleaned_statement:\n            continue\n        parsed_statement = sqlparse.parse(cleaned_statement)[0]\n        statement_type = parsed_statement.get_type()\n        object_name = None\n        for token in parsed_statement.tokens:\n            if isinstance(token, sqlparse.sql.Identifier):\n                object_name = token.get_real_name()\n                break\n        chunks.append(cleaned_statement)\n        \n    return chunks\n\nresult = {\"chunks\" : chunk_sql_string(codecontent)}\n\n\n",
				"isAsync":false,
				"parameters":{
					"codecontent":"{{ n_ELaqM.outputs.item }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":453,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_ELaqM@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@y@l",
			"id":"n_oyOYh",
			"index":33,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ n_fsHKq.outputs.result.chunks }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_oyOYh@n_ELaqM@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@y@l@l",
			"id":"_Z5hmq",
			"index":34,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"prompt"
					],
					"properties":{
						"prompt":{
							"type":"string",
							"title":"Prompt"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"code":{
							"type":"string",
							"title":"code"
						}
					}
				},
				"code":"def prompt = \"You are a semantic‐search indexer for source code. I will give you an object that contains all the metadata and source of a class or method. Your job is to turn that into a rich, detailed text description that can be used for semantic search.  Generate:  1. **Title**: a one‐line summary (e.g. “User.return_book method”) 2. **Purpose**: what the code is for 3. **Parameters**: list each parameter and its role 4. **Behavior**: key side-effects, state changes, exceptions 5. **Return**: what it returns (or `void`) 6. **Context**: the class, module/file path, and how it fits 7. **Tags**: a short list of keywords  Format your output as clear, human‐readable text. Do not include anything else.  Do it for the following object: ${code}\"\n\nreturn [\"prompt\": prompt.toString()]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"code":"{{ n_oyOYh.outputs.item }}"
				}
			},
			"skip":false,
			"subTitle":"Configure prompt",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":517,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_oyOYh@n_ELaqM@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@y@l@l",
			"id":"n_xyE6b",
			"index":35,
			"inputs":{
				"automationId":"66dfd76eb70dad256986b784",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"modelId":"e_ai_agent_openai_gpt_4.1",
					"content":"{{ _Z5hmq.outputs.result.prompt }}",
					"type":"text",
					"response_format":"text",
					"maxTokens":"=INT(4096)",
					"temperature":"=0.1"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"openai",
				"resourceVersion":826,
				"connectionId":"68d3b94a048670765f5f2439",
				"resourceName":"openai_analyze_text",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_oyOYh@n_ELaqM@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@y@l@l",
			"id":"_NIdrL",
			"index":36,
			"inputs":{
				"source_text":"{{ n_oyOYh.outputs.item }}",
				"instruction":"You are a semantic‐search indexer for source code. I will give you an object that contains all the metadata and source of a class or method. Your job is to turn that into a rich, detailed text description that can be used for semantic search.  Generate:  1. **Title**: a one‐line summary (e.g. “User.return_book method”) 2. **Purpose**: what the code is for 3. **Parameters**: list each parameter and its role 4. **Behavior**: key side-effects, state changes, exceptions 5. **Return**: what it returns (or `void`) 6. **Context**: the class, module/file path, and how it fits 7. **Tags**: a short list of keywords  Format your output as clear, human‐readable text. Do not include anything else.  Do it for the following object",
				"model":"gpt-4.1"
			},
			"skip":true,
			"subTitle":"OpenAI",
			"title":"Analyze text",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":350,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_oyOYh@n_ELaqM@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@y@l@l",
			"id":"_YBEct",
			"index":37,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"contentforgeneration":{
							"type":"string",
							"title":"contentforgeneration"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"code":{
							"type":"string",
							"title":"code"
						},
						"codedescription":{
							"type":"string",
							"title":"codedescription"
						}
					}
				},
				"code":"def output = \"query: ${code} \\n query description: ${codedescription}\"\n\nreturn [\"contentforgeneration\" : output.toString()]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"code":"{{ n_oyOYh.outputs.item }}",
					"codedescription":"{{ n_xyE6b.outputs.llmResponse }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemToAdd.chunkMetadata.contentForGeneration"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_oyOYh@n_ELaqM@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@y@l@l",
			"id":"_pLZKb",
			"index":38,
			"inputs":{
				"itemToAdd":{
					"text":"{{ n_xyE6b.outputs.llmResponse }}",
					"chunkMetadata":{
						"contentForGeneration":"{{ _YBEct.outputs.result.contentforgeneration }}"
					},
					"metadata":{
						"contentForGeneration":"{{ _YBEct.outputs.result.contentforgeneration }}"
					}
				},
				"insertLocation":"END",
				"listName":"{{ FSBKb.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n",
			"id":"n_Rx5w0",
			"index":39,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"prechunks",
				"ua:list_type":"STRING"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"prechunks",
							"disableActions":true,
							"items":{
								"type":"string"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"branch",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n",
			"id":"n_sLlNP",
			"index":40,
			"inputs":{
				"branches":[
					{
						"id":"1",
						"inputs":{
							"name":"VB Script",
							"conditions":{
								"filters":[
									{
										"property":"{{ 2z5FW.outputs.mimeType }}",
										"filter":{
											"operator":"EQUAL",
											"value":"text/vbscript"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"2",
						"inputs":{
							"name":"Progress",
							"conditions":{
								"filters":[
									{
										"property":"{{ 2z5FW.outputs.mimeType }}",
										"filter":{
											"operator":"EQUAL",
											"value":"text/x-progress"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"3",
						"inputs":{
							"name":"Other Languages",
							"conditions":{
								"filters":[
									{
										"property":"{{ 2z5FW.outputs.mimeType }}",
										"filter":{
											"operator":"NOT_EQUAL",
											"value":"text/vbscript"
										}
									},
									{
										"property":"{{ 2z5FW.outputs.mimeType }}",
										"filter":{
											"operator":"NOT_EQUAL",
											"value":"text/x-progress"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"default"
					}
				]
			},
			"skip":false,
			"subTitle":"Branch",
			"title":"",
			"type":"BRANCH"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@1",
			"id":"n_sLlNP@1",
			"index":41,
			"inputs":{
				"name":"VB Script",
				"conditions":{
					"filters":[
						{
							"property":"{{ 2z5FW.outputs.mimeType }}",
							"filter":{
								"operator":"EQUAL",
								"value":"text/vbscript"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@1",
			"id":"_q49PO",
			"index":42,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"chunks"
						}
					},
					"additionalProperties":false
				},
				"configurationMode":"DEFAULT",
				"input":{
					"type":"object",
					"properties":{
						"codecontent":{
							"type":"string",
							"title":"codecontent"
						}
					},
					"additionalProperties":false
				},
				"code":"# def chunk_vbs_code_blocks(vbs_code: str) -> list[str]:\n#     import re\n#     pattern_string = r\"^\\s*(?:(Function|Sub|Class)\\s+[a-zA-Z0-9_]+.*?^\\s*End\\s+\\1)\"\n#     flags = re.MULTILINE | re.DOTALL | re.IGNORECASE\n#     iterator = re.finditer(pattern_string, vbs_code, flags)\n#     matched_chunks = [match.group(0).strip() for match in iterator]\n    \n#     return matched_chunks\n\n\ndef chunk_vbs_code_blocks(vbs_code: str) -> list[str]:\n    import re\n    pattern_string = r\"^\\s*(?:(End)\\s+(Class|Function|Sub|Property)|(?:(Public|Private|Friend)\\s+)?(Class|Function|Sub|Property\\s+(?:Let|Get|Set))\\s+([a-zA-Z0-9_]+))\"\n    stack = []\n    block_positions = []\n    for match in re.finditer(pattern_string, vbs_code, re.MULTILINE | re.IGNORECASE):\n        is_end_statement = match.group(1) is not None\n        if is_end_statement:\n            end_type = match.group(2).lower()\n            if stack:\n                start_type, start_pos = stack[-1]\n                normalized_start_type = start_type.lower().split()[0]\n                if normalized_start_type == end_type:\n                    stack.pop()\n                    block_end_pos = match.end()\n                    block_positions.append((start_pos, block_end_pos))\n        else:\n            start_type = match.group(4)\n            start_pos = match.start()\n            stack.append((start_type, start_pos))\n    block_positions.sort(key=lambda p: p[0])\n    chunks = [vbs_code[start:end].strip() for start, end in block_positions]\n    return chunks\n\n\nchunks = chunk_vbs_code_blocks(codecontent)\nresult = {\"chunks\" :chunks}\n\n",
				"isAsync":false,
				"python_version":"3.12",
				"parameters":{
					"codecontent":"{{ 9toZn.outputs.item }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@1",
			"id":"_NVeuk",
			"index":43,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ _q49PO.outputs.result.chunks }}",
					"items":"{{ _q49PO.outputs.result.chunks[0] }}"
				},
				"listName":"{{ n_Rx5w0.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@2",
			"id":"n_sLlNP@2",
			"index":44,
			"inputs":{
				"name":"Progress",
				"conditions":{
					"filters":[
						{
							"property":"{{ 2z5FW.outputs.mimeType }}",
							"filter":{
								"operator":"EQUAL",
								"value":"text/x-progress"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":461,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@2",
			"id":"n_JGLnw",
			"index":45,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"chunks"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"MaxChunkSize"
					],
					"properties":{
						"codecontent":{
							"type":"string",
							"title":"codecontent"
						},
						"MaxChunkSize":{
							"type":"integer",
							"title":"MaxChunkSize"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"# def chunk_abl_code(code_text: str, max_chunk_size: int = 0) -> list[str]:\n#     import re\n#     logical_chunks = []\n#     lines = code_text.split('\\n')\n#     i = 0\n#     while i < len(lines):\n#         line = lines[i].strip()\n\n#         if not line:\n#             i += 1\n#             continue\n\n#         if line.startswith('&SCOPED-DEFINE'):\n#             logical_chunks.append({'type': 'Preprocessor Define', 'content': line})\n\n#         elif line.upper().startswith('DEFINE'):\n#             content = []\n#             chunk_type = 'Other Definitions'\n#             if 'PARAMETER' in line.upper(): chunk_type = 'Parameter Definitions'\n#             elif 'VARIABLE' in line.upper(): chunk_type = 'Variable Definitions'\n            \n#             while i < len(lines) and lines[i].strip().upper().startswith('DEFINE'):\n#                 content.append(lines[i])\n#                 i += 1\n#             logical_chunks.append({'type': chunk_type, 'content': '\\n'.join(content)})\n#             continue\n\n#         elif line.upper().startswith('PROCEDURE'):\n#             content = []\n#             match = re.match(r'PROCEDURE\\s+(.*?):', line, re.IGNORECASE)\n#             proc_name = match.group(1) if match else 'Unnamed'\n            \n#             while i < len(lines):\n#                 content.append(lines[i])\n#                 if lines[i].strip().upper().startswith('END PROCEDURE'): break\n#                 i += 1\n#             logical_chunks.append({'type': f'Procedure: {proc_name}', 'content': '\\n'.join(content)})\n\n#         elif line.upper().startswith('RUN'):\n#             logical_chunks.append({'type': 'Run Statement', 'content': line})\n\n#         else:\n#             content = []\n#             while i < len(lines):\n#                 current_line = lines[i].strip()\n#                 if not current_line or re.match(r'^(&SCOPED-DEFINE|DEFINE|PROCEDURE|RUN)', current_line, re.IGNORECASE):\n#                     break\n#                 content.append(lines[i])\n#                 i += 1\n#             if content:\n#                 logical_chunks.append({'type': 'Main Logic', 'content': '\\n'.join(content)})\n#             continue\n\n#         i += 1\n    \n#     if not max_chunk_size or max_chunk_size <= 0:\n#         return [chunk['content'] for chunk in logical_chunks]\n#     final_chunks_with_type = []\n#     for chunk in logical_chunks:\n#         chunk_lines = chunk['content'].split('\\n')\n#         if len(chunk_lines) <= max_chunk_size:\n#             final_chunks_with_type.append(chunk)\n#         else:\n#             part_num = 1\n#             for j in range(0, len(chunk_lines), max_chunk_size):\n#                 sub_lines = chunk_lines[j:j + max_chunk_size]\n#                 final_chunks_with_type.append({\n#                     'type': f\"{chunk['type']} (Part {part_num})\",\n#                     'content': '\\n'.join(sub_lines)\n#                 })\n#                 part_num += 1\n                \n#     return [chunk['content'] for chunk in final_chunks_with_type]\n\ndef _get_logical_chunks(code_text: str) -> list[dict]:\n    import re\n    logical_chunks = []\n    lines = code_text.split('\\n')\n    i = 0\n    while i < len(lines):\n        line = lines[i].strip()\n\n        if not line:\n            i += 1\n            continue\n    \n        if line.startswith('/*') and not logical_chunks:\n            content = []\n            while i < len(lines):\n                content.append(lines[i])\n                if '*/' in lines[i]:\n                    i += 1\n                    break\n                i += 1\n            logical_chunks.append({'type': 'Header Comment', 'content': '\\n'.join(content)})\n            continue\n\n        if line.startswith('&SCOPED-DEFINE'):\n            logical_chunks.append({'type': 'Preprocessor Define', 'content': line})\n\n        elif line.upper().startswith('DEFINE'):\n            content = []\n            chunk_type = 'Other Definitions'\n            if 'PARAMETER' in line.upper(): chunk_type = 'Parameter Definitions'\n            elif 'VARIABLE' in line.upper(): chunk_type = 'Variable Definitions'\n            \n            start_line = i\n            while i < len(lines) and lines[i].strip().upper().startswith('DEFINE'):\n                content.append(lines[i])\n                i += 1\n            first_line_upper = lines[start_line].strip().upper()\n            if 'PARAMETER' in first_line_upper: chunk_type = 'Parameter Definitions'\n            elif 'VARIABLE' in first_line_upper: chunk_type = 'Variable Definitions'\n\n            logical_chunks.append({'type': chunk_type, 'content': '\\n'.join(content)})\n            continue\n\n        elif line.upper().startswith('PROCEDURE'):\n            content = []\n            match = re.match(r'PROCEDURE\\s+(.*?):', line, re.IGNORECASE)\n            proc_name = match.group(1).strip() if match else 'Unnamed'\n            \n            while i < len(lines):\n                content.append(lines[i])\n                if lines[i].strip().upper().startswith('END PROCEDURE'): break\n                i += 1\n            logical_chunks.append({'type': f'Procedure: {proc_name}', 'content': '\\n'.join(content)})\n\n        elif line.upper().startswith('RUN'):\n            logical_chunks.append({'type': 'Run Statement', 'content': line})\n\n        else:\n            content = []\n            while i < len(lines):\n                current_line = lines[i].strip()\n                if not current_line or re.match(r'^\\s*(&SCOPED-DEFINE|DEFINE|PROCEDURE|RUN)', current_line, re.IGNORECASE):\n                    break\n                content.append(lines[i])\n                i += 1\n            if content:\n                logical_chunks.append({'type': 'Main Logic', 'content': '\\n'.join(content)})\n            continue\n\n        i += 1\n    return logical_chunks\n\n\ndef chunk_abl_code_by_size(code_text: str, max_chunk_size: int = 512) -> list[str]:\n    import re\n    if not max_chunk_size or max_chunk_size <= 0:\n        max_chunk_size = 512\n\n    logical_chunks = _get_logical_chunks(code_text)\n    final_chunks = []\n    current_chunk_lines = []\n\n    for chunk in logical_chunks:\n        chunk_lines = chunk['content'].split('\\n')\n        if len(chunk_lines) > max_chunk_size:\n            if current_chunk_lines:\n                final_chunks.append('\\n'.join(current_chunk_lines))\n                current_chunk_lines = []\n            \n            for i in range(0, len(chunk_lines), max_chunk_size):\n                sub_chunk = chunk_lines[i:i + max_chunk_size]\n                final_chunks.append('\\n'.join(sub_chunk))\n            continue\n\n        if len(current_chunk_lines) + len(chunk_lines) > max_chunk_size:\n            if current_chunk_lines:\n                final_chunks.append('\\n'.join(current_chunk_lines))\n            current_chunk_lines = chunk_lines\n        else:\n            current_chunk_lines.extend(chunk_lines)\n    if current_chunk_lines:\n        final_chunks.append('\\n'.join(current_chunk_lines))\n        \n    return final_chunks\nresult = {\"chunks\" : chunk_abl_code_by_size(code_text = codecontent,max_chunk_size = MaxChunkSize)}\n",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"codecontent":"{{ 9toZn.outputs.item }}",
					"MaxChunkSize":1024
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":439,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@2",
			"id":"n_j9oad",
			"index":46,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ n_JGLnw.outputs.result.chunks }}",
					"items":"{{ n_JGLnw.outputs.result.chunks[0] }}"
				},
				"listName":"{{ n_Rx5w0.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@3",
			"id":"n_sLlNP@3",
			"index":47,
			"inputs":{
				"name":"Other Languages",
				"conditions":{
					"filters":[
						{
							"property":"{{ 2z5FW.outputs.mimeType }}",
							"filter":{
								"operator":"NOT_EQUAL",
								"value":"text/vbscript"
							}
						},
						{
							"property":"{{ 2z5FW.outputs.mimeType }}",
							"filter":{
								"operator":"NOT_EQUAL",
								"value":"text/x-progress"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"unify_ai",
				"resourceVersion":342,
				"resourceName":"unify_ai_chunking_algorithms",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@3",
			"id":"_3xC8I",
			"index":48,
			"inputs":{
				"embeddingType":"HUGGING_FACE",
				"chunkOverlap":512,
				"inputText":"{{ 9toZn.outputs.item }}",
				"language":"{{ 4vYXs.outputs.result.Lang }}",
				"embeddingModel":"sentence-transformers/all-mpnet-base-v2",
				"thresholdType":"percentile",
				"maxChunkSize":1024,
				"algorithm":"CODE_TEXT_SPLITTER"
			},
			"skip":false,
			"subTitle":"Unify AI",
			"title":"Text splitter",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_sLlNP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@3",
			"id":"_0QZX2",
			"index":49,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ _3xC8I.outputs.chunks }}",
					"items":"{{ _3xC8I.outputs.chunks[0] }}"
				},
				"listName":"{{ n_Rx5w0.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":437,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n",
			"id":"n_Q7OtS",
			"index":50,
			"inputs":{
				"filters":[
					{
						"property":"{{ 2z5FW.outputs.mimeType }}",
						"filter":{
							"operator":"EQUAL",
							"value":"text/vbscript"
						}
					}
				],
				"operator":"AND"
			},
			"skip":true,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_Q7OtS@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@y",
			"id":"n_sctMD",
			"index":51,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"chunks"
						}
					},
					"additionalProperties":false
				},
				"configurationMode":"DEFAULT",
				"input":{
					"type":"object",
					"properties":{
						"codecontent":{
							"type":"string",
							"title":"codecontent"
						}
					},
					"additionalProperties":false
				},
				"code":"# def chunk_vbs_code_blocks(vbs_code: str) -> list[str]:\n#     import re\n#     pattern_string = r\"^\\s*(?:(Function|Sub|Class)\\s+[a-zA-Z0-9_]+.*?^\\s*End\\s+\\1)\"\n#     flags = re.MULTILINE | re.DOTALL | re.IGNORECASE\n#     iterator = re.finditer(pattern_string, vbs_code, flags)\n#     matched_chunks = [match.group(0).strip() for match in iterator]\n    \n#     return matched_chunks\n\n\ndef chunk_vbs_code_blocks(vbs_code: str) -> list[str]:\n    import re\n    pattern_string = r\"^\\s*(?:(End)\\s+(Class|Function|Sub|Property)|(?:(Public|Private|Friend)\\s+)?(Class|Function|Sub|Property\\s+(?:Let|Get|Set))\\s+([a-zA-Z0-9_]+))\"\n    stack = []\n    block_positions = []\n    for match in re.finditer(pattern_string, vbs_code, re.MULTILINE | re.IGNORECASE):\n        is_end_statement = match.group(1) is not None\n        if is_end_statement:\n            end_type = match.group(2).lower()\n            if stack:\n                start_type, start_pos = stack[-1]\n                normalized_start_type = start_type.lower().split()[0]\n                if normalized_start_type == end_type:\n                    stack.pop()\n                    block_end_pos = match.end()\n                    block_positions.append((start_pos, block_end_pos))\n        else:\n            start_type = match.group(4)\n            start_pos = match.start()\n            stack.append((start_type, start_pos))\n    block_positions.sort(key=lambda p: p[0])\n    chunks = [vbs_code[start:end].strip() for start, end in block_positions]\n    return chunks\n\n\nchunks = chunk_vbs_code_blocks(codecontent)\nresult = {\"chunks\" :chunks}\n\n",
				"isAsync":false,
				"python_version":"3.12",
				"parameters":{
					"codecontent":"{{ 9toZn.outputs.item }}"
				}
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_Q7OtS@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@y",
			"id":"_XFT4O",
			"index":52,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ n_sctMD.outputs.result.chunks }}",
					"items":"{{ n_sctMD.outputs.result.chunks[0] }}"
				},
				"listName":"{{ n_Rx5w0.outputs.items[0] }}"
			},
			"skip":true,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"unify_ai",
				"resourceVersion":342,
				"resourceName":"unify_ai_chunking_algorithms",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_Q7OtS@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@n",
			"id":"Xs5Wx",
			"index":53,
			"inputs":{
				"embeddingType":"HUGGING_FACE",
				"chunkOverlap":512,
				"inputText":"{{ 9toZn.outputs.item }}",
				"language":"{{ 4vYXs.outputs.result.Lang }}",
				"embeddingModel":"sentence-transformers/all-mpnet-base-v2",
				"thresholdType":"percentile",
				"maxChunkSize":1024,
				"algorithm":"CODE_TEXT_SPLITTER"
			},
			"skip":true,
			"subTitle":"Unify AI",
			"title":"Text splitter",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_Q7OtS@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@n",
			"id":"n_pijV3",
			"index":54,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ Xs5Wx.outputs.chunks }}",
					"items":"{{ Xs5Wx.outputs.chunks[0] }}"
				},
				"listName":"{{ n_Rx5w0.outputs.items[0] }}"
			},
			"skip":true,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":351,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n",
			"id":"CxsRP",
			"index":55,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ n_Rx5w0.outputs.items }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"CxsRP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@l",
			"id":"rRj1D",
			"index":56,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"prompt"
					],
					"properties":{
						"prompt":{
							"type":"string",
							"title":"Prompt"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"code":{
							"type":"string",
							"title":"code"
						}
					}
				},
				"code":"def prompt = \"You are a semantic‐search indexer for source code. I will give you an object that contains all the metadata and source of a class or method. Your job is to turn that into a rich, detailed text description that can be used for semantic search.  Generate:  1. **Title**: a one‐line summary (e.g. “User.return_book method”) 2. **Purpose**: what the code is for 3. **Parameters**: list each parameter and its role 4. **Behavior**: key side-effects, state changes, exceptions 5. **Return**: what it returns (or `void`) 6. **Context**: the class, module/file path, and how it fits 7. **Tags**: a short list of keywords  Format your output as clear, human‐readable text. Do not include anything else.  Do it for the following object: ${code}\"\n\nreturn [\"prompt\": prompt.toString()]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"code":"{{ CxsRP.outputs.item }}"
				}
			},
			"skip":false,
			"subTitle":"Configure prompt",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":517,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"CxsRP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@l",
			"id":"n_L6T0u",
			"index":57,
			"inputs":{
				"automationId":"66dfd76eb70dad256986b784",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"modelId":"e_ai_agent_openai_gpt_4.1_nano",
					"content":"{{ rRj1D.outputs.result.prompt }}",
					"type":"text",
					"response_format":"text",
					"maxTokens":"=INT(4096)",
					"temperature":"=0.1"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"openai",
				"resourceVersion":826,
				"connectionId":"68d3b94a048670765f5f2439",
				"resourceName":"openai_analyze_text",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"CxsRP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@l",
			"id":"XBLGV",
			"index":58,
			"inputs":{
				"source_text":"{{ CxsRP.outputs.item }}",
				"instruction":"You are a semantic‐search indexer for source code. I will give you an object that contains all the metadata and source of a class or method. Your job is to turn that into a rich, detailed text description that can be used for semantic search.  Generate:  1. **Title**: a one‐line summary (e.g. “User.return_book method”) 2. **Purpose**: what the code is for 3. **Parameters**: list each parameter and its role 4. **Behavior**: key side-effects, state changes, exceptions 5. **Return**: what it returns (or `void`) 6. **Context**: the class, module/file path, and how it fits 7. **Tags**: a short list of keywords  Format your output as clear, human‐readable text. Do not include anything else.  Do it for the following object",
				"model":"gpt-4o"
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"global":false
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"duration":"1",
					"enabled":true,
					"threshold":"10",
					"unit":"MINUTES",
					"waitForNextWindow":true
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				},
				"timeoutConfig":{
					"enabled":false
				}
			},
			"skip":true,
			"subTitle":"OpenAI",
			"title":"Analyze text",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":350,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"CxsRP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@l",
			"id":"bRe5O",
			"index":59,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"contentforgeneration":{
							"type":"string",
							"title":"contentforgeneration"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"code":{
							"type":"string",
							"title":"code"
						},
						"codedescription":{
							"type":"string",
							"title":"codedescription"
						}
					}
				},
				"code":"def output = \"code: ${code} \\ncode description: ${codedescription}\"\n\nreturn [\"contentforgeneration\" : output.toString()]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"code":"{{ CxsRP.outputs.item }}",
					"codedescription":"{{ n_L6T0u.outputs.llmResponse }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemToAdd.chunkMetadata.contentForGeneration"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"CxsRP@n_biABS@9toZn@nUFAz@gTKtD-1@n@l@n@l",
			"id":"Bgn0J",
			"index":60,
			"inputs":{
				"itemToAdd":{
					"text":"{{ n_L6T0u.outputs.llmResponse }}",
					"chunkMetadata":{
						"contentForGeneration":"{{ bRe5O.outputs.result.contentforgeneration }}"
					},
					"metadata":{
						"contentForGeneration":"{{ bRe5O.outputs.result.contentforgeneration }}"
					}
				},
				"insertLocation":"END",
				"listName":"{{ FSBKb.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":359,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"gTKtD-1",
			"id":"LMbkU",
			"index":61,
			"inputs":{
				"automationId":"66af3ff4cd79b321cb478a37",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"chunks":{
						"ua:type":"mappedArray",
						"items":{
							"sharedWithIds":{
								"source":"{{ 2z5FW.outputs.SharedWithIds }}",
								"ua:type":"mappedArray",
								"items":"{{ 2z5FW.outputs.SharedWithIds[0] }}"
							},
							"data":"{{ FSBKb.outputs.items[0].text }}",
							"chunkMetadata":"{{ FSBKb.outputs.items[0].chunkMetadata }}"
						},
						"source":"{{ FSBKb.outputs.items }}"
					},
					"authorEmail":"{{ 2z5FW.outputs.AuthorEmail }}",
					"uniqueEntityId":"{{ 2z5FW.outputs.UniqueEntityId }}",
					"chunkMetadata":"{{ 2z5FW.outputs.chunkMetadata }}",
					"knowledgeId":"{{ 2z5FW.outputs.KnowledgeId }}",
					"knowledgeVersion":"{{ 2z5FW.outputs.KnowledgeVersion }}",
					"mimeType":"{{ 2z5FW.outputs.mimeType }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":351,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"LMbkU@gTKtD-1@success",
			"id":"9Q9PL",
			"index":62,
			"inputs":{
				"result":{
					"chunks":{
						"source":"{{ FSBKb.outputs.items }}",
						"ua:type":"mappedArray",
						"items":{
							"text":"{{ FSBKb.outputs.items[0].text }}",
							"chunkMetadata":"{{ FSBKb.outputs.items[0].chunkMetadata }}"
						}
					},
					"success":"OK"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":351,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"LMbkU@gTKtD-1@error",
			"id":"Tm2os",
			"index":63,
			"inputs":{
				"result":{
					"success":"FAILED"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1728,
	"runtimeConnectionAppNames":[
		"openai"
	],
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":112
}
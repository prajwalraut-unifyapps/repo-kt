{
	"appsUsed":[
		
	],
	"createdTime":1750490480295,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759243633170,
		"deployedBy":-1,
		"deployedDefinitionId":"68dbed719213d707c2d27505",
		"status":"DEPLOYED",
		"version":27,
		"workflowVersion":45
	},
	"edges":[
		{
			"fromNodeId":"L7wVA",
			"priority":0,
			"skip":false,
			"toNodeId":"w6uUs",
			"type":"next"
		},
		{
			"fromNodeId":"w6uUs",
			"priority":0,
			"skip":false,
			"toNodeId":"kvFdI",
			"type":"next"
		},
		{
			"fromNodeId":"kvFdI",
			"priority":0,
			"skip":false,
			"toNodeId":"TyNbp",
			"type":"next"
		},
		{
			"fromNodeId":"TyNbp",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"RCGnT",
			"type":"if"
		},
		{
			"fromNodeId":"RCGnT",
			"priority":0,
			"skip":false,
			"toNodeId":"kagiD",
			"type":"next"
		},
		{
			"fromNodeId":"kagiD",
			"priority":0,
			"skip":false,
			"toNodeId":"AqVBP",
			"type":"next"
		},
		{
			"fromNodeId":"AqVBP",
			"priority":0,
			"skip":false,
			"toNodeId":"qpqI7",
			"type":"loop"
		},
		{
			"fromNodeId":"qpqI7",
			"priority":0,
			"skip":false,
			"toNodeId":"BuCRK",
			"type":"next"
		},
		{
			"fromNodeId":"BuCRK",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"AqVBP",
			"type":"next"
		},
		{
			"fromNodeId":"TyNbp",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"1kUa2",
			"type":"next"
		},
		{
			"fromNodeId":"1kUa2",
			"priority":0,
			"skip":false,
			"toNodeId":"HLZQG",
			"type":"next"
		},
		{
			"fromNodeId":"AqVBP",
			"priority":0,
			"skip":false,
			"toNodeId":"_EIars",
			"type":"next"
		},
		{
			"fromNodeId":"HLZQG",
			"priority":0,
			"skip":false,
			"toNodeId":"_EIars",
			"type":"next"
		},
		{
			"fromNodeId":"_EIars",
			"priority":0,
			"skip":false,
			"toNodeId":"_J6uAw",
			"type":"next"
		},
		{
			"fromNodeId":"_J6uAw",
			"priority":0,
			"skip":false,
			"toNodeId":"_m4qp3",
			"type":"next"
		},
		{
			"fromNodeId":"_m4qp3",
			"priority":0,
			"skip":false,
			"toNodeId":"1oZo0",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"681f3ff43c969a73ba001ca6",
	"lastModifiedBy":-1,
	"lcName":"azure bot publisher preprocessor",
	"modifiedTime":1759371950287,
	"name":"Azure bot publisher preprocessor",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":342,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0m2d8-1",
			"id":"L7wVA",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"out":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Out"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"endConversation":{
							"type":"boolean",
							"title":"End Conversation"
						},
						"choices":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"id":{
										"type":"string",
										"title":"Id"
									},
									"title":{
										"type":"string",
										"title":"Title"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Choices"
						},
						"content":{
							"type":"string",
							"title":"Content"
						},
						"url":{
							"type":"string",
							"title":"Url"
						},
						"caseId":{
							"type":"string",
							"title":"Case Id"
						},
						"lang":{
							"type":"string",
							"title":"Lang"
						},
						"attachments":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"Name"
									},
									"url":{
										"type":"string",
										"title":"Url"
									},
									"type":{
										"type":"string",
										"title":"Type"
									},
									"mimeType":{
										"type":"string",
										"title":"Mime Type"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Attachments"
						},
						"input":{
							"type":"object",
							"properties":{
								"triggerInput":{
									"type":"object",
									"properties":{},
									"additionalProperties":false,
									"title":"Trigger Input"
								},
								"userInputsForPublish":{
									"type":"object",
									"properties":{},
									"additionalProperties":false,
									"title":"User Inputs For Publish"
								}
							},
							"additionalProperties":false,
							"title":"Input",
							"required":[]
						},
						"coPilotBlocks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Co Pilot Blocks"
						},
						"caseDetails":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"customerUserDetails":{
										"type":"object",
										"properties":{
											"channelUserId":{
												"type":"string",
												"title":"Channel User Id"
											}
										},
										"additionalProperties":false,
										"title":"Customer User Details",
										"required":[]
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Case Details"
						},
						"publishToEndUser":{
							"type":"boolean",
							"title":"Publish To End User"
						},
						"temporaryMessage":{
							"type":"boolean",
							"title":"Temporary Message"
						},
						"chunkMetadata":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Chunk Metadata"
						},
						"fromCustomerUserId":{
							"type":"string",
							"title":"From Customer User Id"
						},
						"internalMessageType":{
							"type":"string",
							"title":"Internal Message Type"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":346,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0m2d8-1",
			"id":"w6uUs",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"text":{
							"type":"string",
							"title":"Text"
						}
					},
					"required":[]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"text":{
							"type":"string",
							"title":"Text"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Formated text",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":346,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0m2d8-1",
			"id":"kvFdI",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"imageUrls",
				"ua:list_type":"STRING"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"imageUrls",
							"disableActions":true,
							"items":{
								"type":"string"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Image url list",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":337,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0m2d8-1",
			"id":"TyNbp",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ L7wVA.outputs.coPilotBlocks }})",
						"filter":{
							"operator":"GT",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Copilot/image",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.coPilotBlocks.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":346,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"TyNbp@0m2d8-1@y",
			"id":"RCGnT",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"text":{
							"type":"object",
							"properties":{
								"formattedText":{
									"type":"string",
									"title":"Formatted Text"
								}
							},
							"additionalProperties":false,
							"title":"Text",
							"required":[]
						},
						"imageList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Image List"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"coPilotBlocks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Co Pilot Blocks"
						},
						"customerId":{
							"type":"string",
							"title":"Customer Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def removeHtmlTags(String text) {\n    if (!text) {\n        return [formattedText: \"\"]\n    }\n    \n    def withMarkdownLinks = text.replaceAll(/<a\\s+href=\"([^\"]+)\"[^>]*>([^<]+)<\\/a>/, '[$2]($1)')\n    \n    // Then remove remaining HTML tags while preserving line breaks\n    def cleanText = withMarkdownLinks\n        .replaceAll(\"<br\\\\s*/?>|</p>|</div>\", \"\\n\")  // Replace common break tags with newlines\n        .replaceAll(\"<[^>]*>\", \"\")  // Remove all other HTML tags\n        .replaceAll(\"&nbsp;\", \" \")  // Replace non-breaking spaces\n        .replaceAll(\"&amp;\", \"&\")   // Replace HTML entities\n        .replaceAll(\"&lt;\", \"<\")\n        .replaceAll(\"&gt;\", \">\")\n        .replaceAll(\"&quot;\", \"\\\"\")\n        .replaceAll(\"\\\\s*\\\\n\\\\s*\", \"\\n\")  // Clean up excessive whitespace around newlines\n        .trim()  // Remove leading/trailing whitespace\n    \n    return [formattedText: cleanText]\n}\n\nif(binding.hasVariable(\"coPilotBlocks\") && coPilotBlocks.size()>0)\n{\n    def textBlock = coPilotBlocks.find { it.blockType == \"Typography\" }?.data?.text\n    \n    //Transform normal stack thought message\n    def stackBlock = \"\"\n    def stackBlockData = coPilotBlocks.find { it.blockType == \"Stack\" }?.data\n    if (stackBlockData) {\n        def labelList = stackBlockData.collect { key, value ->\n            value?.blockType == \"Tag\" ? value?.data?.label : null\n        }.findAll { it } // Filter out nulls\n        stackBlock = labelList.toSet().join(\"\\n\")\n    }\n\n    if(stackBlock)\n    {\n        textBlock += '\\n' + stackBlock\n    }\n\n    // Transform tools name in citation message \n    def toolCitationText = \"\"\n    def citationBlock = coPilotBlocks.find { it.blockType == \"Citation\" }\n    def citations = citationBlock?.data?.citations\n    if (citations && citations instanceof List) {\n        def toolLines = citations.collect { citation ->\n            def appName = citation?.appName\n            def toolName = citation?.name\n            return (appName && toolName) ? \"• ${toolName} \" : null\n        }.findAll { it }\n\n        if (toolLines) {\n            toolCitationText = toolLines.toSet().join(\"\\n\")\n            textBlock += '\\n' + toolCitationText\n        }\n    }    \n    \n\n    // Transform reference url in citation blocks\n    toolCitationText = \"\"\n    citationBlock = coPilotBlocks.find { it.blockType == \"Citation\" }\n    citations = citationBlock?.data?.citations\n    if (citations && citations instanceof List) {\n    def toolLines = citations.collect { citation ->\n        def title = citation?.title?.trim()\n        def name = citation?.name?.trim()\n        def url = citation?.referenceUrl?.trim()\n\n        if (url) {\n            def label = title ?: name ?: url\n            return \"[${label}](${url})\"\n        } \n    }.findAll { it }\n\n    if (toolLines) {\n        toolCitationText = toolLines.toSet().join(\"\\n\")\n        textBlock += '\\n' + toolCitationText\n    }\n}\n\n    // Transform media data\n    def mediaBlock = coPilotBlocks.find { it.blockType == \"Media\" }?.data\n    def transformedMedia = mediaBlock?.collect { media ->\n        [\n            fileType   : media.mimeType,\n            name       : media.name,\n            referenceUrl: media.url,\n            source     : (\"workflow_uploads/${customerId}/${media.id}\" as String),\n            sourceType : \"CLOUD_STORAGE\"\n        ]\n    }\n\n    return [ 'text' : removeHtmlTags(textBlock),\n             'imageList' : transformedMedia\n           ]\n}",
				"parameters":{
					"coPilotBlocks":{
						"ua:type":"mappedArray",
						"source":"{{ L7wVA.outputs.coPilotBlocks }}",
						"items":"{{ L7wVA.outputs.coPilotBlocks[0] }}"
					},
					"customerId":"{{ __RUN__.outputs.customerId }}"
				}
			},
			"skip":false,
			"subTitle":"Extract Image object",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":343,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"TyNbp@0m2d8-1@y",
			"id":"kagiD",
			"index":0,
			"inputs":{
				"variables":[
					{
						"source":"{{ w6uUs.outputs.text }}",
						"value":"{{ RCGnT.outputs.result.text.formattedText }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":347,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"TyNbp@0m2d8-1@y",
			"id":"AqVBP",
			"index":0,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ RCGnT.outputs.result.imageList }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Generate url",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":344,
				"resourceName":"utility_by_unifyapps_generate_public_url",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"AqVBP@TyNbp@0m2d8-1@y@l",
			"id":"qpqI7",
			"index":0,
			"inputs":{
				"file":"{{ AqVBP.outputs.item }}",
				"expiryTime":24
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Generate public file URL",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":345,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"AqVBP@TyNbp@0m2d8-1@y@l",
			"id":"BuCRK",
			"index":0,
			"inputs":{
				"itemToAdd":"{{ qpqI7.outputs.url }}",
				"insertLocation":"END",
				"listName":"{{ kvFdI.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":21,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"TyNbp@0m2d8-1@n",
			"id":"1kUa2",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"formattedText":{
							"type":"string",
							"title":"Formatted Text"
						}
					},
					"additionalProperties":false,
					"required":[
						"formattedText"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"text":{
							"type":"string",
							"title":"Text"
						}
					},
					"additionalProperties":false,
					"required":[
						"text"
					]
				},
				"compile_static":false,
				"code":"def removeHtmlTags(String text) {\n    if (!text) {\n        return [formattedText: \"\"]\n    }\n    \n    def withMarkdownLinks = text.replaceAll(/<a\\s+href=\"([^\"]+)\"[^>]*>([^<]+)<\\/a>/, '[$2]($1)')\n    \n    // Then remove remaining HTML tags while preserving line breaks\n    def cleanText = withMarkdownLinks\n        .replaceAll(\"<br\\\\s*/?>|</p>|</div>\", \"\\n\")  // Replace common break tags with newlines\n        .replaceAll(\"<[^>]*>\", \"\")  // Remove all other HTML tags\n        .replaceAll(\"&nbsp;\", \" \")  // Replace non-breaking spaces\n        .replaceAll(\"&amp;\", \"&\")   // Replace HTML entities\n        .replaceAll(\"&lt;\", \"<\")\n        .replaceAll(\"&gt;\", \">\")\n        .replaceAll(\"&quot;\", \"\\\"\")\n        .replaceAll(\"\\\\s*\\\\n\\\\s*\", \"\\n\")  // Clean up excessive whitespace around newlines\n        .trim()  // Remove leading/trailing whitespace\n    \n    return [formattedText: cleanText]\n}\n\n\ndef result = removeHtmlTags(text)\nreturn result",
				"parameters":{
					"text":"{{ L7wVA.outputs.content }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Remove HTML from text",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":343,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"TyNbp@0m2d8-1@n",
			"id":"HLZQG",
			"index":0,
			"inputs":{
				"variables":[
					{
						"source":"{{ w6uUs.outputs.text }}",
						"value":"{{ 1kUa2.outputs.result.formattedText }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.citations.items",
					"root.parameters.imageUrls.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":68,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"0m2d8-1",
			"id":"_EIars",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"adaptiveCard":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Adaptive Card"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"inputText":{
							"type":"string",
							"title":"Input Text"
						},
						"citations":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Citations"
						},
						"imageUrls":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Image Urls"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"class AdaptiveCardGenerator {\n    \n    static String convertTextAndImageToAdaptiveCard(String inputText, List<String> imageUrls, List<Map> citations) {\n        // First escape the text content before inserting into JSON template\n        String escapedText = escapeJson(inputText, citations)\n        \n        // Build the body elements dynamically to include both text and images\n        def bodyElements = []\n        \n        // Add text element first\n        bodyElements.add(\"\"\"{\n            \"type\": \"TextBlock\",\n            \"text\": \"${escapedText}\",\n            \"wrap\": true,\n            \"markdown\": true\n        }\"\"\")\n        \n        // Add image elements if provided\n        if (imageUrls && !imageUrls.isEmpty()) {\n            imageUrls.each { imageUrl ->\n                bodyElements.add(\"\"\"{\n                    \"type\": \"Image\",\n                    \"url\": \"${escapeJson(imageUrl)}\"\n                }\"\"\")\n            }\n        }\n        \n        // Join all body elements with commas\n        String bodyJson = bodyElements.join(',\\n')\n        \n        return \"\"\"{\n    \"type\": \"message\",\n    \"attachments\": [\n        {\n            \"contentType\": \"application/vnd.microsoft.card.adaptive\",\n            \"content\": {\n                \"type\": \"AdaptiveCard\",\n                \"version\": \"1.4\",\n                \"body\": [\n                    ${bodyJson}\n                ],\n                \"\\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\"\n            }\n        }\n    ]\n}\"\"\"\n    }\n    \n    // Original method for backward compatibility\n    static String convertTextToAdaptiveCard(String inputText, List<Map> citations) {\n        return convertTextAndImageToAdaptiveCard(inputText, [], citations)\n    }\n\n    // Escape any JSON special characters to prevent errors\n    private static String escapeJson(String text, List<Map> citations = null) {\n        if (citations != null) {\n            String processedText = appendCitations(text, citations)\n            return processedText\n                .replace('\\\\', '\\\\\\\\') // Must escape backslashes first\n                .replace('\"', '\\\\\"')\n                .replace('\\n', '\\\\n')\n                .replace('\\r', '\\\\r')\n                .replace('\\t', '\\\\t')\n                .replace('\\b', '\\\\b')\n                .replace('\\f', '\\\\f')\n        } else {\n            return text\n                .replace('\\\\', '\\\\\\\\') // Must escape backslashes first\n                .replace('\"', '\\\\\"')\n                .replace('\\n', '\\\\n')\n                .replace('\\r', '\\\\r')\n                .replace('\\t', '\\\\t')\n                .replace('\\b', '\\\\b')\n                .replace('\\f', '\\\\f')\n        }\n    }\n\n    private static String appendCitations(String text, List<Map> citations) {\n        if (!citations) {\n            return text\n        }\n\n        StringBuilder result = new StringBuilder(text)\n        result.append(\"\\\\n\\\\nReferences:\\\\n\")\n\n        citations.eachWithIndex { citation, index ->\n            result.append(\"\\\\n${index + 1}. \")\n            // Get the file name without extension\n            if (citation.containsKey(\"name\")) {\n                String fileName = citation.name\n                if (fileName.contains('.')) {\n                    fileName = fileName.substring(0, fileName.lastIndexOf('.'))\n                }\n\n                // Format the citation\n                result.append(\"${fileName}\")\n            }\n            // Add web view link if available\n            if (citation.referenceUrl) {\n                result.append(\" [${citation.referenceUrl}](${citation.referenceUrl})\")\n            }\n            result.append(\"\\\\n\\\\n\")\n        }\n\n        return result.toString()\n    }\n}\n\n// Example usage\nif (!binding.hasVariable('citations')) {\n    citations = []\n}\n\n// If imageUrls is not provided, default to empty list\nif (!binding.hasVariable('imageUrls')) {\n    imageUrls = []\n}\n\n// Return the adaptive card with both text and images if available\nreturn [\"adaptiveCard\": AdaptiveCardGenerator.convertTextAndImageToAdaptiveCard(inputText, imageUrls, citations)]",
				"isAsync":false,
				"parameters":{
					"imageUrls":{
						"source":"{{ kvFdI.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ kvFdI.outputs.items[0] }}"
					},
					"inputText":"{{ w6uUs.outputs.text }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"AdaptiveCardGenerator",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":24,
				"resourceName":"utility_by_unifyapps_to_json_object",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"0m2d8-1",
			"id":"_J6uAw",
			"index":0,
			"inputs":{
				"jsonString":"{{ _EIars.outputs.result.adaptiveCard }}"
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Deserialise string to JSON object",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":68,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"0m2d8-1",
			"id":"_m4qp3",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"out":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Out"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"input":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Input"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"return [\"out\":input.attachments[0].content]",
				"isAsync":false,
				"parameters":{
					"input":"{{ _J6uAw.outputs.result }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":348,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0m2d8-1",
			"id":"1oZo0",
			"index":0,
			"inputs":{
				"result":{
					"out":"{{ _m4qp3.outputs.result.out }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1728,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":46
}
{
	"appsUsed":[
		
	],
	"createdTime":1751469667817,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759243650429,
		"deployedBy":-1,
		"deployedDefinitionId":"68dbed825e003e08cdeb30f2",
		"status":"DEPLOYED",
		"version":40,
		"workflowVersion":71
	},
	"edges":[
		{
			"fromNodeId":"Ix6Ef",
			"priority":0,
			"skip":false,
			"toNodeId":"feEsX",
			"type":"next"
		},
		{
			"fromNodeId":"feEsX",
			"priority":0,
			"skip":false,
			"toNodeId":"Q2r1I",
			"type":"next"
		},
		{
			"fromNodeId":"Q2r1I",
			"priority":0,
			"skip":false,
			"toNodeId":"o7Ioh",
			"type":"next"
		},
		{
			"fromNodeId":"o7Ioh",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"Q002k",
			"type":"if"
		},
		{
			"fromNodeId":"Q002k",
			"priority":0,
			"skip":false,
			"toNodeId":"kT3jR",
			"type":"next"
		},
		{
			"fromNodeId":"o7Ioh",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"kT3jR",
			"type":"next"
		},
		{
			"fromNodeId":"kT3jR",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"Hfci9",
			"type":"if"
		},
		{
			"fromNodeId":"Hfci9",
			"priority":0,
			"skip":false,
			"toNodeId":"b6k0i",
			"type":"next"
		},
		{
			"fromNodeId":"kT3jR",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"b6k0i",
			"type":"next"
		},
		{
			"fromNodeId":"b6k0i",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"UNRh9",
			"type":"if"
		},
		{
			"fromNodeId":"UNRh9",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"iWnAv",
			"type":"error"
		},
		{
			"fromNodeId":"UNRh9",
			"priority":0,
			"skip":false,
			"toNodeId":"YJRqM",
			"type":"next"
		},
		{
			"fromNodeId":"iWnAv",
			"priority":0,
			"skip":false,
			"toNodeId":"YJRqM",
			"type":"next"
		},
		{
			"fromNodeId":"b6k0i",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"YJRqM",
			"type":"next"
		},
		{
			"fromNodeId":"YJRqM",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"Bxz9p",
			"type":"if"
		},
		{
			"fromNodeId":"Bxz9p",
			"priority":0,
			"skip":false,
			"toNodeId":"54n8Q",
			"type":"next"
		},
		{
			"fromNodeId":"YJRqM",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"54n8Q",
			"type":"next"
		},
		{
			"fromNodeId":"54n8Q",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"IfSxr",
			"type":"if"
		},
		{
			"fromNodeId":"IfSxr",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"SBVx4",
			"type":"error"
		},
		{
			"fromNodeId":"IfSxr",
			"priority":0,
			"skip":false,
			"toNodeId":"8JA3B",
			"type":"next"
		},
		{
			"fromNodeId":"SBVx4",
			"priority":0,
			"skip":false,
			"toNodeId":"8JA3B",
			"type":"next"
		},
		{
			"fromNodeId":"54n8Q",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"8JA3B",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"685bdec3b1df824bcd00b64d",
	"lastModifiedBy":-1,
	"lcName":"parse and stream content | ai agent",
	"modifiedTime":1759371967971,
	"name":"Parse and Stream Content | AI Agent",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"Ix6Ef",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"partialBuffer":{
							"type":"string",
							"title":"partialBuffer"
						},
						"updatedMessageState":{
							"type":"string",
							"title":"updatedMessageState"
						},
						"isLastSlashModified":{
							"type":"boolean",
							"title":"isLastSlashModified"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"$schema":"http://json-schema.org/draft-07/schema#",
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"messageState":{
							"type":"string",
							"title":"Message State"
						},
						"currentBuffer":{
							"type":"string",
							"title":"currentBuffer"
						},
						"sessionId":{
							"type":"string",
							"title":"sessionId"
						},
						"isLastSlash":{
							"type":"boolean",
							"title":"isLastSlash"
						},
						"aiAgentId":{
							"type":"string",
							"title":"Ai Agent Id"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":163,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"feEsX",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"event_type":{
							"type":"string",
							"title":"event_type"
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"event_type":"message_delta"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"event_type":{
							"type":"string",
							"title":"event_type"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{},
				"visibleOptionalFields":[
					"root.parameters.items.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":73,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"Q2r1I",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"chunkContent":{
							"type":"string",
							"title":"Chunk Content"
						},
						"updatedMessageState":{
							"type":"string",
							"title":"Updated Message State"
						},
						"messageStateUpdated":{
							"type":"boolean",
							"title":"Message State Updated"
						},
						"answer":{
							"type":"string",
							"title":"Answer"
						},
						"partialBuffer":{
							"type":"string",
							"title":"partialBuffer"
						},
						"thoughtChunkContent":{
							"type":"string",
							"title":"thoughtChunkContent"
						},
						"isLastSlashModified":{
							"type":"boolean",
							"title":"isLastSlashModified"
						}
					},
					"additionalProperties":false,
					"required":[
						"messageStateUpdated"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"messageState":{
							"type":"string",
							"title":"Message State"
						},
						"currentBuffer":{
							"type":"string",
							"title":"currentBuffer"
						},
						"isLastSlash":{
							"type":"boolean",
							"title":"isLastSlash"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":true,
				"code":"import groovy.transform.Field\n\n\nstatic Map<String, Object> safeMap(Object obj) {\n    return (obj instanceof Map) ? (Map<String, Object>) obj : Collections.emptyMap()\n}\n\n@Field\nList<Map<String, Object>> PARTIAL_MARKERS = [\n    [full: \"<think>\", partials: [\"<\", \"<t\", \"<th\", \"<thi\", \"<thin\", \"<think\", \"<think>\"]],\n    [full: \"</think>\", partials: [\"<\", \"</\", \"</t\", \"</th\", \"</thi\", \"</thin\", \"</think\", \"</think>\"]],\n    [full: \"\\\"thought\\\":\", partials: [\"\\\"\", \"\\\"t\", \"\\\"th\", \"\\\"tho\", \"\\\"thou\", \"\\\"thoug\", \"\\\"though\", \"\\\"thought\", \"\\\"thought\\\"\", \"\\\"thought\\\":\"]],\n    [full: \"\\\"final_answer\\\":\", partials: [\n        \"\\\"\", \"\\\"f\", \"\\\"fi\", \"\\\"fin\", \"\\\"fina\", \"\\\"final\", \"\\\"final_\", \"\\\"final_a\", \"\\\"final_an\", \"\\\"final_ans\",\n        \"\\\"final_answ\", \"\\\"final_answe\", \"\\\"final_answer\", \"\\\"final_answer\\\"\", \"\\\"final_answer\\\":\"\n    ]],\n    [full: \"finalanswer:\", partials: [\n        \"f\", \"fi\", \"fin\", \"fina\", \"final\", \"finala\", \"finalan\", \"finalans\",\n        \"finalansw\", \"finalanswe\", \"finalanswer\", \"finalanswer:\"\n    ]],\n    [full: \"\\\"tool_call\\\":\", partials: [\n        \"\\\"\", \"\\\"t\", \"\\\"to\", \"\\\"too\", \"\\\"tool\", \"\\\"tool_\", \"\\\"tool_c\", \"\\\"tool_ca\", \"\\\"tool_cal\",\n        \"\\\"tool_call\", \"\\\"tool_call\\\"\", \"\\\"tool_call\\\":\"\n    ]]\n]\n\nString messageState = binding.hasVariable(\"messageState\") ? binding.getVariable(\"messageState\").toString() : \"STREAMING_STARTED\"\nString updatedMessageState = messageState\nboolean messageStateUpdated = false\n\nif (!binding.hasVariable(\"currentBuffer\")) {\n    binding.setVariable(\"currentBuffer\", \"\")\n}\nString currentBuffer = binding.getVariable(\"currentBuffer\")?.toString() ?: \"\"\nString partialBuffer = currentBuffer\n\nStringBuilder thoughtTextBuilder = new StringBuilder()\nStringBuilder finalAnswerTextBuilder = new StringBuilder()\n\nboolean done = false\n\nboolean endsWithPartialMarker(String text) {\n    String lower = text.toLowerCase()\n    for (Map<String, Object> markerMap : PARTIAL_MARKERS) {\n        List<String> partials = (List<String>) markerMap[\"partials\"]\n        String full = markerMap[\"full\"].toString()\n        for (String pm : partials) {\n            if (!pm.equals(full) && lower.endsWith(pm)) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nList<Object> findNextFullMarker(String text) {\n    String compareLC = text.toLowerCase()\n    List<Map<String, Object>> markers = new ArrayList<>()\n    markers.add([marker: \"<think>\", idx: compareLC.indexOf(\"<think>\")] as Map<String, Object>)\n    markers.add([marker: \"</think>\", idx: compareLC.indexOf(\"</think>\")] as Map<String, Object>)\n    markers.add([marker: \"\\\"thought\\\":\", idx: compareLC.indexOf(\"\\\"thought\\\":\")] as Map<String, Object>)\n    markers.add([marker: \"\\\"final_answer\\\":\", idx: compareLC.indexOf(\"\\\"final_answer\\\":\")] as Map<String, Object>)\n    markers.add([marker: \"\\\"tool_call\\\":\", idx: compareLC.indexOf(\"\\\"tool_call\\\":\")] as Map<String, Object>)\n    markers.add([marker: \"finalanswer:\", idx: compareLC.indexOf(\"finalanswer:\")] as Map<String, Object>)\n\n    List<Map<String, Object>> filtered = []\n    for (Map<String, Object> entry : markers) {\n        Object idx = entry[\"idx\"]\n        if (idx instanceof Integer && ((Integer) idx) >= 0) {\n            filtered.add(entry)\n        }\n    }\n\n    if (filtered.isEmpty()) return [null, -1]\n\n    Map<String, Object> earliest = filtered.get(0)\n    for (Map<String, Object> entry : filtered) {\n        if (((Integer) entry[\"idx\"]) < ((Integer) earliest[\"idx\"])) {\n            earliest = entry\n        }\n    }\n\n    return [earliest[\"marker\"], earliest[\"idx\"]]\n}\n\nboolean isWhitespaceBeforeFinalAnswer(String text, int markerIndex) {\n    if (markerIndex == 0) return false\n    String prefix = text.substring(0, markerIndex)\n    return prefix.matches(\"^\\\\s*\\$\")\n}\n\nwhile (!done) {\n    List<Object> markerResult = findNextFullMarker(partialBuffer)\n    String foundMarker = markerResult[0] as String\n    int foundIndex = markerResult[1] as int\n\n    if (foundMarker == null) {\n        if (endsWithPartialMarker(partialBuffer)) {\n            done = true\n            break\n        } else if(currentBuffer==\"\"){\n            done = true\n            break\n        }\n        if (updatedMessageState == \"FINAL_ANSWER\") {\n            finalAnswerTextBuilder.append(partialBuffer)\n        } else if (updatedMessageState == \"THOUGHT\" || messageState == \"STREAMING_STARTED\") {\n            if (updatedMessageState == \"STREAMING_STARTED\") {\n                updatedMessageState = \"THOUGHT\"\n                messageStateUpdated = true\n            }\n            thoughtTextBuilder.append(partialBuffer)\n        }\n        partialBuffer = \"\"\n        done = true\n        break\n    }\n\n    String prefixText = partialBuffer.substring(0, foundIndex)\n\n    boolean skipPrefixForThought = false\n    if ((foundMarker == \"\\\"final_answer\\\":\" || foundMarker == \"finalanswer:\")\n        && (updatedMessageState == \"THOUGHT\" || updatedMessageState == \"STREAMING_STARTED\")\n        && isWhitespaceBeforeFinalAnswer(partialBuffer, foundIndex)) {\n        skipPrefixForThought = true\n    }\n\n    if (updatedMessageState == \"FINAL_ANSWER\") {\n        finalAnswerTextBuilder.append(prefixText)\n    } else if (updatedMessageState == \"THOUGHT\" || messageState == \"STREAMING_STARTED\") {\n        if (updatedMessageState == \"STREAMING_STARTED\") {\n            updatedMessageState = \"THOUGHT\"\n            messageStateUpdated = true\n        }\n        if (!skipPrefixForThought) {\n            thoughtTextBuilder.append(prefixText)\n        }\n    }\n\n    partialBuffer = partialBuffer.substring(foundIndex)\n\n    if (foundMarker == \"\\\"final_answer\\\":\" || foundMarker == \"finalanswer:\") {\n        updatedMessageState = \"FINAL_ANSWER\"\n        messageStateUpdated = true\n        partialBuffer = partialBuffer.substring(foundMarker.length())\n    } else if (foundMarker == \"\\\"thought\\\":\") {\n        if (messageState == \"STREAMING_STARTED\") {\n            updatedMessageState = \"THOUGHT\"\n            messageStateUpdated = true\n        }\n        partialBuffer = partialBuffer.substring(foundMarker.length())\n    } else if (foundMarker == \"<think>\") {\n        if (messageState == \"STREAMING_STARTED\") {\n            updatedMessageState = \"THOUGHT\"\n            messageStateUpdated = true\n        }\n        partialBuffer = partialBuffer.substring(foundMarker.length())\n    } else if (foundMarker == \"</think>\") {\n        if (messageState == \"STREAMING_STARTED\") {\n            updatedMessageState = \"THOUGHT\"\n            messageStateUpdated = true\n        }\n        partialBuffer = partialBuffer.substring(foundMarker.length())\n    } else if (foundMarker == \"\\\"tool_call\\\":\") {\n        if (updatedMessageState != \"TOOL_CALL\") {\n            updatedMessageState = \"TOOL_CALL\"\n            messageStateUpdated = true\n        }\n        partialBuffer = partialBuffer.substring(foundMarker.length())\n    }\n}\n\nString cleanString(String input) {\n    if (input == null) return \"\"\n    List<String> patterns = ['<think>', '</think>', '\",\"', ',\"', '\",', '{\"', '\"}', '{', '}', '\"', ',']\n    for (String pattern : patterns) {\n        input = input.replace(pattern, \"\")\n    }\n    return input\n}\n\nString deescapeString(String input, boolean isLastSlashX) {\n    if (input == null) return null\n    input = input.replaceAll('\\\\\\\\\\\\\\\\', '\\\\\\\\')\n    input = input.replaceAll('\\\\\\\\n', '\\n')\n    input = input.replaceAll('\\\\\\\\t', '\\t')\n    input = input.replaceAll('\\\\\\\\r', '\\r')\n    input = input.replaceAll('\\\\\\\\\\\"', '\"')\n    if (input.startsWith(\"n\") && isLastSlashX) {\n        input = '\\n' + input.substring(1)\n    }\n    return input\n}\n\nboolean isLastSlashX = binding.hasVariable(\"isLastSlash\") ? (Boolean) binding.getVariable(\"isLastSlash\") : false\n\nString thoughtChunkContent = deescapeString(cleanString(thoughtTextBuilder.toString()), isLastSlashX)\nString chunkContent = deescapeString(cleanString(finalAnswerTextBuilder.toString()), isLastSlashX)\n\nboolean isLastSlashModified = false\n\nif (thoughtChunkContent?.endsWith(\"\\\\\")) {\n    thoughtChunkContent = thoughtChunkContent.substring(0, thoughtChunkContent.length() - 1)\n    isLastSlashModified = true\n}\n\nif (chunkContent?.endsWith(\"\\\\\")) {\n    chunkContent = chunkContent.substring(0, chunkContent.length() - 1)\n    isLastSlashModified = true\n}\n\nreturn [\n    thoughtChunkContent : thoughtChunkContent ?: null,\n    chunkContent        : chunkContent ?: null,\n    updatedMessageState : updatedMessageState,\n    messageStateUpdated : messageStateUpdated,\n    partialBuffer       : partialBuffer,\n    isLastSlashModified : isLastSlashModified\n]\n",
				"parameters":{
					"messageState":"{{ Ix6Ef.outputs.messageState  }}",
					"currentBuffer":"{{ Ix6Ef.outputs.currentBuffer }}",
					"isLastSlash":"{{ Ix6Ef.outputs.isLastSlash }}"
				}
			},
			"skip":false,
			"subTitle":"read content",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":3,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"o7Ioh",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ Q2r1I.outputs.result.updatedMessageState }}",
						"filter":{
							"operator":"EQUAL",
							"value":"TOOL_CALL"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":3,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"o7Ioh@y2jxx@kQqTJ-1@l@y",
			"id":"Q002k",
			"index":0,
			"inputs":{
				"result":{
					"updatedMessageState":"{{ Q2r1I.outputs.result.updatedMessageState }}",
					"partialBuffer":"{{ Q2r1I.outputs.result.partialBuffer }}",
					"isLastSlashModified":"{{ Q2r1I.outputs.result.isLastSlashModified }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":75,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"kT3jR",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ Q2r1I.outputs.result.messageStateUpdated }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					},
					{
						"property":"{{ Ix6Ef.outputs.messageState }}",
						"filter":{
							"operator":"NOT_EQUAL",
							"value":"THOUGHT"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"message State",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":76,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kT3jR@y2jxx@kQqTJ-1@l@y",
			"id":"Hfci9",
			"index":0,
			"inputs":{
				"variables":[
					{
						"source":"{{ feEsX.outputs.event_type }}",
						"value":"message_start"
					}
				]
			},
			"skip":false,
			"subTitle":"update event type",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":72,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"b6k0i",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ Q2r1I.outputs.result.thoughtChunkContent }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"OR"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":76,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"b6k0i@y2jxx@kQqTJ-1@l@y",
			"id":"UNRh9",
			"index":0,
			"inputs":{
				"automationId":"67b4908aaffe713b4ced2d83",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"type":"message",
					"completed":false,
					"caseId":"{{ Ix6Ef.outputs.sessionId  }}",
					"messageType":"THOUGHT",
					"eventType":"{{ feEsX.outputs.event_type }}",
					"chunkContent":"{{ Q2r1I.outputs.result.thoughtChunkContent }}",
					"aiAgentId":"{{ Ix6Ef.outputs.aiAgentId }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"stream",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"delay",
				"resourceVersion":164,
				"resourceName":"delay_for",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"UNRh9@b6k0i@y2jxx@kQqTJ-1@l@y@error",
			"id":"iWnAv",
			"index":0,
			"inputs":{
				"duration":1,
				"unit":"MILLISECONDS"
			},
			"skip":false,
			"subTitle":"Delay",
			"title":"Set delay duration",
			"type":"DELAY"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":75,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"YJRqM",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ Q2r1I.outputs.result.messageStateUpdated }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"message State",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":76,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"YJRqM@y2jxx@kQqTJ-1@l@y",
			"id":"Bxz9p",
			"index":0,
			"inputs":{
				"variables":[
					{
						"source":"{{ feEsX.outputs.event_type }}",
						"value":"message_start"
					}
				]
			},
			"skip":false,
			"subTitle":"update event type",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":72,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"54n8Q",
			"index":0,
			"inputs":{
				"filters":[
					{
						"filters":[
							{
								"property":"{{ Q2r1I.outputs.result.chunkContent }}",
								"filter":{
									"operator":"EXISTS"
								}
							},
							{
								"filters":[
									{
										"property":"{{ Q2r1I.outputs.result.messageStateUpdated }}",
										"filter":{
											"operator":"EQUAL",
											"value":"true"
										}
									},
									{
										"property":"{{ Q2r1I.outputs.result.updatedMessageState }}",
										"filter":{
											"operator":"EQUAL",
											"value":"FINAL_ANSWER"
										}
									}
								],
								"operator":"AND"
							}
						],
						"operator":"OR"
					},
					{
						"property":"{{ Q2r1I.outputs.result.updatedMessageState }}",
						"filter":{
							"operator":"NOT_EQUAL",
							"value":"TOOL_CALL"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":76,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"54n8Q@y2jxx@kQqTJ-1@l@y",
			"id":"IfSxr",
			"index":0,
			"inputs":{
				"automationId":"67b4908aaffe713b4ced2d83",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"type":"message",
					"completed":false,
					"chunkContent":"{{ Q2r1I.outputs.result.chunkContent }}",
					"caseId":"{{ Ix6Ef.outputs.sessionId  }}",
					"messageType":"=IF(EXACT({{ Q2r1I.outputs.result.updatedMessageState }}, \"THOUGHT\"), \"THOUGHT\", \"\")",
					"eventType":"{{ feEsX.outputs.event_type }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"stream",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"delay",
				"resourceVersion":164,
				"resourceName":"delay_for",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"IfSxr@54n8Q@y2jxx@kQqTJ-1@l@y@error",
			"id":"SBVx4",
			"index":0,
			"inputs":{
				"duration":1,
				"unit":"MILLISECONDS"
			},
			"skip":false,
			"subTitle":"Delay",
			"title":"Set delay duration",
			"type":"DELAY"
		},
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"8JA3B",
			"index":0,
			"inputs":{
				"result":{
					"partialBuffer":"{{ Q2r1I.outputs.result.partialBuffer }}",
					"updatedMessageState":"{{ Q2r1I.outputs.result.updatedMessageState }}",
					"isLastSlashModified":"{{ Q2r1I.outputs.result.isLastSlashModified }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":148386,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"version":72
}
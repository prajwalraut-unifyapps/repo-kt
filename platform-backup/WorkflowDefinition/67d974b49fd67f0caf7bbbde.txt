{
	"appsUsed":[
		"slack"
	],
	"createdTime":1748544420195,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1758655369670,
		"deployedBy":0,
		"deployedDefinitionId":"68d2f38938757c179b12386a",
		"status":"DEPLOYED",
		"version":44,
		"workflowVersion":104
	},
	"edges":[
		{
			"fromNodeId":"ETFoE",
			"priority":0,
			"skip":false,
			"toNodeId":"WrhaL",
			"type":"next"
		},
		{
			"fromNodeId":"WrhaL",
			"priority":0,
			"skip":false,
			"toNodeId":"Wozzf",
			"type":"next"
		},
		{
			"fromNodeId":"Wozzf",
			"priority":0,
			"skip":false,
			"toNodeId":"KC2FL",
			"type":"next"
		},
		{
			"fromNodeId":"KC2FL",
			"priority":0,
			"skip":false,
			"toNodeId":"GPHAj",
			"type":"next"
		},
		{
			"fromNodeId":"GPHAj",
			"priority":0,
			"skip":false,
			"toNodeId":"IY3vW",
			"type":"next"
		},
		{
			"fromNodeId":"IY3vW",
			"priority":0,
			"skip":false,
			"toNodeId":"hSJ7C",
			"type":"next"
		},
		{
			"fromNodeId":"hSJ7C",
			"priority":0,
			"skip":false,
			"toNodeId":"JTsVE",
			"type":"next"
		},
		{
			"fromNodeId":"JTsVE",
			"priority":0,
			"skip":false,
			"toNodeId":"BGlT2",
			"type":"next"
		},
		{
			"fromNodeId":"BGlT2",
			"priority":0,
			"skip":false,
			"toNodeId":"LGeM9",
			"type":"next"
		},
		{
			"fromNodeId":"LGeM9",
			"priority":0,
			"skip":false,
			"toNodeId":"3uTxp",
			"type":"loop"
		},
		{
			"fromNodeId":"3uTxp",
			"priority":0,
			"skip":false,
			"toNodeId":"vAl0Y",
			"type":"next"
		},
		{
			"fromNodeId":"vAl0Y",
			"priority":0,
			"skip":false,
			"toNodeId":"2HhUy",
			"type":"next"
		},
		{
			"fromNodeId":"2HhUy",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"_bDffv",
			"type":"if"
		},
		{
			"fromNodeId":"_bDffv",
			"priority":0,
			"skip":false,
			"toNodeId":"T9edW",
			"type":"next"
		},
		{
			"fromNodeId":"T9edW",
			"priority":0,
			"skip":false,
			"toNodeId":"_px1Lq",
			"type":"next"
		},
		{
			"fromNodeId":"2HhUy",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"mDeK9",
			"type":"next"
		},
		{
			"fromNodeId":"mDeK9",
			"priority":0,
			"skip":false,
			"toNodeId":"4yAe3",
			"type":"next"
		},
		{
			"fromNodeId":"_px1Lq",
			"priority":0,
			"skip":false,
			"toNodeId":"eu42L",
			"type":"next"
		},
		{
			"fromNodeId":"4yAe3",
			"priority":0,
			"skip":false,
			"toNodeId":"eu42L",
			"type":"next"
		},
		{
			"fromNodeId":"eu42L",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"LGeM9",
			"type":"next"
		},
		{
			"fromNodeId":"LGeM9",
			"priority":0,
			"skip":false,
			"toNodeId":"fWYGv",
			"type":"next"
		},
		{
			"fromNodeId":"fWYGv",
			"priority":0,
			"skip":false,
			"toNodeId":"fXLrF",
			"type":"next"
		},
		{
			"fromNodeId":"fXLrF",
			"priority":0,
			"skip":false,
			"toNodeId":"cGXop",
			"type":"next"
		},
		{
			"fromNodeId":"cGXop",
			"priority":0,
			"skip":false,
			"toNodeId":"eoN5d",
			"type":"next"
		},
		{
			"fromNodeId":"eoN5d",
			"priority":0,
			"skip":false,
			"toNodeId":"Odfns",
			"type":"next"
		},
		{
			"fromNodeId":"Odfns",
			"priority":0,
			"skip":false,
			"toNodeId":"RzG5I",
			"type":"next"
		},
		{
			"fromNodeId":"RzG5I",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"3duWZ",
			"type":"if"
		},
		{
			"fromNodeId":"3duWZ",
			"priority":0,
			"skip":false,
			"toNodeId":"ZZApa",
			"type":"next"
		},
		{
			"fromNodeId":"ZZApa",
			"priority":0,
			"skip":false,
			"toNodeId":"Vc8F4",
			"type":"next"
		},
		{
			"fromNodeId":"Vc8F4",
			"priority":0,
			"skip":false,
			"toNodeId":"q1Cra",
			"type":"next"
		},
		{
			"fromNodeId":"RzG5I",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"q1Cra",
			"type":"next"
		},
		{
			"fromNodeId":"q1Cra",
			"priority":0,
			"skip":false,
			"toNodeId":"ECFKk",
			"type":"next"
		},
		{
			"fromNodeId":"ECFKk",
			"priority":0,
			"skip":false,
			"toNodeId":"EXtEw",
			"type":"next"
		},
		{
			"fromNodeId":"EXtEw",
			"priority":0,
			"skip":false,
			"toNodeId":"9Zx6U",
			"type":"next"
		},
		{
			"fromNodeId":"9Zx6U",
			"priority":0,
			"skip":false,
			"toNodeId":"8TtZ1",
			"type":"next"
		},
		{
			"fromNodeId":"8TtZ1",
			"priority":0,
			"skip":false,
			"toNodeId":"10wdB",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"67d974b49fd67f0caf7bbbde",
	"lastModifiedBy":-1,
	"lcName":"graphrag | index chunks",
	"modifiedTime":1759243554824,
	"name":"GraphRAG | Index Chunks",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":195,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"ETFoE",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"status":{
							"type":"string",
							"title":"status"
						},
						"graphId":{
							"type":"string",
							"title":"graphId"
						}
					},
					"additionalProperties":false,
					"required":[
						"status",
						"graphId"
					]
				},
				"setup":{
					"type":"object",
					"properties":{
						"exampleQueries":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"exampleQueries"
						},
						"entityTypes":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"entityTypes"
						},
						"domainContext":{
							"type":"string",
							"title":"domainContext"
						},
						"simThreshold":{
							"type":"number",
							"title":"simThreshold",
							"default":"0.975"
						},
						"customGraphID":{
							"type":"string",
							"title":"customGraphID",
							"default":"<UND>"
						},
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"data":{
										"type":"string",
										"title":"data"
									},
									"chunkMetadata":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"chunkMetadata",
										"required":[]
									},
									"sharedWithIds":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"sharedWithIds"
									},
									"knowledgeId":{
										"type":"string",
										"title":"Knowledge Id"
									},
									"knowledgeVersion":{
										"type":"integer",
										"title":"Knowledge Version"
									},
									"uniqueEntityId":{
										"type":"string",
										"title":"Unique Entity Id"
									},
									"authorEmail":{
										"type":"string",
										"title":"Author Email"
									},
									"knowledgeType":{
										"type":"string",
										"title":"Knowledge Type"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"chunks"
						},
						"knowledgeId":{
							"type":"string",
							"title":"Knowledge Id"
						},
						"knowledgeVersion":{
							"type":"integer",
							"title":"Knowledge Version"
						},
						"uniqueEntityId":{
							"type":"string",
							"title":"Unique Entity Id"
						},
						"authorEmail":{
							"type":"string",
							"title":"Author Email"
						},
						"knowledgeType":{
							"type":"string",
							"title":"Knowledge Type"
						},
						"versionFlag":{
							"type":"integer",
							"title":"Version Flag",
							"default":"1"
						}
					},
					"additionalProperties":false,
					"required":[
						"entityTypes",
						"chunks"
					]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"slack",
				"resourceVersion":908,
				"connectionId":"66a7e9d5d9b2fb0ec5db29f3",
				"resourceName":"slack_post_message_in_channel",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"gV50U-1",
			"id":"WrhaL",
			"index":2,
			"inputs":{
				"link_names":true,
				"messageType":"text",
				"channel":"C08UV1WNHQR",
				"text":"GraphRAG Triggered for graph_id: {{ ETFoE.outputs.customGraphID }}",
				"mrkdwn":true
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"global":false
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Slack",
			"title":"Post message",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":154,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"Wozzf",
			"index":3,
			"inputs":{
				"compile_static":false,
				"code":"// # 1. Entity Resolution logic revamp (check automation TODO for details)\n// # 2. Might need to change logic for relationship updation\n// 3. Need to re-write python scripts in groovy\n\n// # Notes:\n// # 1. Concurrency leads to duplicate nodes in DB despite handling merges while upserting nodes. To circumvent this, a post-processing de-duplication is done with very high simThreshold (0.98). After this the normal entity resolution with user threshold is done to create \"is\" relationships between potentially similar nodes (This results in marginal improvement and can be skipped)"
			},
			"skip":true,
			"subTitle":"TODOs & Notes",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":155,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"KC2FL",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"finalChunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"data":{
										"type":"string",
										"title":"data"
									},
									"chunkUUID":{
										"type":"string",
										"title":"chunkUUID"
									},
									"pageNumber":{
										"type":"integer",
										"title":"pageNumber"
									}
								},
								"additionalProperties":false,
								"required":[
									"data",
									"chunkUUID",
									"pageNumber"
								]
							},
							"title":"finalChunks"
						}
					},
					"additionalProperties":false,
					"required":[
						"finalChunks"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"chunks"
						}
					},
					"additionalProperties":false,
					"required":[
						"chunks"
					]
				},
				"compile_static":false,
				"code":"def finalChunks = []\n\ndef groupedChunks = chunks.groupBy { it.chunkMetadata.chunkUUID }\n\ngroupedChunks.each { uuid, entries ->\n    def candidate\n\n    // For chunks with chunkType \"text\", pick the entry with chunkIndexedType \"text\"\n    def textTypeEntry = entries.find { \n        it.chunkMetadata.chunkType == \"text\" && it.chunkMetadata.chunkIndexedType == \"text\" \n    }\n    \n    if (textTypeEntry) {\n        candidate = textTypeEntry\n    } else {\n        // For non-text chunks, pick the first entry where chunkIndexedType is \"description\" or \"text\"\n        candidate = entries.find { \n            it.chunkMetadata.chunkIndexedType == \"description\" || it.chunkMetadata.chunkIndexedType == \"text\" \n        }\n    }\n    \n    if (candidate) {\n        def fullContent = candidate.chunkMetadata.contentForGeneration\n        def data = fullContent\n        \n        // For all chunks except the first one in finalChunks, extract the part after \"\\nContent: \"\n        if (finalChunks.size() > 0) {\n            // Split using the pattern. The regex \\\\nContent:  splits on the first occurrence only, limited to 2 parts.\n            def parts = fullContent.split(\"\\\\nContent: \", 2)\n            if (parts.size() == 2) {\n                data = parts[1]\n            }\n        }\n        \n        finalChunks << [\n            chunkUUID : uuid,\n            data      : data,\n            pageNumber: candidate.chunkMetadata.pageNumber\n        ]\n    }\n}\n\nresult = [finalChunks: finalChunks]\n",
				"parameters":{
					"chunks":{
						"source":"{{ ETFoE.outputs.chunks }}",
						"ua:type":"mappedArray",
						"items":"{{ ETFoE.outputs.chunks[0] }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Filter Chunk Data",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":158,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"GPHAj",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"graphNodeTypes":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"graphNodeTypes"
						}
					},
					"additionalProperties":false,
					"required":[
						"graphId",
						"graphNodeTypes"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"nodeTypes":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeTypes"
						},
						"customGraphID":{
							"type":"string",
							"title":"customGraphID"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodeTypes",
						"customGraphID"
					]
				},
				"code":"# Generates a 6 digit random id. This is temporary, might need to hash the input or increase uuid length later.\nimport uuid\n\ngraph_id = 'G_' + uuid.uuid4().hex[:6].upper() if customGraphID == '<UND>' else customGraphID\n\n\ngraph_node_types = []\nfor node_type in nodeTypes:\n  graph_node_types.append(graph_id + '_' + node_type)\n\n\nresult = {\n  'graphId': graph_id,\n  'graphNodeTypes': graph_node_types\n}",
				"isAsync":false,
				"parameters":{
					"nodeTypes":{
						"source":"{{ ETFoE.outputs.entityTypes }}",
						"ua:type":"mappedArray",
						"items":"{{ ETFoE.outputs.entityTypes[0] }}"
					},
					"customGraphID":"{{ ETFoE.outputs.customGraphID }}"
				}
			},
			"skip":true,
			"subTitle":"Graph ID and Labels",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"IY3vW",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"graphNodeTypes":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"graphNodeTypes"
						}
					},
					"additionalProperties":false,
					"required":[
						"graphId",
						"graphNodeTypes"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"customGraphID":{
							"type":"string",
							"title":"customGraphID"
						},
						"nodeTypes":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeTypes"
						}
					},
					"additionalProperties":false,
					"required":[
						"customGraphID",
						"nodeTypes"
					]
				},
				"compile_static":false,
				"code":"import java.util.UUID\n\ndef graph_id = (customGraphID == '<UND>') ? ('G_' + UUID.randomUUID().toString().replaceAll('-', '').substring(0, 6).toUpperCase()) : customGraphID\n\ndef graph_node_types = []\nif (binding.hasVariable('nodeTypes')) {\n    for (node_type in nodeTypes) {\n        graph_node_types << (graph_id + '_' + node_type)\n    }\n}\n\ndef result = [\n    graphId        : graph_id,\n    graphNodeTypes : graph_node_types\n]",
				"parameters":{
					"customGraphID":"{{ ETFoE.outputs.customGraphID }}",
					"nodeTypes":{
						"source":"{{ ETFoE.outputs.entityTypes }}",
						"ua:type":"mappedArray",
						"items":"{{ ETFoE.outputs.entityTypes[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Graph ID and Labels",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":381,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"hSJ7C",
			"index":7,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"filteredChunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"data":{
										"type":"string",
										"title":"Data"
									},
									"chunkMetadata":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Chunk Metadata"
									},
									"sharedWithIds":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Shared With Ids"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Filtered Chunks"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Chunks"
						}
					},
					"additionalProperties":false,
					"required":[
						"chunks"
					]
				},
				"compile_static":false,
				"code":"// 1. Remove the “question” chunks\ndef filteredChunks = chunks.findAll { \n    it.chunkMetadata?.chunkIndexedType != \"question\"\n}\n\ndef prefix = \"\\nChunk Context: \"\n\n// 2. Build the new list while carrying an index so we know which is “first”\ndef updatedChunks = filteredChunks.withIndex().collect { chunk, idx ->\n\n    // Original text that we will trim / keep\n    def originalData = chunk.chunkMetadata?.contentForGeneration ?: chunk.data ?: \"\"\n\n    // Decide what finally goes into the chunk\n    def newData\n    if (idx == 0) {                          // first chunk – keep everything\n        newData = originalData\n    } else {                                 // other chunks – start at prefix if present\n        int start = originalData.indexOf(prefix)\n        newData = (start >= 0) ? originalData.substring(start) : originalData\n    }\n\n    // 3. Clone and update the data field\n    chunk.clone().with { it.data = newData; it }\n}\n\n// 4. Final result\nresult = [\n    filteredChunks: updatedChunks\n]",
				"parameters":{
					"chunks":{
						"source":"{{ ETFoE.outputs.chunks }}",
						"ua:type":"mappedArray",
						"items":"{{ ETFoE.outputs.chunks[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Filter chunks",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":379,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"JTsVE",
			"index":8,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"nodeIDs",
				"ua:list_type":"STRING"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"nodeIDs",
							"disableActions":true,
							"items":{
								"type":"string"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"nodeIDs",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":381,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"BGlT2",
			"index":9,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"process_chunk_signals",
				"ua:list_type":"STRING"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"process_chunk_signals",
							"disableActions":true,
							"items":{
								"type":"string"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Chunk Signals",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":90,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"LGeM9",
			"index":10,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ hSJ7C.outputs.result.filteredChunks }}",
				"captureIterations":false,
				"batchSize":50
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"template_by_unifyapps",
				"resourceVersion":220,
				"resourceName":"template_by_unifyapps_compile_template",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"LGeM9@gV50U-1@l",
			"id":"3uTxp",
			"index":11,
			"inputs":{
				"input_schema":{
					"domain":"{{ ETFoE.outputs.domainContext }}",
					"entity_types":"{{ ETFoE.outputs.entityTypes }}",
					"example_queries":"{{ ETFoE.outputs.exampleQueries }}",
					"input_text":"{{ LGeM9.outputs.item.data }}"
				},
				"template_id":"e_6798ac78a5da9b0f7deb7c44"
			},
			"skip":true,
			"subTitle":"Template by UnifyApps",
			"title":"Compile template",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":381,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"LGeM9@gV50U-1@l",
			"id":"vAl0Y",
			"index":12,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"signalId":{
							"type":"string",
							"title":"Signal Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"import java.util.UUID\n\ndef uuid = UUID.randomUUID().toString()\n\nreturn [\n  \"signalId\": uuid\n]\n"
			},
			"skip":false,
			"subTitle":"Generate signal id",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":82,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"LGeM9@gV50U-1@l",
			"id":"2HhUy",
			"index":13,
			"inputs":{
				"filters":[
					{
						"property":"{{ ETFoE.outputs.knowledgeId }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"single knowledge?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":391,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2HhUy@LGeM9@gV50U-1@l@y",
			"id":"_bDffv",
			"index":14,
			"inputs":{
				"automationId":"67a05c1370151957f9dcb7a7",
				"runtimeConnections":{},
				"synchronous":false,
				"triggerWorkflowWithRuntimeType":"IN_MEMORY",
				"version":"-1",
				"parameters":{
					"chunkText":"{{ LGeM9.outputs.item.data }}",
					"chunkMetaData":"{{ LGeM9.outputs.item.chunkMetadata }}",
					"sharedWithIds":{
						"source":"{{ LGeM9.outputs.item.sharedWithIds }}",
						"ua:type":"mappedArray",
						"items":"{{ LGeM9.outputs.item.sharedWithIds[0] }}"
					},
					"entity_types":{
						"source":"{{ ETFoE.outputs.entityTypes }}",
						"ua:type":"mappedArray",
						"items":"{{ ETFoE.outputs.entityTypes[0] }}"
					},
					"domain":"{{ ETFoE.outputs.domainContext }}",
					"knowledgeId":"{{ ETFoE.outputs.knowledgeId }}",
					"knowledgeVersion":"{{ ETFoE.outputs.knowledgeVersion }}",
					"uniqueEntityId":"{{ ETFoE.outputs.uniqueEntityId }}",
					"authorEmail":"{{ ETFoE.outputs.authorEmail }}",
					"graphID":"{{ IY3vW.outputs.result.graphId }}",
					"knowledgeType":"{{ ETFoE.outputs.knowledgeType }}",
					"versionFlag":"{{ ETFoE.outputs.versionFlag }}",
					"signalProperties":{
						"signalId":"{{ vAl0Y.outputs.result.signalId }}",
						"waitingInstanceId":"{{ __RUN__.outputs.executionId }}",
						"waitingInstanceRunTimeType":"{{ __RUN__.outputs.workflowRunTimeType }}"
					}
				}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"global":false
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"duration":"1",
					"enabled":true,
					"threshold":"200",
					"unit":"MINUTES",
					"waitForNextWindow":true
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Process Chunk Async",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":391,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2HhUy@LGeM9@gV50U-1@l@y",
			"id":"T9edW",
			"index":15,
			"inputs":{
				"automationId":"6835668650b3973ae9e37c54",
				"runtimeConnections":{},
				"synchronous":true,
				"triggerWorkflowWithRuntimeType":"IN_MEMORY",
				"version":"-1",
				"parameters":{
					"chunkText":"{{ LGeM9.outputs.item.data }}",
					"chunkMetaData":"{{ LGeM9.outputs.item.chunkMetadata }}",
					"sharedWithIds":{
						"source":"{{ LGeM9.outputs.item.sharedWithIds }}",
						"ua:type":"mappedArray",
						"items":"{{ LGeM9.outputs.item.sharedWithIds[0] }}"
					},
					"entity_types":{
						"source":"{{ ETFoE.outputs.entityTypes }}",
						"ua:type":"mappedArray",
						"items":"{{ ETFoE.outputs.entityTypes[0] }}"
					},
					"domain":"{{ ETFoE.outputs.domainContext }}",
					"knowledgeId":"{{ ETFoE.outputs.knowledgeId }}",
					"knowledgeVersion":"{{ ETFoE.outputs.knowledgeVersion }}",
					"uniqueEntityId":"{{ ETFoE.outputs.uniqueEntityId }}",
					"authorEmail":"{{ ETFoE.outputs.authorEmail }}",
					"graphID":"{{ IY3vW.outputs.result.graphId }}",
					"knowledgeType":"{{ ETFoE.outputs.knowledgeType }}",
					"versionFlag":"{{ ETFoE.outputs.versionFlag }}"
				}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"global":false
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"duration":"1",
					"enabled":true,
					"threshold":"200",
					"unit":"MINUTES",
					"waitForNextWindow":true
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":true,
			"subTitle":"Process Chunk Sync",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":369,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"2HhUy@LGeM9@gV50U-1@l@y",
			"id":"_px1Lq",
			"index":16,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ T9edW.outputs.nodeIds }}",
					"items":"{{ T9edW.outputs.nodeIds[0] }}"
				},
				"listName":"{{ JTsVE.outputs.items[0] }}"
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":true,
			"subTitle":"Extend Node IDs",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":381,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2HhUy@LGeM9@gV50U-1@l@n",
			"id":"mDeK9",
			"index":17,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"signalId":{
							"type":"string",
							"title":"signalId"
						},
						"knowledgeId":{
							"type":"string",
							"title":"knowledgeId"
						},
						"knowledgeVersion":{
							"type":"integer",
							"title":"knowledgeVersion"
						},
						"uniqueEntityId":{
							"type":"string",
							"title":"uniqueEntityId"
						},
						"authorEmail":{
							"type":"string",
							"title":"authorEmail"
						},
						"knowledgeType":{
							"type":"string",
							"title":"Knowledge Type"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"chunk":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Chunk"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"import java.util.UUID\n\ndef uuid = UUID.randomUUID().toString()\n\ndef knowledgeId = chunk?.knowledgeId\ndef knowledgeVersion = chunk?.knowledgeVersion\ndef uniqueEntityId = chunk?.uniqueEntityId\ndef authorEmail = chunk?.authorEmail\ndef knowledgeType = chunk?.knowledgeType\n\n\nreturn [\n  \"signalId\"        : uuid,\n  \"knowledgeId\"     : knowledgeId,\n  \"knowledgeVersion\": knowledgeVersion,\n  \"uniqueEntityId\": uniqueEntityId,\n  \"authorEmail\": authorEmail,\n  \"knowledgeType\": knowledgeType\n]",
				"parameters":{
					"chunk":"{{ LGeM9.outputs.item }}"
				}
			},
			"skip":false,
			"subTitle":"Prepare chunk info",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":391,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"2HhUy@LGeM9@gV50U-1@l@n",
			"id":"4yAe3",
			"index":18,
			"inputs":{
				"automationId":"67a05c1370151957f9dcb7a7",
				"runtimeConnections":{},
				"synchronous":false,
				"triggerWorkflowWithRuntimeType":"IN_MEMORY",
				"version":"-1",
				"parameters":{
					"signalProperties":{
						"waitingInstanceRunTimeType":"{{ __RUN__.outputs.workflowRunTimeType }}",
						"waitingInstanceId":"{{ __RUN__.outputs.executionId }}",
						"signalId":"{{ vAl0Y.outputs.result.signalId }}"
					},
					"chunkText":"{{ LGeM9.outputs.item.data }}",
					"chunkMetaData":"{{ LGeM9.outputs.item.chunkMetadata }}",
					"sharedWithIds":{
						"source":"{{ LGeM9.outputs.item.sharedWithIds }}",
						"ua:type":"mappedArray",
						"items":"{{ LGeM9.outputs.item.sharedWithIds[0] }}"
					},
					"entity_types":{
						"source":"{{ ETFoE.outputs.entityTypes }}",
						"ua:type":"mappedArray",
						"items":"{{ ETFoE.outputs.entityTypes[0] }}"
					},
					"domain":"{{ ETFoE.outputs.domainContext }}",
					"graphID":"{{ IY3vW.outputs.result.graphId }}",
					"knowledgeId":"{{ mDeK9.outputs.result.knowledgeId }}",
					"knowledgeVersion":"{{ mDeK9.outputs.result.knowledgeVersion }}",
					"uniqueEntityId":"{{ mDeK9.outputs.result.uniqueEntityId }}",
					"authorEmail":"{{ mDeK9.outputs.result.authorEmail }}",
					"knowledgeType":"{{ mDeK9.outputs.result.knowledgeType }}",
					"versionFlag":"{{ ETFoE.outputs.versionFlag }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"duration":"1",
					"enabled":true,
					"threshold":"200",
					"unit":"MINUTES",
					"waitForNextWindow":true
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Process Chunk Async",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":380,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"LGeM9@gV50U-1@l",
			"id":"eu42L",
			"index":19,
			"inputs":{
				"itemToAdd":"{{ vAl0Y.outputs.result.signalId }}",
				"insertLocation":"END",
				"listName":"{{ BGlT2.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Chunk Signal",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"signals_by_unifyapps",
				"resourceVersion":376,
				"resourceName":"signals_by_unifyapps_wait_for_signals",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"fWYGv",
			"index":20,
			"inputs":{
				"duration":1,
				"unit":"HOURS",
				"signal_ids":{
					"source":"{{ BGlT2.outputs.items }}",
					"ua:type":"mappedArray",
					"items":"{{ BGlT2.outputs.items[0] }}"
				},
				"signal_payload":{
					"type":"object",
					"properties":{
						"nodeIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeIds"
						}
					},
					"additionalProperties":false
				}
			},
			"skip":false,
			"subTitle":"Signals by UnifyApps",
			"title":"Wait for process chunk signals",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.result.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":379,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"gV50U-1",
			"id":"fXLrF",
			"index":21,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"batchNodeIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Batch Node Ids"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"result":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"result"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"return [\n  batchNodeIds: result*.signal_payload.nodeIds.flatten()\n]",
				"parameters":{
					"result":{
						"ua:type":"mappedArray",
						"source":"{{ fWYGv.outputs.signals }}",
						"items":"{{ fWYGv.outputs.signals[0] }}"
					}
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"batchNodeIds",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":369,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"gV50U-1",
			"id":"cGXop",
			"index":22,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ fXLrF.outputs.result.batchNodeIds }}",
					"items":"{{ fXLrF.outputs.result.batchNodeIds[0] }}"
				},
				"listName":"{{ JTsVE.outputs.items[0] }}"
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Extend Node IDs",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":160,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"eoN5d",
			"index":23,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"vectorIndexQuery":{
							"type":"string",
							"title":"vectorIndexQuery"
						}
					},
					"additionalProperties":false,
					"required":[
						"vectorIndexQuery"
					]
				},
				"configurationMode":"DEFAULT",
				"input":{
					"type":"object",
					"properties":{
						"graphId":{
							"type":"string",
							"title":"graphId"
						}
					},
					"additionalProperties":false,
					"required":[
						"graphId"
					]
				},
				"code":"def create_vector_index_query(graph_id):\n    # Format the index name using the graph_id\n    index_name = f\"vindex_{graph_id}\"\n\n    # Create the Cypher query for creating the vector index\n    cypher_query = (\n        \"CREATE VECTOR INDEX \"\n        f\"{index_name} IF NOT EXISTS \"\n        \"FOR (n:\"\n        f\"{graph_id}_NODE) \"\n        \"ON (n.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 1536, `vector.similarity_function`: 'cosine'}};\"\n    )\n    \n    return cypher_query\n\n\ncypher_query = create_vector_index_query(graphId)\n\nresult = {\n  'vectorIndexQuery': cypher_query\n}",
				"isAsync":false,
				"python_version":"3.12",
				"parameters":{
					"graphId":"{{ GPHAj.outputs.result.graphId }}"
				}
			},
			"skip":true,
			"subTitle":"OBSOLETE: Vector Index Query",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"gV50U-1",
			"id":"Odfns",
			"index":24,
			"inputs":{
				"automationId":"683191ff4c1192163379ba70",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"dedupThreshold":"0.98",
					"result":{
						"graphId":"{{ GPHAj.outputs.result.graphId }}"
					},
					"nodeIds":{
						"source":"{{ JTsVE.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ JTsVE.outputs.items[0] }}"
					},
					"graphId":"{{ IY3vW.outputs.result.graphId }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"De-dup Graph",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":264,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"RzG5I",
			"index":25,
			"inputs":{
				"filters":[
					{
						"property":"1",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"DEPRECATED: Entity Resolution (Debug)",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":221,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"RzG5I@gV50U-1@y",
			"id":"3duWZ",
			"index":26,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"dedupQuery":{
							"type":"string",
							"title":"dedupQuery"
						}
					},
					"additionalProperties":false,
					"required":[
						"dedupQuery"
					]
				},
				"configurationMode":"DEFAULT",
				"input":{
					"type":"object",
					"properties":{
						"graphID":{
							"type":"string",
							"title":"graphID"
						},
						"threshold":{
							"type":"number",
							"title":"threshold"
						}
					},
					"additionalProperties":false,
					"required":[
						"graphID",
						"threshold"
					]
				},
				"code":"def generate_entity_resolution_query(graph_id: str, threshold: float, topK: int = 200) -> str:\n\n    query =(\n        f\"MATCH (n:{graph_id}_NODE) \"\n        \"CALL { \"\n        \"WITH n \"\n        f\"CALL db.index.vector.queryNodes('vindex_{graph_id}', 200, n.embedding) \"\n        \"YIELD node AS neighbor, score \"\n        f\"WHERE neighbor <> n AND score >= {threshold} AND ID(neighbor) < ID(n) \"\n        f\"MERGE (n)-[r:{graph_id}_REL \" \n        \"{description:'is', simScore: score}]->(neighbor) \"\n        \"RETURN count(r) AS mergesInBatch \"\n        \"} \"\n        # \"IN 10 CONCURRENT TRANSACTIONS \" This doesn't work sometimes due to issues with exclusive lock\n        \"IN TRANSACTIONS \"\n        \"RETURN sum(mergesInBatch) AS totalMerges \"\n    )\n\n    return query\n\n\ncypher_query = generate_entity_resolution_query(graph_id=graphID, threshold=threshold)\nresult = {\n    'dedupQuery': cypher_query\n}",
				"isAsync":false,
				"python_version":"3.12",
				"parameters":{
					"threshold":"{{ ETFoE.outputs.simThreshold }}",
					"graphID":"{{ IY3vW.outputs.result.graphId }}"
				}
			},
			"skip":true,
			"subTitle":"Entity Resolution Query",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"RzG5I@gV50U-1@y",
			"id":"ZZApa",
			"index":27,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"dedupQuery":{
							"type":"string",
							"title":"dedupQuery"
						}
					},
					"additionalProperties":false,
					"required":[
						"dedupQuery"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"threshold":{
							"type":"number",
							"title":"threshold"
						}
					},
					"additionalProperties":false,
					"required":[
						"graphId",
						"threshold"
					]
				},
				"compile_static":false,
				"code":"def graphID = binding.hasVariable(\"graphId\")?binding.getVariable(\"graphId\"):\"\"\ndef threshold = binding.hasVariable(\"threshold\")?binding.getVariable(\"threshold\"):0.85\ndef topK = 200\n\ndef cypherQuery = \n    \"MATCH (n:${graphID}_NODE) \" +\n    \"CALL { \" +\n    \"WITH n \" +\n    \"CALL db.index.vector.queryNodes('vindex_${graphID}', ${topK}, n.embedding) \" +\n    \"YIELD node AS neighbor, score \" +\n    \"WHERE neighbor <> n AND score >= ${threshold} AND ID(neighbor) < ID(n) \" +\n    \"MERGE (n)-[r:${graphID}_REL {description:'is', simScore: score}]->(neighbor) \" +\n    \"RETURN count(r) AS mergesInBatch \" +\n    \"} \" +\n    // \"IN 10 CONCURRENT TRANSACTIONS \" This doesn't work sometimes due to issues with exclusive lock\n    \"IN TRANSACTIONS \" +\n    \"RETURN sum(mergesInBatch) AS totalMerges \"\n\ndef result = [\n    dedupQuery: cypherQuery.toString()\n]",
				"parameters":{
					"graphId":"{{ IY3vW.outputs.result.graphId }}",
					"threshold":"{{ ETFoE.outputs.simThreshold }}"
				}
			},
			"skip":false,
			"subTitle":"Entity Resolution Query",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":278,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"RzG5I@gV50U-1@y",
			"id":"Vc8F4",
			"index":28,
			"inputs":{
				"automationId":"67a9e903bdf95a2dab1df8cb",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"cypherQuery":"{{ ZZApa.outputs.result.dedupQuery }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Neo4j: Entity Resolution",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":160,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"q1Cra",
			"index":29,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"dropProjectionQuery":{
							"type":"string",
							"title":"dropProjectionQuery"
						},
						"createProjectionQuery":{
							"type":"string",
							"title":"createProjectionQuery"
						}
					},
					"additionalProperties":false,
					"required":[
						"dropProjectionQuery",
						"createProjectionQuery"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"graphId":{
							"type":"string",
							"title":"graphId"
						}
					},
					"additionalProperties":false,
					"required":[
						"graphId"
					]
				},
				"code":"relationship_type = graphId + '_REL'\nnode_type = graphId + '_NODE'\n\n# drop if exists, then (re)create projection\ndrop_proejection_query = f\"CALL gds.graph.drop('{graphId}', false) YIELD graphName\"\ncreate_projection_query = (\n    \"CALL gds.graph.project(\"\n    f\"'{graphId}', \"\n    f\"'{node_type}', \"\n    \"{ \"\n    f\"{relationship_type}: \"\n    \"{ \"\n    \"orientation: 'UNDIRECTED'\"\n    \"} \"\n    \"} \"\n    \") \"\n    \"YIELD \"\n    \"graphName, nodeCount, relationshipCount \"\n    \"RETURN graphName, nodeCount, relationshipCount\"\n)\n\n\n\nresult = {\n  'createProjectionQuery': create_projection_query,\n  'dropProjectionQuery': drop_proejection_query\n}",
				"isAsync":false,
				"parameters":{
					"graphId":"{{ IY3vW.outputs.result.graphId }}"
				}
			},
			"skip":true,
			"subTitle":"Graph Projection Queries",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"ECFKk",
			"index":30,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"createProjectionQuery":{
							"type":"string",
							"title":"createProjectionQuery"
						},
						"dropProjectionQuery":{
							"type":"string",
							"title":"dropProjectionQuery"
						}
					},
					"additionalProperties":false,
					"required":[
						"createProjectionQuery",
						"dropProjectionQuery"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"graphId":{
							"type":"string",
							"title":"graphId"
						}
					},
					"additionalProperties":false,
					"required":[
						"graphId"
					]
				},
				"compile_static":false,
				"code":"def graphId = binding.hasVariable(\"graphId\")?binding.getVariable(\"graphId\"):\"\"\n\nrelationship_type = graphId + '_REL'\nnode_type = graphId + '_NODE'\n\n// drop if exists, then (re)create projection\ndrop_proejection_query = \"CALL gds.graph.drop('${graphId}', false) YIELD graphName\".toString()\ncreate_projection_query = (\n    \"CALL gds.graph.project(\" +\n    \"'${graphId}', \" +\n    \"'${node_type}', \" +\n    \"{ \" +\n    \"${relationship_type}: \" +\n    \"{ \" +\n    \"orientation: 'UNDIRECTED'\" +\n    \"} \" +\n    \"} \" +\n    \") \" +\n    \"YIELD \" +\n    \"graphName, nodeCount, relationshipCount \" +\n    \"RETURN graphName, nodeCount, relationshipCount\"\n)\n\nresult = [\n  createProjectionQuery: create_projection_query.toString(),\n  dropProjectionQuery: drop_proejection_query.toString()\n]",
				"parameters":{
					"graphId":"{{ IY3vW.outputs.result.graphId }}"
				}
			},
			"skip":false,
			"subTitle":"Graph Projection Queries",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":278,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"gV50U-1",
			"id":"EXtEw",
			"index":31,
			"inputs":{
				"automationId":"67a9e903bdf95a2dab1df8cb",
				"runtimeConnections":{},
				"synchronous":true,
				"triggerWorkflowWithRuntimeType":"DEFAULT",
				"version":"-1",
				"parameters":{
					"cypherQuery":"{{ ECFKk.outputs.result.dropProjectionQuery }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Neo4j: Drop Prev Projection",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":278,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"gV50U-1",
			"id":"9Zx6U",
			"index":32,
			"inputs":{
				"automationId":"67a9e903bdf95a2dab1df8cb",
				"runtimeConnections":{},
				"synchronous":true,
				"triggerWorkflowWithRuntimeType":"DEFAULT",
				"version":"-1",
				"parameters":{
					"cypherQuery":"{{ ECFKk.outputs.result.createProjectionQuery }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Neo4j: Re-create projection",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"slack",
				"resourceVersion":908,
				"connectionId":"66a7e9d5d9b2fb0ec5db29f3",
				"resourceName":"slack_post_message_in_channel",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"gV50U-1",
			"id":"8TtZ1",
			"index":33,
			"inputs":{
				"link_names":true,
				"messageType":"text",
				"channel":"C08UV1WNHQR",
				"text":"GraphRAG Finished with node ids: {{ JTsVE.outputs.items }}",
				"mrkdwn":true
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"global":false
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Slack",
			"title":"Post message",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":183,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"10wdB",
			"index":34,
			"inputs":{
				"result":{
					"status":"ok",
					"graphId":"{{ IY3vW.outputs.result.graphId }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1728,
	"runtimeConnectionAppNames":[
		"slack"
	],
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"GraphRAG"
	],
	"version":105
}
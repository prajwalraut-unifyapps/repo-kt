{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1733760311392,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1758655392472,
		"deployedBy":0,
		"deployedDefinitionId":"68d2f3a038757c179b123c1b",
		"status":"DEPLOYED",
		"version":34,
		"workflowVersion":53
	},
	"edges":[
		{
			"fromNodeId":"_Z8UY9",
			"priority":0,
			"skip":false,
			"toNodeId":"_Atl0m",
			"type":"next"
		},
		{
			"fromNodeId":"_Atl0m",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tXokl",
			"type":"next"
		},
		{
			"fromNodeId":"n_tXokl",
			"priority":0,
			"skip":false,
			"toNodeId":"_khpa6",
			"type":"next"
		},
		{
			"fromNodeId":"_khpa6",
			"priority":0,
			"skip":false,
			"toNodeId":"_Md9OI",
			"type":"next"
		},
		{
			"fromNodeId":"_Md9OI",
			"priority":0,
			"skip":false,
			"toNodeId":"_qXgEB",
			"type":"next"
		},
		{
			"fromNodeId":"_qXgEB",
			"priority":0,
			"skip":false,
			"toNodeId":"_aQOVY",
			"type":"next"
		},
		{
			"fromNodeId":"_aQOVY",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ule9R",
			"type":"loop"
		},
		{
			"fromNodeId":"n_ule9R",
			"priority":0,
			"skip":false,
			"toNodeId":"_M0TwX",
			"type":"next"
		},
		{
			"fromNodeId":"_M0TwX",
			"priority":0,
			"skip":false,
			"toNodeId":"_wKeqi",
			"type":"next"
		},
		{
			"fromNodeId":"_wKeqi",
			"priority":0,
			"skip":false,
			"toNodeId":"_ndU70",
			"type":"next"
		},
		{
			"fromNodeId":"_ndU70",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"_aQOVY",
			"type":"next"
		},
		{
			"fromNodeId":"_aQOVY",
			"priority":0,
			"skip":false,
			"toNodeId":"_NZB3N",
			"type":"next"
		},
		{
			"fromNodeId":"_NZB3N",
			"priority":0,
			"skip":false,
			"toNodeId":"_5lEkv",
			"type":"next"
		},
		{
			"fromNodeId":"_5lEkv",
			"priority":0,
			"skip":false,
			"toNodeId":"_IQKBE",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"67571537db828272ef571341",
	"lastModifiedBy":-1,
	"lcName":"create pptx file | text to ppt ",
	"modifiedTime":1759243572998,
	"name":"Create PPTX File | Text to PPT ",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":129,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_Z8UY9",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"pptFile":{
							"type":"object",
							"properties":{
								"name":{
									"type":"string",
									"title":"name"
								},
								"source":{
									"type":"string",
									"title":"source"
								},
								"sourceType":{
									"type":"string",
									"title":"sourceType"
								},
								"type":{
									"type":"string",
									"title":"type"
								}
							},
							"title":"pptFile",
							"additionalProperties":false
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"user_query"
					],
					"properties":{
						"user_query":{
							"type":"string",
							"title":"User Query"
						},
						"chat_history":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Chat History"
						},
						"relevantContent":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"content":{
										"type":"string",
										"title":"Content"
									},
									"chunkMetadata":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Chunk Metadata"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Relevant Content"
						},
						"llmModelId":{
							"type":"string",
							"title":"Llm Model Id"
						},
						"embeddingModelId":{
							"type":"string",
							"title":"Embedding Model Id"
						},
						"templatePPTXFile":{
							"type":"object",
							"properties":{
								"name":{
									"type":"string",
									"title":"Name"
								},
								"source":{
									"type":"string",
									"title":"Source"
								},
								"sourceType":{
									"type":"string",
									"title":"Source Type"
								},
								"type":{
									"type":"string",
									"title":"Type"
								}
							},
							"additionalProperties":false,
							"title":"Template PPTX File",
							"required":[]
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.input_schema.chunks.items",
					"root.input_schema.history.items"
				]
			},
			"context":{
				"appName":"template_by_unifyapps",
				"resourceVersion":147,
				"resourceName":"template_by_unifyapps_compile_template",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_Atl0m",
			"index":2,
			"inputs":{
				"input_schema":{
					"user_query":"{{ _Z8UY9.outputs.user_query }}",
					"chunks":{
						"source":"{{ _Z8UY9.outputs.relevantContent }}",
						"ua:type":"mappedArray",
						"items":"{{ _Z8UY9.outputs.relevantContent[0].content }}"
					},
					"history":{
						"source":"{{ _Z8UY9.outputs.chat_history }}",
						"ua:type":"mappedArray",
						"items":"{{ _Z8UY9.outputs.chat_history[0] }}"
					}
				},
				"template_id":"e_6757160a0387a61ab749dfaf"
			},
			"skip":false,
			"subTitle":"Template by UnifyApps",
			"title":"Compile template",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":471,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"n_tXokl",
			"index":3,
			"inputs":{
				"automationId":"66dfd76eb70dad256986b784",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"modelId":"{{ _Z8UY9.outputs.llmModelId }}",
					"content":"{{ _Atl0m.outputs.output }}",
					"type":"text",
					"response_format":"json_object",
					"maxTokens":4096,
					"temperature":0.9
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":189,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_khpa6",
			"index":4,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object",
									"properties":{
										"path":{
											"type":"string",
											"title":"path"
										},
										"name":{
											"type":"string",
											"title":"name"
										}
									},
									"additionalProperties":false
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"name_and_path_of_icons",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"name_and_path_of_icons",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"path":{
										"type":"string",
										"title":"path"
									},
									"name":{
										"type":"string",
										"title":"name"
									}
								}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":88,
				"resourceName":"utility_by_unifyapps_to_json_object",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_Md9OI",
			"index":5,
			"inputs":{
				"jsonSchema":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"slides":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"slides"
						}
					}
				},
				"jsonString":"{{ n_tXokl.outputs.llmResponse }}"
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Deserialise string to JSON object",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":94,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_qXgEB",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"icons"
					],
					"properties":{
						"icons":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Icons"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"slides"
					],
					"properties":{
						"slides":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Slides"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"def extract_unique_icon_names(slides):\n    unique_icons = set()\n    for slide in slides:\n        if slide.get(\"content_type\") == \"icon_bullets\":\n            for bullet in slide.get(\"bullet_points\", []):\n                icon_name = bullet.get(\"icon_name\")\n                if icon_name:\n                    unique_icons.add(icon_name)\n    return list(unique_icons)\n\nunique_icon_names = extract_unique_icon_names(slides)\nresult = {\"icons\": unique_icon_names}",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"slides":"{{ _Md9OI.outputs.result.slides }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":158,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_aQOVY",
			"index":7,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ _qXgEB.outputs.result.icons }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":471,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_aQOVY@_Nu2gS-1@l",
			"id":"n_ule9R",
			"index":8,
			"inputs":{
				"automationId":"6784b9216fb83f0972c5625d",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"userQuery":"{{ _aQOVY.outputs.item }}",
					"modelId":"{{ _Z8UY9.outputs.embeddingModelId }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2076,
				"resourceName":"storage_by_unifyapps_semantic_query_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_aQOVY@_Nu2gS-1@l",
			"id":"_M0TwX",
			"index":9,
			"inputs":{
				"hybridSearch":false,
				"searchField":{
					"field":"properties.icon_embeddings",
					"op":"KNN",
					"values":"{{ n_ule9R.outputs.embeddings }}"
				},
				"object_type":"text_to_ppt_icon",
				"numberOfRecordsToFetch":1
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Semantic search records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":80,
				"resourceName":"utility_by_unifyapps_generate_public_url",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_aQOVY@_Nu2gS-1@l",
			"id":"_wKeqi",
			"index":10,
			"inputs":{
				"file":"{{ _M0TwX.outputs.objects[0].document.properties.file }}",
				"expiryTime":1
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Generate public file URL",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":132,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_aQOVY@_Nu2gS-1@l",
			"id":"_ndU70",
			"index":11,
			"inputs":{
				"itemToAdd":{
					"path":"{{ _wKeqi.outputs.url }}",
					"name":"{{ _aQOVY.outputs.item }}"
				},
				"insertLocation":"END",
				"listName":"{{ _khpa6.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.inputs.slides.items",
					"root.parameters.inputs.icon_map.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":94,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_NZB3N",
			"index":12,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"new_slides":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"new_slides"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"inputs":{
							"type":"object",
							"properties":{
								"slides":{
									"type":"array",
									"items":{
										"type":"object"
									},
									"title":"slides"
								},
								"icon_map":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{},
										"additionalProperties":false
									},
									"title":"icon_map"
								}
							},
							"title":"inputs",
							"additionalProperties":false,
							"required":[]
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"def create_icon_lookup(icon_map):\n    return {icon[\"name\"]: icon[\"path\"] for icon in icon_map}\n\ndef replace_icons(slides, icon_lookup):\n    for slide in slides:\n        if slide.get(\"content_type\") == \"icon_bullets\":\n            for bullet in slide[\"bullet_points\"]:\n                icon_name = bullet[\"icon_name\"]\n                if icon_name in icon_lookup:\n                    bullet[\"icon_name\"] = icon_lookup[icon_name]\n    return slides\n\nslides = inputs.get(\"slides\", [])\nicon_map = inputs.get(\"icon_map\", [])\n\nicon_lookup = create_icon_lookup(icon_map)\nslides = replace_icons(slides, icon_lookup)\n\nresult = {\"new_slides\": slides}",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"inputs":{
						"icon_map":{
							"source":"{{ _khpa6.outputs.items }}",
							"ua:type":"mappedArray",
							"items":"{{ _khpa6.outputs.items[0] }}"
						},
						"slides":{
							"source":"{{ _Md9OI.outputs.result.slides }}",
							"ua:type":"mappedArray",
							"items":"{{ _Md9OI.outputs.result.slides[0] }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":93,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_5lEkv",
			"index":13,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"fileObj":{
							"type":"object",
							"properties":{
								"name":{
									"type":"string",
									"title":"name"
								},
								"source":{
									"type":"string",
									"title":"source"
								},
								"sourceType":{
									"type":"string",
									"title":"sourceType"
								},
								"type":{
									"type":"string",
									"title":"type"
								}
							},
							"additionalProperties":false
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"slides",
						"s3_temp_url"
					],
					"properties":{
						"slides":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Slides"
						},
						"s3_temp_url":{
							"type":"string",
							"title":"s3_temp_url"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"from pptx import Presentation\nimport os\nimport tempfile\nfrom typing import Union, Tuple, List, Dict\nimport boto3\nfrom urllib.parse import urlparse, unquote\nfrom datetime import datetime\nfrom pptx.enum.shapes import MSO_SHAPE\n\n\ndef add_title_and_subtitle_slide(prs, title, subtitle, slide_width_inch=10, slide_height_inch=7.5):\n    slide_layout = prs.slide_layouts[0]\n    slide = prs.slides.add_slide(slide_layout)\n    slide.shapes.title.text = title\n    slide.placeholders[1].text = subtitle\n    return prs\n\n\ndef add_title_with_bullet_points_slide(prs, title, bullet_points, slide_width_inch=10, slide_height_inch=7.5):\n    slide_layout = prs.slide_layouts[1]\n    slide = prs.slides.add_slide(slide_layout)\n    slide.shapes.title.text = title\n    text_frame = slide.placeholders[1].text_frame\n    text_frame.clear()\n    for point in bullet_points:\n        p = text_frame.add_paragraph()\n        p.text = point\n    return prs\n\n\ndef add_title_with_icons_and_points(prs, title, icons_with_descriptions, slide_width_inch=10, slide_height_inch=7.5):\n    from pptx.util import Inches, Pt\n    from pptx.enum.text import PP_ALIGN\n    from pptx.dml.color import RGBColor\n    from urllib.parse import urlparse, unquote\n    from pptx.enum.shapes import MSO_SHAPE\n    import tempfile\n    import boto3\n    import random\n    import os\n    \n    s3 = boto3.client(\"s3\")\n\n    ICON_SIZE = Inches(1)\n    ICON_BG_SIZE = Inches(1.2)\n    TEXT_BOX_SIZE = Inches(1.5)\n    ICON_COLORS = [RGBColor(255, 0, 0), RGBColor(0, 128, 255), RGBColor(0, 255, 128)]\n    SPACING = Inches(0.5)\n    \n    slide_layout = prs.slide_layouts[5]\n    slide = prs.slides.add_slide(slide_layout)\n    slide.shapes.title.text = title\n    \n    n_items = len(icons_with_descriptions)\n    total_width = n_items * ICON_SIZE + (n_items - 1) * SPACING\n    left_start = (Inches(slide_width_inch) - total_width) / 2  # Center the icons horizontally\n    top_icon = Inches(2)\n    top_text = Inches(3.5)\n\n    for idx, item in enumerate(icons_with_descriptions):\n        icon_path = item[\"icon_name\"]\n        description = item[\"text\"]\n        parsed_url_icon = urlparse(icon_path)\n        bucket_name_icon = parsed_url_icon.path.lstrip('/').split(\"/\")[0]\n        file_key_icon = unquote(\"/\".join(parsed_url_icon.path.lstrip('/').split(\"/\")[1:]))\n\n        left = left_start + idx * (ICON_SIZE + SPACING)\n        bg_shape = slide.shapes.add_shape(\n            MSO_SHAPE.ROUNDED_RECTANGLE,\n            left - (ICON_BG_SIZE - ICON_SIZE) / 2,\n            top_icon - (ICON_BG_SIZE - ICON_SIZE) / 2,\n            ICON_BG_SIZE,\n            ICON_BG_SIZE\n        )\n        bg_shape.fill.solid()\n        bg_shape.fill.fore_color.rgb = random.choice(ICON_COLORS)  # Random background color\n        bg_shape.shadow.inherit = False\n        with tempfile.NamedTemporaryFile(suffix=\".png\", delete=True) as temp_icon_file:\n            s3.download_file(Bucket=bucket_name_icon, Key=file_key_icon, Filename=temp_icon_file.name)\n            slide.shapes.add_picture(temp_icon_file.name, left, top_icon, height=ICON_SIZE)\n        \n        # Add the icon image\n        # if os.path.exists(icon_path):\n        #     slide.shapes.add_picture(icon_path, left, top_icon, height=ICON_SIZE)\n        # else:\n        #     print(f\"Warning: Icon not found at {icon_path}\")\n\n        # Add a text box below the icon\n        text_box = slide.shapes.add_textbox(\n            left - (TEXT_BOX_SIZE - ICON_SIZE) / 2,\n            top_icon + ICON_SIZE + Inches(0.2),\n            TEXT_BOX_SIZE,\n            Inches(1)\n        )\n        text_frame = text_box.text_frame\n        text_frame.text = description\n        text_frame.word_wrap = True\n        text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER\n        text_frame.paragraphs[0].font.size = Pt(12)\n\n        # Remove background and line for the text box\n        text_box.fill.background()\n        text_box.line.fill.background()\n\n    return prs\n\n\ndef add_two_column_bullet_points_slide(prs, title, left_column_bullet_points, right_column_bullet_points, left_column_heading = None, right_column_heading = None, slide_width_inch=10, slide_height_inch=7.5):\n    if left_column_heading:\n        slide_layout = prs.slide_layouts[4]\n    else:\n        slide_layout = prs.slide_layouts[3]\n    \n    slide = prs.slides.add_slide(slide_layout)\n    slide.shapes.title.text = title\n    if left_column_heading:\n        slide.placeholders[1].text = left_column_heading\n        left_placeholder = slide.placeholders[2]\n        slide.placeholders[3].text = right_column_heading\n        right_placeholder = slide.placeholders[4]\n    else:\n        left_placeholder = slide.placeholders[1]\n        right_placeholder = slide.placeholders[2]\n    \n    text_frame = left_placeholder.text_frame\n    for idx, point in enumerate(left_column_bullet_points):\n        if idx == 0:\n            text_frame.text = point\n        else:\n            paragraph = text_frame.add_paragraph()\n            paragraph.text = point\n            paragraph.level = 0\n\n    text_frame = right_placeholder.text_frame\n    for idx, point in enumerate(right_column_bullet_points):\n        if idx == 0:\n            text_frame.text = point\n        else:\n            paragraph = text_frame.add_paragraph()\n            paragraph.text = point\n            paragraph.level = 0\n\n    return prs\n\n\ndef add_title_with_process_flow(prs, title, steps, slide_width_inch=10, slide_height_inch=7.5):\n    from pptx.util import Inches\n    from pptx.enum.shapes import MSO_SHAPE\n    from pptx.enum.text import PP_ALIGN\n    \n    slide_layout = prs.slide_layouts[5]\n    slide = prs.slides.add_slide(slide_layout)\n    slide.shapes.title.text = title\n\n    n_steps = len(steps)\n    if n_steps < 3 or n_steps > 6:\n        raise ValueError(\"Number of steps must be between 3 and 6 for optimal design.\")\n\n    shapes = slide.shapes\n    if 3 <= n_steps <= 4:\n        height = Inches(1.5)\n        width = Inches(slide_width_inch / n_steps - 0.5)\n        top = Inches(slide_height_inch / 2)\n        left = Inches((slide_width_inch - (width.inches * n_steps)) / 2)\n\n        for step in steps:\n            shape = shapes.add_shape(MSO_SHAPE.CHEVRON, left, top, width, height)\n            shape.text = step\n            shape.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER\n            left += width - Inches(0.4)\n    elif 5 <= n_steps <= 6:\n        height = Inches(0.65)\n        top = Inches(slide_height_inch / 4)\n        left = Inches(1)\n        width = Inches(slide_width_inch * 2 / 3)\n\n        for step in steps:\n            shape = shapes.add_shape(MSO_SHAPE.PENTAGON, left, top, width, height)\n            shape.text = step\n            shape.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER\n            top += height + Inches(0.3)\n    return prs\n\ndef get_slide_width_height_inches(presentation):\n    EMU_TO_INCH_SCALING_FACTOR = 1.0 / 914400\n    \n    slide_width_inch = EMU_TO_INCH_SCALING_FACTOR * presentation.slide_width\n    slide_height_inch = EMU_TO_INCH_SCALING_FACTOR * presentation.slide_height\n\n    return slide_width_inch, slide_height_inch\n\ns3 = boto3.client(\"s3\")\n\nparsed_url = urlparse(s3_temp_url)\nbucket_name = parsed_url.path.lstrip('/').split(\"/\")[0]\nfile_key = unquote(\"/\".join(parsed_url.path.lstrip('/').split(\"/\")[1:]))\n\n# Extract the PDF name from the file key\npdf_name = os.path.basename(file_key).rsplit('.', 1)[0]\n\n# Get the current date and time\ncurrent_datetime = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n# icon_index = 1\n# for slide in slides:\n#     if \"content_type\" in slide:\n#         if slide[\"content_type\"] == \"icon_bullets\":\n#             for point in slide[\"bullet_points\"]:\n#                 parsed_url_icon = urlparse(point[\"icon_name\"])\n#                 bucket_name_icon = parsed_url_icon.path.lstrip('/').split(\"/\")[0]\n#                 file_key_icon = unquote(\"/\".join(parsed_url_icon.path.lstrip('/').split(\"/\")[1:]))\n#                 icon_path = \"/tmp/icons_\"+str(icon_index)+\".png\"\n#                 s3.download_file(Bucket=bucket_name_icon, Key=file_key_icon, Filename=icon_path)\n#                 icon_index = icon_index + 1\n#                 point[\"icon_path\"] = icon_path\n\nwith tempfile.NamedTemporaryFile(suffix=\".pptx\", delete=True) as temp_pdf_file:\n    s3.download_file(Bucket=bucket_name, Key=file_key, Filename=temp_pdf_file.name)\n    output_folder = tempfile.mkdtemp()\n\n    prs = Presentation(temp_pdf_file.name)\n\n    # Example usage of each function\n    slide_width_inch, slide_height_inch = get_slide_width_height_inches(prs)\n\n    for slide in slides:\n        title = slide[\"title\"]\n        if \"content_type\" in slide:\n            if slide[\"content_type\"] == \"sequential_bullets\" or slide[\"content_type\"] == \"normal_bullets\" or slide[\"content_type\"] == \"icon_bullets\":\n                bullet_points = [tmp[\"text\"] for tmp in slide[\"bullet_points\"]]\n                if slide[\"content_type\"] == \"sequential_bullets\":\n                    prs = add_title_with_process_flow(prs, title, bullet_points, slide_width_inch, slide_height_inch)\n                elif slide[\"content_type\"] == \"normal_bullets\":\n                    prs = add_title_with_bullet_points_slide(prs, title, bullet_points, slide_width_inch, slide_height_inch)\n                elif slide[\"content_type\"] == \"icon_bullets\":\n                    prs = add_title_with_icons_and_points(prs, title, slide[\"bullet_points\"], slide_width_inch, slide_height_inch)\n        if \"columns\" in slide:\n            prs = add_two_column_bullet_points_slide(\n                prs,\n                title,\n                slide[\"columns\"][0][\"bullet_points\"],\n                slide[\"columns\"][1][\"bullet_points\"],\n                slide[\"columns\"][0].get(\"sub_title\", None),\n                slide[\"columns\"][1].get(\"sub_title\", None), \n                slide_width_inch,\n                slide_height_inch\n            )\n        if \"subtitle\" in slide:\n            prs = add_title_and_subtitle_slide(prs, title, slide[\"subtitle\"], slide_width_inch, slide_height_inch)\n    \n    image_key = f\"{current_datetime}_example_presentation.pptx\"\n    image_path = f\"{output_folder}/{image_key}\"\n    prs.save(image_path)\n    s3.upload_file(Filename=image_path, Bucket=bucket_name, Key=image_key)\n    result = {\n        \"fileObj\": {\n            \"name\": image_key,\n            \"source\": image_key,\n            \"sourceType\": \"CLOUD_STORAGE\",\n            \"type\": \"FILE\"\n        }\n    }",
				"isAsync":true,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"s3_temp_url":"",
					"slides":{
						"ua:type":"mappedArray",
						"source":"{{ _NZB3N.outputs.result.new_slides }}",
						"items":"{{ _NZB3N.outputs.result.new_slides[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":116,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Nu2gS-1",
			"id":"_IQKBE",
			"index":14,
			"inputs":{
				"result":{
					"pptFile":{
						"name":"{{ _5lEkv.outputs.result.fileObj.name }}",
						"source":"{{ _5lEkv.outputs.result.fileObj.source }}",
						"sourceType":"{{ _5lEkv.outputs.result.fileObj.sourceType }}",
						"type":"{{ _5lEkv.outputs.result.fileObj.type }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":398,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":54
}
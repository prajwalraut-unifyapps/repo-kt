{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1759243543761,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759243577398,
		"deployedBy":-1,
		"deployedDefinitionId":"68dbed395e003e08cdeb2f5c",
		"status":"DEPLOYED",
		"version":2,
		"workflowVersion":6
	},
	"edges":[
		{
			"fromNodeId":"n_N6bd3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_1pqbV",
			"type":"next"
		},
		{
			"fromNodeId":"n_1pqbV",
			"priority":0,
			"skip":false,
			"toNodeId":"9rY0P",
			"type":"next"
		},
		{
			"fromNodeId":"9rY0P",
			"priority":0,
			"skip":false,
			"toNodeId":"n_VMyRj",
			"type":"next"
		},
		{
			"fromNodeId":"n_VMyRj",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"_VenFI",
			"type":"if"
		},
		{
			"fromNodeId":"_VenFI",
			"priority":0,
			"skip":false,
			"toNodeId":"n_G18nq",
			"type":"next"
		},
		{
			"fromNodeId":"n_VMyRj",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_g8d29",
			"type":"next"
		},
		{
			"fromNodeId":"_g8d29",
			"priority":0,
			"skip":false,
			"toNodeId":"_p1rrI",
			"type":"next"
		},
		{
			"fromNodeId":"n_G18nq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_eJmlP",
			"type":"next"
		},
		{
			"fromNodeId":"_p1rrI",
			"priority":0,
			"skip":false,
			"toNodeId":"n_eJmlP",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"68d4fa4b57b4633dc0e76a03",
	"lastModifiedBy":-1,
	"lcName":"user/assistant conversationhistory ",
	"modifiedTime":1759371898724,
	"name":"User/Assistant ConversationHistory ",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":496,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_b01QU-1",
			"id":"n_N6bd3",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"conversation_history":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"conversation_history"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"caseId":{
							"type":"string",
							"title":"caseId"
						},
						"SQLContextNeeded":{
							"type":"boolean",
							"title":"SQLContextNeeded"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":483,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_b01QU-1",
			"id":"n_1pqbV",
			"index":2,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"conversation_history":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"conversation_history"
						}
					}
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"conversation_history":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"conversation_history"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":320,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_b01QU-1",
			"id":"9rY0P",
			"index":3,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_caseId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ n_N6bd3.outputs.caseId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_message",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"sortBy":[
					{
						"field":"cTm",
						"order":"ASC"
					}
				],
				"translationsOption":"DEFAULT",
				"page":{
					"paginateBy":"OFFSET",
					"limit":1000
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":442,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_b01QU-1",
			"id":"n_VMyRj",
			"index":4,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_N6bd3.outputs.SQLContextNeeded }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.messages.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":317,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_VMyRj@_b01QU-1@y",
			"id":"_VenFI",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"conversation_history":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"conversation_history"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"messages":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"required":[]
							},
							"title":"messages"
						}
					}
				},
				"code":"\ndef conversation_history = []\n\nif (binding.hasVariable('messages')) {\n    def messages = binding.getVariable('messages')\n    messages.each { msg ->\n        def type = msg?.properties?.type\n        def content = msg?.properties?.content\n        def additional = msg?.properties?.additional ?: [:]\n\n        // User message (fan)\n        if (type == 'fan') {\n            def userText = content?.text?.toString()?.trim()\n            if(userText) conversation_history << [user: userText]\n        }\n        \n        // Assistant message (bot)\n        if (type == 'bot') {\n            def asstPayload = [:]\n            def toolUseDetails = content?.agentResponse?.toolUseDetails\n            def skipText = false\n            if (toolUseDetails != null) {\n                if (toolUseDetails?.toolExecutionStatus == true) {\n                    skipText = true\n                } \n            }\n            if (!skipText) {\n                def botText = content?.text?.toString()?.trim()\n                if (botText) asstPayload.answer = botText\n            }\n            \n            def sqlQuery = additional?.sqlQuery ?: additional?.sqlquery\n            def sqlOutput = additional?.sql_output ?: additional?.sqlOutput\n            if (sqlQuery) asstPayload.sql_query = sqlQuery\n            if (sqlOutput) asstPayload.sql_output = sqlOutput\n\n            conversation_history << [assistant: asstPayload]\n        }\n    }\n}\n\nconversation_history = conversation_history.findAll { it.user || (it.assistant && !it.assistant.isEmpty()) }\n\nreturn [conversation_history: conversation_history]\n\n// def conversation_history = []\n// def user_turn = null\n\n// if (binding.hasVariable('messages')) {\n//     def messages = binding.getVariable('messages')\n\n//     for (msg in messages) {\n//         // User message\n//         if (msg?.properties?.type == 'fan') {\n//             user_turn = [user: msg?.properties?.content?.text?.trim()]\n//         }\n\n//         // Assistant (bot) message\n//         if (msg?.properties?.type == 'bot') {\n//             def asst_reply = [:]\n//             def sql_query = msg?.properties?.additional?.sqlQuery\n//             def sql_output = msg?.properties?.additional?.sql_output\n//             def text_reply = msg?.properties?.content?.text?.trim()\n\n//             // Add sql/data if present\n//             if (sql_query) asst_reply['sql_query'] = sql_query\n//             if (sql_output) asst_reply['data'] = sql_output\n\n//             // Only add 'final_answer' if sql_query or data present (i.e., as supporting explanation)\n//             // if ((sql_query || sql_output) && text_reply) {\n//             //     asst_reply['final_answer'] = text_reply\n//             // }\n\n//             // Only add to history if asst_reply is non-empty\n//             if (!asst_reply.isEmpty()) {\n//                 // Pair with previous user message if pending\n//                 if (user_turn) {\n//                     user_turn['assistant'] = asst_reply\n//                     conversation_history << user_turn\n//                     user_turn = null\n//                 } else {\n//                     conversation_history << [assistant: asst_reply]\n//                 }\n//             }\n//         }\n//     }\n// }\n// // At end, if there's a user_turn (not paired), optionally add; but per your pattern looks like we don't.\n// return [conversation_history: conversation_history]\n",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"messages":{
						"source":"{{ 9rY0P.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ 9rY0P.outputs.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_VMyRj@_b01QU-1@y",
			"id":"n_G18nq",
			"index":6,
			"inputs":{
				"variables":[
					{
						"source":"{{ n_1pqbV.outputs.conversation_history }}",
						"value":{
							"source":"{{ _VenFI.outputs.result.conversation_history }}",
							"ua:type":"mappedArray",
							"items":"{{ _VenFI.outputs.result.conversation_history[0] }}"
						}
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.messages.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":317,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_VMyRj@_b01QU-1@n",
			"id":"_g8d29",
			"index":7,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"conversation_history":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"conversation_history"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"messages":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"required":[]
							},
							"title":"messages"
						}
					}
				},
				"code":"\ndef conversation_history = []\n\nif (binding.hasVariable('messages')) {\n    def messages = binding.getVariable('messages')\n    messages.each { msg ->\n        def type = msg?.properties?.type\n        def content = msg?.properties?.content\n        def additional = msg?.properties?.additional ?: [:]\n\n        // User message (fan)\n        if (type == 'fan') {\n            def userText = content?.text?.toString()?.trim()\n            if(userText) conversation_history << [user: userText]\n        }\n        \n        // Assistant message (bot)\n        if (type == 'bot') {\n            def asstPayload = [:]\n            def toolUseDetails = content?.agentResponse?.toolUseDetails\n            \n            def botText = content?.text?.toString()?.trim()\n            if (botText) asstPayload.answer = botText\n            conversation_history << [assistant: asstPayload]\n        }\n    }\n}\n\nconversation_history = conversation_history.findAll { it.user || (it.assistant && !it.assistant.isEmpty()) }\n\nreturn [conversation_history: conversation_history]\n\n// def conversation_history = []\n// def user_turn = null\n\n// if (binding.hasVariable('messages')) {\n//     def messages = binding.getVariable('messages')\n\n//     for (msg in messages) {\n//         // User message\n//         if (msg?.properties?.type == 'fan') {\n//             user_turn = [user: msg?.properties?.content?.text?.trim()]\n//         }\n\n//         // Assistant (bot) message\n//         if (msg?.properties?.type == 'bot') {\n//             def asst_reply = [:]\n//             def sql_query = msg?.properties?.additional?.sqlQuery\n//             def sql_output = msg?.properties?.additional?.sql_output\n//             def text_reply = msg?.properties?.content?.text?.trim()\n\n//             // Add sql/data if present\n//             if (sql_query) asst_reply['sql_query'] = sql_query\n//             if (sql_output) asst_reply['data'] = sql_output\n\n//             // Only add 'final_answer' if sql_query or data present (i.e., as supporting explanation)\n//             // if ((sql_query || sql_output) && text_reply) {\n//             //     asst_reply['final_answer'] = text_reply\n//             // }\n\n//             // Only add to history if asst_reply is non-empty\n//             if (!asst_reply.isEmpty()) {\n//                 // Pair with previous user message if pending\n//                 if (user_turn) {\n//                     user_turn['assistant'] = asst_reply\n//                     conversation_history << user_turn\n//                     user_turn = null\n//                 } else {\n//                     conversation_history << [assistant: asst_reply]\n//                 }\n//             }\n//         }\n//     }\n// }\n// // At end, if there's a user_turn (not paired), optionally add; but per your pattern looks like we don't.\n// return [conversation_history: conversation_history]\n",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"messages":{
						"source":"{{ 9rY0P.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ 9rY0P.outputs.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_VMyRj@_b01QU-1@n",
			"id":"_p1rrI",
			"index":8,
			"inputs":{
				"variables":[
					{
						"source":"{{ n_1pqbV.outputs.conversation_history }}",
						"value":{
							"source":"{{ _g8d29.outputs.result.conversation_history }}",
							"ua:type":"mappedArray",
							"items":"{{ _g8d29.outputs.result.conversation_history[0] }}"
						}
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":506,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_b01QU-1",
			"id":"n_eJmlP",
			"index":9,
			"inputs":{
				"result":{
					"conversation_history":{
						"source":"{{ n_1pqbV.outputs.conversation_history }}",
						"ua:type":"mappedArray",
						"items":"{{ n_1pqbV.outputs.conversation_history[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":-1,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":7
}
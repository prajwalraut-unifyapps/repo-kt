{
	"appsUsed":[
		"mongo"
	],
	"createdTime":1759214469748,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_G7hjk",
			"priority":0,
			"skip":false,
			"toNodeId":"n_vv6NA",
			"type":"next"
		},
		{
			"fromNodeId":"n_vv6NA",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Aao7i",
			"type":"next"
		},
		{
			"fromNodeId":"n_Aao7i",
			"priority":0,
			"skip":false,
			"toNodeId":"FUK1t",
			"type":"next"
		},
		{
			"fromNodeId":"FUK1t",
			"priority":0,
			"skip":false,
			"toNodeId":"GIKeN",
			"type":"next"
		}
	],
	"id":"68db7b851ef9aa7d26781da5",
	"lastModifiedBy":155341,
	"lcName":"tesatpptpdf",
	"modifiedTime":1759222000726,
	"name":"tesatpptpdf",
	"nodes":[
		{
			"context":{
				"appName":"schedule",
				"resourceVersion":814,
				"resourceName":"schedule_default"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Ssznf-1",
			"id":"n_G7hjk",
			"index":1,
			"inputs":{
				"cron":"INTERVAL",
				"sequential":false,
				"interval":15,
				"frequency":"MINUTES"
			},
			"skip":false,
			"subTitle":"Schedule",
			"title":"New recurring event",
			"trigger":{
				"type":"SCHEDULED"
			},
			"type":"START"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":82,
				"resourceName":"code_by_unifyapps_javascript",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Ssznf-1",
			"id":"n_vv6NA",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"mongoCurrentFromDate":{
							"type":"string",
							"title":"mongoCurrentFromDate"
						},
						"mongoCurrentToDate":{
							"type":"string",
							"title":"mongoCurrentToDate"
						},
						"mongoLmtdFromDate":{
							"type":"string",
							"title":"mongoLmtdFromDate"
						},
						"mongoLmtdToDate":{
							"type":"string",
							"title":"mongoLmtdToDate"
						},
						"sqlFromDate":{
							"type":"string",
							"title":"sqlFromDate"
						},
						"sqlToDate":{
							"type":"string",
							"title":"sqlToDate"
						},
						"commitmentDate":{
							"type":"string",
							"title":"commitmentDate"
						},
						"schedulerDay":{
							"type":"string",
							"title":"schedulerDay"
						}
					},
					"additionalProperties":false,
					"required":[
						"commitmentDate",
						"schedulerDay"
					]
				},
				"code":"const dateUtils = {\n    // Get current date\n    now: () => new Date(),\n    \n    // Format date to YYYY-MM-DD\n    format: (date, format = 'YYYY-MM-DD') => {\n        const d = new Date(date);\n        const year = d.getFullYear();\n        const month = String(d.getMonth() + 1).padStart(2, '0');\n        const day = String(d.getDate()).padStart(2, '0');\n        return `${year}-${month}-${day}`;\n    },\n    \n    // Get date from string\n    parse: (dateString) => new Date(dateString),\n    \n    // Get day of month\n    getDate: (date) => new Date(date).getDate(),\n    \n    // Get last day of month\n    getLastDayOfMonth: (date) => {\n        const d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth() + 1, 0).getDate();\n    },\n    \n    // Get start of month\n    startOfMonth: (date) => {\n        const d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth(), 1);\n    },\n    \n    // Get end of month\n    endOfMonth: (date) => {\n        const d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth() + 1, 0);\n    },\n    \n    // Add/subtract months\n    addMonths: (date, months) => {\n        const d = new Date(date);\n        d.setMonth(d.getMonth() + months);\n        return d;\n    },\n    \n    // Check if date is after another date\n    isAfter: (date1, date2) => new Date(date1) > new Date(date2),\n    \n    // Check if date is before another date\n    isBefore: (date1, date2) => new Date(date1) < new Date(date2),\n    \n    // Check if dates are same day\n    isSameDay: (date1, date2) => {\n        const d1 = new Date(date1);\n        const d2 = new Date(date2);\n        return d1.getFullYear() === d2.getFullYear() &&\n               d1.getMonth() === d2.getMonth() &&\n               d1.getDate() === d2.getDate();\n    },\n     // Format date to MongoDB ISOString format (start of day)\n    formatToMongoFromDate: (date) => {\n        const d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0, 0).toISOString();\n    },\n    \n    // Format date to MongoDB ISOString format (end of day)\n    formatToMongoToDate: (date) => {\n        const d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59, 999).toISOString();\n    },\n};\nconst  currentDate = new Date()\nconst lastMonth = dateUtils.addMonths(currentDate, -1);\nconst daysInLastMonth = dateUtils.getLastDayOfMonth(lastMonth);\nconst endDayForLastMonth = Math.min(dateUtils.getDate(currentDate), daysInLastMonth);\n\nconst lastMonthStart = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1);\nconst lastMonthEnd = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), endDayForLastMonth);\nconst threeDayStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 2);\nconst threeDayEnd = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());\nconst commitmentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).toISOString().split('T')[0];\nconst schedulerDay = currentDate.getDate();\n\nresult = {\n    \"mongoCurrentFromDate\": dateUtils.formatToMongoFromDate(new Date(currentDate.getFullYear(), currentDate.getMonth(), 1)),\n    \"mongoCurrentToDate\":dateUtils.formatToMongoToDate(currentDate),\n    \"mongoLmtdFromDate\": dateUtils.formatToMongoFromDate(lastMonthStart),\n    \"mongoLmtdToDate\":dateUtils.formatToMongoToDate(lastMonthEnd),\n    \"sqlFromDate\": `${dateUtils.format(threeDayStart)} 00:00:00`,\n    \"sqlToDate\": `${dateUtils.format(threeDayEnd)} 23:59:59`,\n    \"commitmentDate\": commitmentDate,\n    \"schedulerDay\": schedulerDay,\n    \"campaignDays\":{{ n_EalEd.outputs.objects[0].properties.campaignDays }}\n}",
				"isAsync":false
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"global":false
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Javascript",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":80,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Ssznf-1",
			"id":"n_Aao7i",
			"index":3,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"BottomsUpResponse":{
							"type":"number",
							"title":"BottomsUpResponse"
						},
						"GrowthLMTD":{
							"type":"number",
							"title":"GrowthLMTD"
						},
						"LeadsLast3Days":{
							"type":"number",
							"title":"LeadsLast3Days"
						},
						"ContestOptin":{
							"type":"number",
							"title":"ContestOptin"
						},
						"CurrentBooking":{
							"type":"integer",
							"title":"CurrentBooking"
						},
						"LastBooking":{
							"type":"integer",
							"title":"LastBooking"
						}
					},
					"required":[
						"CurrentBooking",
						"LastBooking"
					]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"BottomsUpResponse":{
							"type":"number",
							"title":"BottomsUpResponse"
						},
						"GrowthLMTD":{
							"type":"number",
							"title":"GrowthLMTD"
						},
						"LeadsLast3Days":{
							"type":"number",
							"title":"LeadsLast3Days"
						},
						"ContestOptin":{
							"type":"number",
							"title":"ContestOptin"
						},
						"CurrentBooking":{
							"type":"integer",
							"title":"CurrentBooking"
						},
						"LastBooking":{
							"type":"integer",
							"title":"LastBooking"
						}
					},
					"required":[
						"CurrentBooking",
						"LastBooking"
					]
				}
			},
			"skip":true,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":59,
				"resourceName":"utility_by_unifyapps_to_json_object",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_Ssznf-1",
			"id":"FUK1t",
			"index":4,
			"inputs":{
				"jsonSchema":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"pipeline"
					],
					"properties":{
						"pipeline":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Pipeline"
						}
					}
				},
				"jsonString":"{\n  \"pipeline\": [\n    {\n      \"$match\": { \"isActive\": true }\n    },\n    {\n      \"$sort\": { \"created\": -1 }\n    },\n    {\n      \"$limit\": 10\n    }\n  ]\n}"
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Deserialise string to JSON object",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"mongo",
				"resourceVersion":122,
				"connectionId":"67592611b73f613be2e69429",
				"resourceName":"mongodb_aggregate_documents",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Ssznf-1",
			"id":"GIKeN",
			"index":5,
			"inputs":{
				"pipeline":{
					"source":"{{ FUK1t.outputs.result.pipeline }}",
					"ua:type":"mappedArray",
					"items":"{{ FUK1t.outputs.result.pipeline }}"
				},
				"objectSourceResourceName":"mongodb_fetch_collection_information",
				"collection":"testLoadCollection"
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Commitment Response",
			"title":"Aggregate documents in MongoDB collection",
			"type":"ACTION"
		}
	],
	"ownerUserId":155543,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":9
}
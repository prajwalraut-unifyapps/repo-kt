{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1748544434687,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1758655335253,
		"deployedBy":0,
		"deployedDefinitionId":"68d2f36738757c179b12326c",
		"status":"DEPLOYED",
		"version":45,
		"workflowVersion":106
	},
	"edges":[
		{
			"fromNodeId":"hN9a4",
			"priority":0,
			"skip":false,
			"toNodeId":"qJOCq",
			"type":"next"
		},
		{
			"fromNodeId":"qJOCq",
			"priority":0,
			"skip":false,
			"toNodeId":"FoQn2",
			"type":"next"
		},
		{
			"fromNodeId":"FoQn2",
			"priority":0,
			"skip":false,
			"toNodeId":"JFlfj",
			"type":"next"
		},
		{
			"fromNodeId":"JFlfj",
			"priority":0,
			"skip":false,
			"toNodeId":"k5xTZ",
			"type":"loop"
		},
		{
			"fromNodeId":"k5xTZ",
			"priority":0,
			"skip":false,
			"toNodeId":"Syst4",
			"type":"next"
		},
		{
			"fromNodeId":"Syst4",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"JFlfj",
			"type":"next"
		},
		{
			"fromNodeId":"JFlfj",
			"priority":0,
			"skip":false,
			"toNodeId":"2tsl1",
			"type":"next"
		},
		{
			"fromNodeId":"2tsl1",
			"priority":0,
			"skip":false,
			"toNodeId":"c5tFI",
			"type":"next"
		},
		{
			"fromNodeId":"c5tFI",
			"priority":0,
			"skip":false,
			"toNodeId":"xQ327",
			"type":"next"
		},
		{
			"fromNodeId":"xQ327",
			"priority":0,
			"skip":false,
			"toNodeId":"fDWCb",
			"type":"next"
		},
		{
			"fromNodeId":"fDWCb",
			"priority":0,
			"skip":false,
			"toNodeId":"k0Csn",
			"type":"next"
		},
		{
			"fromNodeId":"k0Csn",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"eP3GW",
			"type":"if"
		},
		{
			"fromNodeId":"eP3GW",
			"priority":0,
			"skip":false,
			"toNodeId":"6mTR0",
			"type":"next"
		},
		{
			"fromNodeId":"k0Csn",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"6mTR0",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"683191ff4c1192163379ba70",
	"lastModifiedBy":-1,
	"lcName":"de-duplication (hybrid) | graphrag",
	"modifiedTime":1759243524006,
	"name":"De-Duplication (Hybrid) | GraphRAG",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"hN9a4",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"status":{
							"type":"string",
							"title":"Status"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"nodeIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Node Ids"
						},
						"graphId":{
							"type":"string",
							"title":"Graph Id"
						},
						"dedupThreshold":{
							"type":"number",
							"title":"Dedup Threshold",
							"default":"0.98"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.nodeIds.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":391,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"qJOCq",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"finalNodeIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Final Node Ids"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"nodeIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Node Ids"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"// Make the list of node ids unique\nreturn [\n  finalNodeIds: nodeIds.unique()\n]",
				"parameters":{
					"nodeIds":{
						"source":"{{ hN9a4.outputs.nodeIds }}",
						"ua:type":"mappedArray",
						"items":"{{ hN9a4.outputs.nodeIds[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Get unique node ids",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":376,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"FoQn2",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object",
									"properties":{
										"node_id":{
											"type":"string",
											"title":"node_id"
										},
										"neighbours":{
											"type":"array",
											"items":{
												"type":"string"
											},
											"title":"neighbours"
										}
									},
									"additionalProperties":false,
									"required":[]
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray",
					"items":{
						"node_id":"dummy230719"
					}
				},
				"ua:title":"nnMap",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"nnMap",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"node_id":{
										"type":"string",
										"title":"node_id"
									},
									"neighbours":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"neighbours"
									}
								},
								"required":[]
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Nearest Neighbours Map",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":375,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"JFlfj",
			"index":0,
			"inputs":{
				"repeatMode":"BATCH",
				"listSource":"{{ qJOCq.outputs.result.finalNodeIds }}",
				"captureIterations":false,
				"batchSize":50
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":373,
				"resourceName":"callables_call_automation_batch",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"JFlfj@gV50U-1@l",
			"id":"k5xTZ",
			"index":0,
			"inputs":{
				"automationId":"6832f64c6c5f5f5ca5fab162",
				"runtimeConnections":{},
				"synchronous":true,
				"parametersList":{
					"ua:type":"mappedArray",
					"items":{
						"item":"{{ JFlfj.outputs.item[0] }}",
						"dedupThreshold":0.825
					},
					"source":"{{ JFlfj.outputs.item }}"
				},
				"version":"-1"
			},
			"skip":false,
			"subTitle":"Fetch Neighbours for Node",
			"title":"Call automation (batch)",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemsToAdd.items.node_id",
					"root.itemsToAdd.items.neighbours.items"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":369,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"JFlfj@gV50U-1@l",
			"id":"Syst4",
			"index":0,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ k5xTZ.outputs.result }}",
					"items":{
						"neighbors":{
							"source":"{{ k5xTZ.outputs.result[0].neighbours }}",
							"ua:type":"mappedArray",
							"items":"{{ k5xTZ.outputs.result[0].neighbours[0] }}"
						},
						"node_id":"{{ k5xTZ.outputs.result[0].cur_node_id }}",
						"neighbours":{
							"source":"{{ k5xTZ.outputs.result[0].neighbours }}",
							"ua:type":"mappedArray",
							"items":"{{ k5xTZ.outputs.result[0].neighbours[0] }}"
						}
					}
				},
				"listName":"{{ FoQn2.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Neighbours",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.nnMap.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":378,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"2tsl1",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"cypher_query":{
							"type":"string",
							"title":"Cypher Query"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"nnMap":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Nn Map"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"code":"# tldr; This code uses DSU to find undeleted parents and then merges pairs of nodes.\n\nimport json\nfrom typing import List, Dict, Set, Tuple\n\n\ndef generate_rendered_bulk_merge_cypher(nnMap: List[Dict[str, object]]) -> str:\n    # ------------------------------------------------------------------\n    # 1. collect all raw pairs  keep-id , dup-id\n    # ------------------------------------------------------------------\n    raw_pairs: List[Tuple[int, int]] = []\n\n    def to_int(s):\n        try:\n            return int(s)\n        except (ValueError, TypeError):\n            return None\n\n    for entry in nnMap:\n        keep_id = to_int(entry.get(\"node_id\"))\n        if keep_id is None:\n            continue  # skip dummies\n\n        dup_lists = []\n        if \"neighbours\" in entry:\n            dup_lists.append(entry[\"neighbours\"])\n        if \"neighbors\" in entry:\n            dup_lists.append(entry[\"neighbors\"])\n\n        for lst in dup_lists:\n            for dup in lst:\n                dup_id = to_int(dup)\n                if dup_id is not None:\n                    raw_pairs.append((keep_id, dup_id))\n\n    # ------------------------------------------------------------------\n    # 2. parent map  dup -> first keep   (smallest id wins)\n    # ------------------------------------------------------------------\n    raw_pairs.sort(key=lambda x: x[0])\n    parent: Dict[int, int] = {}\n    for keep, dup in raw_pairs:\n        parent.setdefault(dup, keep)\n\n    # ------------------------------------------------------------------\n    # 3. find ultimate root for every duplicate\n    # ------------------------------------------------------------------\n    from functools import lru_cache\n    @lru_cache(maxsize=None)\n    def find_root(n: int) -> int:\n        while n in parent:\n            n = parent[n]\n        return n\n\n    final_pairs: List[Tuple[int, int]] = [(find_root(dup), dup) for dup in parent]\n\n    seen: Set[Tuple[int, int]] = set()\n    uniq_pairs: List[Tuple[int, int]] = []\n    for k, d in final_pairs:\n        if (k, d) not in seen:\n            uniq_pairs.append((k, d))\n            seen.add((k, d))\n\n    # ------------------------------------------------------------------\n    # 4. render to Cypher\n    # ------------------------------------------------------------------\n    pairs_cypher = \"[\" + \", \".join(f\"[{k}, {d}]\" for k, d in uniq_pairs) + \"]\"\n\n    merge_cfg = {\n        \"properties\": {\n            \"sourceChunkID\": \"union\",\n            \"type\": \"last\",\n            \"name\": \"last\",\n            \"description\": \"concat\",\n        },\n        \"concatSeparator\": \"\\n\",\n        \"mergeRels\": True,\n    }\n\n    def dict_to_cypher_map(d):\n        if isinstance(d, dict):\n            return \"{\" + \", \".join(f\"{k}: {dict_to_cypher_map(v)}\" for k, v in d.items()) + \"}\"\n        elif isinstance(d, str):\n            quote_replace = d.replace(\"'\", \"\\\\'\")\n            return f\"'{quote_replace}'\"\n        elif isinstance(d, bool):\n            return \"true\" if d else \"false\"\n        else:\n            return str(d)\n\n    merge_cfg_cypher = dict_to_cypher_map(merge_cfg)\n\n    cypher = (\n        f\"UNWIND {pairs_cypher} AS p \"\n        \"MATCH (keep) WHERE id(keep) = p[0] \"\n        \"MATCH (dup)  WHERE id(dup)  = p[1] \"\n        \"WITH keep, dup, p \"               # <-- keep p in scope!\n        f\"CALL apoc.refactor.mergeNodes([keep, dup], {merge_cfg_cypher}) \"\n        \"YIELD node AS merged \"\n        \"RETURN collect(p[1]) AS deletedDupNodeIds\"\n    )\n\n    return cypher\n\n\n# ------------- example -------------------------------------------------\n# dummy: Use this for testing without affecting dbs\n# \"parameters\": {\n#     \"nnMap\": [\n#       {\n#         \"node_id\": \"132342\",\n#         \"neighbours\": [\n#           \"1234193\",\n#           \"1423419\"\n#         ]\n#       },\n#       {\n#         \"node_id\": \"1423419\",\n#         \"neighbours\": [\n#           \"1423418\",\n#           \"1423416\"\n#         ]\n#       }\n#     ]\n#   }\n\ncypher_query = generate_rendered_bulk_merge_cypher(nnMap)\nresult = {\"cypher_query\": cypher_query}\n# print(json.dumps(result, indent=2))",
				"isAsync":false,
				"parameters":{
					"nnMap":{
						"source":"{{ FoQn2.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ FoQn2.outputs.items[0] }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Merge Duplicate Nodes Query",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.nnMap.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"c5tFI",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"cypher_query":{
							"type":"string",
							"title":"cypher_query"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"nnMap":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"nnMap"
						}
					},
					"additionalProperties":false
				},
				"compile_static":false,
				"code":"// tldr; This code uses DSU to find undeleted parents and then merges pairs of nodes.\n\n// import groovy.json.JsonOutput\n\n// Get input from binding\ndef nnMap = binding.hasVariable(\"nnMap\") ? binding.getVariable(\"nnMap\") : []\n\n// ------------------------------------------------------------------\n// 1. collect all raw pairs  keep-id , dup-id\n// ------------------------------------------------------------------\ndef raw_pairs = []\n\n// Helper for int conversion\ndef to_int = { s ->\n    try {\n        return s as Integer\n    } catch (Exception e) {\n        return null\n    }\n}\n\nfor (entry in nnMap) {\n    def keep_id = to_int(entry.get(\"node_id\"))\n    if (keep_id == null) {\n        continue // skip dummies\n    }\n\n    def dup_lists = []\n    if (entry.containsKey(\"neighbours\")) {\n        dup_lists << entry[\"neighbours\"]\n    }\n    if (entry.containsKey(\"neighbors\")) {\n        dup_lists << entry[\"neighbors\"]\n    }\n\n    for (lst in dup_lists) {\n        for (dup in lst) {\n            def dup_id = to_int(dup)\n            if (dup_id != null) {\n                raw_pairs << [keep_id, dup_id]\n            }\n        }\n    }\n}\n\n// ------------------------------------------------------------------\n// 2. parent map  dup -> first keep   (smallest id wins)\n// ------------------------------------------------------------------\nraw_pairs.sort { a, b -> a[0] <=> b[0] }\ndef parent = [:]\nfor (pair in raw_pairs) {\n    def (keep, dup) = pair\n    if (!parent.containsKey(dup)) {\n        parent[dup] = keep\n    }\n}\n\n// ------------------------------------------------------------------\n// 3. find ultimate root for every duplicate\n// ------------------------------------------------------------------\ndef find_root_memo = [:]\ndef find_root\nfind_root = { n ->\n    if (find_root_memo.containsKey(n)) return find_root_memo[n]\n    def orig = n\n    while (parent.containsKey(n)) {\n        n = parent[n]\n    }\n    find_root_memo[orig] = n\n    return n\n}\n\ndef final_pairs = parent.keySet().collect { dup -> [find_root(dup), dup] }\n\ndef seen = new HashSet()\ndef uniq_pairs = []\nfor (p in final_pairs) {\n    def k = p[0]\n    def d = p[1]\n    def pair_tuple = [k, d]\n    if (!seen.contains(pair_tuple)) {\n        uniq_pairs << pair_tuple\n        seen << pair_tuple\n    }\n}\n\n// ------------------------------------------------------------------\n// 4. render to Cypher\n// ------------------------------------------------------------------\ndef pairs_cypher = \"[\" + uniq_pairs.collect { p -> \"[${p[0]}, ${p[1]}]\" }.join(\", \") + \"]\"\n\ndef merge_cfg = [\n    \"properties\": [\n        \"sourceChunkID\": \"union\",\n        \"type\"        : \"last\",\n        \"name\"        : \"last\",\n        \"description\" : \"concat\"\n    ],\n    \"concatSeparator\": \"\\n\",\n    \"mergeRels\"     : true\n]\n\n// Recursive dict-to-cypher-style formatter (keep comments from Python)\ndef dict_to_cypher_map\ndict_to_cypher_map = { d ->\n    if (d instanceof Map) {\n        return '{' + d.collect { k, v -> \"${k}: ${dict_to_cypher_map(v)}\" }.join(', ') + '}'\n    } else if (d instanceof String) {\n        def quote_replace = d.replaceAll(\"'\", \"\\\\\\\\'\")\n        return \"'${quote_replace}'\"\n    } else if (d instanceof Boolean) {\n        return d ? \"true\" : \"false\"\n    } else {\n        return d.toString()\n    }\n}\n\ndef merge_cfg_cypher = dict_to_cypher_map(merge_cfg)\n\ndef cypher =\n    \"UNWIND ${pairs_cypher} AS p \" +\n    \"MATCH (keep) WHERE id(keep) = p[0] \" +\n    \"MATCH (dup)  WHERE id(dup)  = p[1] \" +\n    \"WITH keep, dup, p \" +               // <-- keep p in scope!\n    \"CALL apoc.refactor.mergeNodes([keep, dup], ${merge_cfg_cypher}) \" +\n    \"YIELD node AS merged \" +\n    \"RETURN collect(p[1]) AS deletedDupNodeIds\"\n\ndef result = [\"cypher_query\": cypher.toString()]\n// No print statement; return result or assign to a variable if needed.",
				"parameters":{
					"nnMap":{
						"source":"{{ FoQn2.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ FoQn2.outputs.items[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Merge Duplicate Nodes Query",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":278,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"xQ327",
			"index":0,
			"inputs":{
				"automationId":"67a9e903bdf95a2dab1df8cb",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"cypherQuery":"{{ c5tFI.outputs.result.cypher_query }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Neo4j: Merge Duplicates",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.neo4jOutput.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":378,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"fDWCb",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"deletedIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Deleted Ids"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"neo4jOutput":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"neo4jOutput"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def deletedIds = neo4jOutput[0]['deletedDupNodeIds']\n\ndef result = [\n    deletedIds: deletedIds\n]\n\nreturn result",
				"parameters":{
					"neo4jOutput":{
						"source":"{{ xQ327.outputs.blocks }}",
						"ua:type":"mappedArray",
						"items":"{{ xQ327.outputs.blocks[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":370,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"k0Csn",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ fDWCb.outputs.result.deletedIds }})",
						"filter":{
							"operator":"GT",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":374,
				"resourceName":"storage_by_unifyapps_delete_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"k0Csn@gV50U-1@y",
			"id":"eP3GW",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"IN",
								"value":"{{ fDWCb.outputs.result.deletedIds }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"graph_rag_node_vector_store",
				"numberOfRecordsToDelete":"MULTIPLE",
				"page":{
					"limit":1000,
					"offset":0
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Delete node ids",
			"title":"Delete records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gV50U-1",
			"id":"6mTR0",
			"index":0,
			"inputs":{
				"result":{
					"status":"ok"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1728,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"GraphRAG"
	],
	"version":107
}
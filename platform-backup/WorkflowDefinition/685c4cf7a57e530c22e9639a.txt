{
	"appsUsed":[
		
	],
	"createdTime":1758977329653,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1758977331235,
		"deployedBy":23949,
		"deployedDefinitionId":"68d7dd32f1a8bd727046e733",
		"status":"DEPLOYED",
		"version":1,
		"workflowVersion":47
	},
	"edges":[
		{
			"fromNodeId":"NVLFE",
			"priority":0,
			"skip":false,
			"toNodeId":"VWheD",
			"type":"next"
		},
		{
			"fromNodeId":"VWheD",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"1zFqM",
			"type":"if"
		},
		{
			"fromNodeId":"1zFqM",
			"priority":0,
			"skip":false,
			"toNodeId":"KP9cp",
			"type":"next"
		},
		{
			"fromNodeId":"VWheD",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"KP9cp",
			"type":"next"
		},
		{
			"fromNodeId":"KP9cp",
			"priority":0,
			"skip":false,
			"toNodeId":"jX1S4",
			"type":"next"
		},
		{
			"fromNodeId":"jX1S4",
			"priority":0,
			"skip":false,
			"toNodeId":"e7Gnr",
			"type":"next"
		},
		{
			"fromNodeId":"e7Gnr",
			"priority":0,
			"skip":false,
			"toNodeId":"L2sH0",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"EXPORT_AS_TEMPLATE",
					"A",
					"C",
					"S",
					"VI",
					"D",
					"TEST",
					"VIEW_RUNS",
					"E",
					"V",
					"VS",
					"DEP"
				],
				"principalIds":[
					"67a1a7856d555959c8608546"
				],
				"principalType":"USER_GROUPS"
			}
		]
	},
	"id":"685c4cf7a57e530c22e9639a",
	"lastModifiedBy":23949,
	"lcName":"publish tool form via interface (copy)",
	"modifiedTime":1759924514416,
	"name":"Publish tool Form Via interface (copy)",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"NVLFE",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"response":{
							"type":"string",
							"title":"Response"
						}
					},
					"additionalProperties":false,
					"required":[
						"response"
					],
					"dynamic":true
				},
				"setup":{
					"type":"object",
					"properties":{
						"description":{
							"type":"string",
							"title":"Description"
						},
						"onSubmitMessage":{
							"type":"string",
							"title":"On Submit Message"
						},
						"title":{
							"type":"string",
							"title":"Title"
						},
						"field":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"type":{
										"type":"string",
										"title":"Type"
									},
									"options":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Options"
									},
									"key":{
										"type":"string",
										"title":"Key"
									},
									"title":{
										"type":"string",
										"title":"Title"
									},
									"format":{
										"type":"string",
										"title":"Format"
									},
									"controlVisibility":{
										"type":"boolean",
										"title":"Control Visibility"
									},
									"dependencies":{
										"type":"object",
										"properties":{
											"conditions":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"key":{
															"type":"string",
															"title":"key"
														},
														"expression":{
															"type":"string",
															"title":"expression"
														},
														"values":{
															"type":"array",
															"items":{
																"type":"string"
															},
															"title":"values"
														}
													},
													"additionalProperties":false,
													"required":[]
												},
												"title":"conditions"
											},
											"operator":{
												"type":"string",
												"title":"Operator"
											}
										},
										"additionalProperties":false,
										"required":[]
									},
									"foreignKey":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Foreign Key"
									}
								},
								"additionalProperties":false,
								"required":[
									"type",
									"options",
									"key",
									"title",
									"format"
								]
							},
							"title":"Fields"
						}
					},
					"additionalProperties":false,
					"required":[
						"description",
						"field"
					]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":19,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"VWheD",
			"index":2,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ NVLFE.outputs.field }})",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":19,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"VWheD@4ZR9C-1@y",
			"id":"1zFqM",
			"index":3,
			"inputs":{
				"result":{
					"response":"could not find any form fields"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.fields.items.dependencies",
					"root.parameters.fields.items.controlVisibility",
					"root.parameters.fields.items.foreignKey"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":119,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"KP9cp",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"pageInputs"
					],
					"properties":{
						"pageInputs":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Page Inputs"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"fields"
					],
					"properties":{
						"fields":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"type":{
										"type":"string",
										"title":"Type"
									},
									"key":{
										"type":"string",
										"title":"Key"
									},
									"options":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Options"
									},
									"format":{
										"type":"string",
										"title":"Format"
									},
									"title":{
										"type":"string",
										"title":"Title"
									},
									"dependencies":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"required":[]
									},
									"controlVisibility":{
										"type":"boolean",
										"title":"Control Visibility"
									},
									"foreignKey":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Foreign Key"
									}
								},
								"additionalProperties":false,
								"required":[
									"type",
									"key",
									"options",
									"format",
									"title"
								]
							},
							"title":"Fields"
						},
						"onSubmitMessage":{
							"type":"string",
							"title":"On Submit Message"
						},
						"title":{
							"type":"string",
							"title":"Title"
						},
						"description":{
							"type":"string",
							"title":"Description"
						}
					}
				},
				"code":"import java.util.UUID\n\nif (!binding.hasVariable('fields')) {\n  return [\"coPilotBlocks\": []]\n}\n\n\n\ndef getProperty(field) {\n    def property = [\n        title: field.title,\n        type : mapType(field.type)\n    ]\n    \n    switch(field.type?.toUpperCase()) {\n        case \"DROPDOWN\":\n        case \"DROP-DOWN\":\n        case \"SELECT\":\n        case \"SINGLE_SELECT\":\n        case \"SINGLE-SELECT\":\n            property.type = \"string\"\n            property.oneOf = getOptions(field.options)\n            property.searchType = \"ICONTAINS\"\n            break\n        case \"MULTI-SELECT\":\n        case \"MULTISELECT\":\n        case \"MULTI_SELECT\":\n            property.type = \"array\"\n            property.searchType = \"ICONTAINS\"\n            property.items = [\n                type: \"string\",\n                oneOf: getOptions(field.options)\n            ]\n            break\n        case \"DATE\":\n            property.type = \"string\"\n            property.format = \"date\"\n            break\n        case \"NUMBER\":\n            property.type = \"number\"\n            break\n        case \"BOOLEAN\":\n            property.type = \"boolean\"\n            break\n        default:\n            property.type = \"string\"\n    }\n    if(field instanceof Map && field.containsKey(\"foreignKey\"))\n    {\n        property.foreignKey=field.foreignKey\n    }\n    return property\n}\n\ndef getOptions(options) {\n    if (options == null || options.isEmpty()) {\n        return []\n    }\n    def first = options[0]\n    if (first instanceof Map && first.containsKey('label') && first.containsKey('value')) {\n        return options.collect { opt ->\n            [const: opt.value, title: opt.label]\n        }\n    } else {\n        return options.collect { opt ->\n            [const: opt, title: opt]\n        }\n    }\n}\n\ndef mapType(type) {\n    switch (type?.toUpperCase()) {\n        case \"TEXT\":\n        case \"SELECT\":\n        case \"SINGLE_SELECT\":\n        case \"SINGLE-SELECT\":\n        case \"MULTI_SELECT\":\n        case \"MULTISELECT\":\n        case \"MULTI-SELECT\":\n        case \"DATE\":\n            return \"string\"\n        case \"NUMBER\":\n            return \"number\"\n        case \"BOOLEAN\":\n            return \"boolean\"\n        default:\n            return \"string\"\n    }\n}\n\n// Layout generator\ndef getLayout(field, isConditional = false) {\n    def layout = [\n        \"ui:placeholder\": field.placeholder ?: \"\",\n        \"ui:title\": field.title\n    ]\n    \n    if (field.type?.toUpperCase() == 'MULTI_SELECT' || field.type?.toUpperCase() == 'MULTISELECT' || field.type?.toUpperCase() == 'MULTI-SELECT') {\n        layout[\"ui:field\"] = \"MultiSelectField\"\n        if (field.foreignKey) {\n            layout[\"ui:widget\"] = \"LookupWidget\"\n            layout[\"ui:options\"] = (layout[\"ui:options\"] ?: [:]) + [\n                \"ua:payload\": [\n                    \"lookupType\": field.foreignKey.reference,\n                    \"options\":field.foreignKey.options,\n                    \"type\": \"ByQuery\"\n                ]\n            ]\n        } + (field.foreignKey.dependecies ?: [:]) \n        return layout\n    }\n    \n    switch(field.type?.toUpperCase()) {\n        case \"TEXT\":\n            layout[\"ua:fieldType\"] = \"TEXT\"\n            layout[\"ua:valueType\"] = \"single\"\n            break\n        case \"DROPDOWN\":\n        case \"DROP-DOWN\":\n        case \"SELECT\":\n        case \"SINGLE_SELECT\":\n        case \"SINGLE-SELECT\":\n            layout[\"ua:disableClearable\"] = true\n            layout[\"ua:fieldType\"] = \"SINGLE_SELECT_DROPDOWN\"\n            layout[\"ua:valueType\"] = \"single\"\n            layout[\"ui:placeholder\"] = \"Select\"\n            layout[\"ui:options\"] = [\n                \"ua:searchType\": \"ICONTAINS\",\n                \"ua:width\": \"100%\",\n                \"ua:hideTagsInDropdown\": true\n            ]\n            break\n        case \"MULTISELECT\":\n        case \"MULTI_SELECT\":\n            layout[\"ua:fieldType\"] = \"SELECT\"\n            layout[\"ua:valueType\"] = \"multiple\"\n            break\n        case \"DATE\":\n            layout[\"ua:fieldType\"] = \"DATE\"\n            layout[\"ua:valueType\"] = \"single\"\n            break\n        case \"BOOLEAN\":\n            layout[\"ua:fieldType\"] = \"BOOLEAN\"\n            layout[\"ua:valueType\"] = \"single\"\n            break\n        case \"NUMBER\":\n            layout[\"ua:fieldType\"] = \"NUMBER\"\n            layout[\"ua:valueType\"] = \"single\"\n            break\n        default:\n            layout[\"ua:fieldType\"] = \"TEXT\"\n            layout[\"ua:valueType\"] = \"single\"\n    }\n    if (field.foreignKey) {\n        layout[\"ui:widget\"] = \"LookupWidget\"\n        layout[\"ui:options\"] = (layout[\"ui:options\"] ?: [:]) + [\n            \"ua:payload\": [\n                \"lookupType\": field.foreignKey.reference,\n                \"options\":field.foreignKey.options,\n                \"type\": \"ByQuery\"\n            ]\n        ]\n    }\n    return layout\n}\n\n// Build condition structure for allOf\ndef buildCondition(condition, isRequired = true) {\n    def condStruct = [\n        properties: [\n            (condition.key): [:]\n        ]\n    ]\n    \n    // Handle different expression types\n    switch(condition.expression) {\n        case \"IN\":\n            if (condition.values?.size() == 1) {\n                condStruct.properties[condition.key][\"const\"] = condition.values[0]\n            } else {\n                // For multiple values, use anyOf with const for each value\n                return [\n                    anyOf: condition.values.collect { value ->\n                        [\n                            properties: [\n                                (condition.key): [const: value]\n                            ],\n                            required: isRequired ? [condition.key] : []\n                        ]\n                    }\n                ]\n            }\n            break\n        case \"NOT_IN\":\n            // For NOT_IN, we need to check that the value is not any of the specified values\n            return [\n                not: [\n                    anyOf: condition.values.collect { value ->\n                        [\n                            properties: [\n                                (condition.key): [const: value]\n                            ],\n                            required: isRequired ? [condition.key] : []\n                        ]\n                    }\n                ]\n            ]\n        default:\n            condStruct.properties[condition.key][\"const\"] = condition.values[0]\n    }\n    \n    if (isRequired) {\n        condStruct[\"required\"] = [condition.key]\n    }\n    \n    return condStruct\n}\n\n// Build allOf structure for conditional fields\ndef buildAllOf(conditionalFields) {\n    def allOfList = []\n    \n    conditionalFields.each { field ->\n        def fieldProp = getProperty(field)\n        def deps = field.dependencies\n        \n        def ifCondition = [:]\n        \n        if (deps.operator == \"OR\") {\n            // For OR conditions, use anyOf\n            def conditions = deps.conditions.collect { cond ->\n                buildCondition(cond, true)\n            }\n            // ifCondition = conditions.size() == 1 ? conditions[0] : [anyOf: conditions]\n        } else if (deps.operator == \"AND\") {\n            // For AND conditions, use allOf\n            def conditions = deps.conditions.collect { cond ->\n                buildCondition(cond, true)\n            }\n            ifCondition = [allOf: conditions]\n        }\n        \n        // Build the if-then structure\n        def ifThenBlock = [\n            \"if\": ifCondition,\n            \"then\": [\n                properties: [\n                    (field.key): fieldProp\n                ]\n            ]\n        ]\n        \n        allOfList.add(ifThenBlock)\n    }\n    \n    return allOfList\n}\n\n// Main processing\ndef properties = [:]\ndef required = []\ndef layouts = [ \"ui:fieldBodyClassName\": \"!gap-y-2xl\" ]\ndef conditionalFields = []\n\n// Separate conditional and non-conditional fields\nfields.each { field ->\n    if(field.controlVisibility == true && field.dependencies) {\n        conditionalFields.add(field)\n        // Add layout for conditional field\n        layouts[field.key] = getLayout(field, true)\n    } else { \n        properties[field.key] = getProperty(field)\n        layouts[field.key] = getLayout(field, false)\n    }\n}\n\n// Build allOf for conditional fields\ndef allOfList = buildAllOf(conditionalFields)\n\ndef formTitle = title\ndef submitMessage = onSubmitMessage\ndef subTitle = description\n\n// Build the jsonSchema\ndef jsonSchema = [\n    \"type\": \"object\",\n    \"properties\": properties,\n    \"required\": required\n]\n\n// Add allOf if there are conditional fields\nif (allOfList) {\n    jsonSchema[\"allOf\"] = allOfList\n}\n\ndef keys = fields.collect { it.key }\nlayouts.put(\"ui:order\", keys)\n\ndef pageInputs = [\n    \"jsonSchema\": jsonSchema,\n    \"uiSchema\": layouts,\n    \"title\" : formTitle,\n    \"submitMessage\" : submitMessage,\n    \"subTitle\" : subTitle\n]\n\nreturn [\"pageInputs\": pageInputs]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"onSubmitMessage":"{{ NVLFE.outputs.onSubmitMessage }}",
					"title":"{{ NVLFE.outputs.title }}",
					"description":"{{ NVLFE.outputs.description }}",
					"fields":{
						"ua:type":"mappedArray",
						"items":{
							"type":"{{ NVLFE.outputs.field[0].type }}",
							"key":"{{ NVLFE.outputs.field[0].key }}",
							"options":{
								"source":"{{ NVLFE.outputs.field[0].options }}",
								"ua:type":"mappedArray",
								"items":"{{ NVLFE.outputs.field[0].options }}"
							},
							"format":"{{ NVLFE.outputs.field[0].format }}",
							"title":"{{ NVLFE.outputs.field[0].title }}",
							"dependencies":"{{ NVLFE.outputs.field[0].dependencies }}",
							"controlVisibility":"{{ NVLFE.outputs.field[0].controlVisibility }}",
							"foreignKey":"{{ NVLFE.outputs.field[0].foreignKey }}"
						},
						"source":"{{ NVLFE.outputs.field }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":19,
				"resourceName":"variable_by_unifyapps_get_session_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"jX1S4",
			"index":5,
			"inputs":{
				"variableSchema":{
					"type":"object",
					"properties":{
						"caseId":{
							"type":"string",
							"title":"Case Id"
						},
						"aiAgentId":{
							"type":"string",
							"title":"Ai Agent Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Get Session Variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":394,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"e7Gnr",
			"index":6,
			"inputs":{
				"automationId":"671250dbc3a6281db1ab47af",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"waitForUserInput":"true",
					"interfaceDetails":{
						"pageId":"e_68a16d361ad773675081fa62",
						"slug":"page-3",
						"interfaceId":"convo-create-app",
						"pageInputs":"{{ KP9cp.outputs.result.pageInputs }}"
					},
					"caseId":"{{ jX1S4.outputs.caseId }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"L2sH0",
			"index":7,
			"inputs":{
				"result":{
					"response":"{{ e7Gnr.outputs.userInput }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":23949,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"version":49
}
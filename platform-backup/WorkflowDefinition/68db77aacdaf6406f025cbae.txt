{
	"appsUsed":[
		
	],
	"createdTime":1759213482808,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_zWwTH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_7doD3",
			"type":"next"
		},
		{
			"fromNodeId":"n_7doD3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ES15y",
			"type":"next"
		}
	],
	"id":"68db77aacdaf6406f025cbae",
	"lastModifiedBy":44105,
	"lcName":"dp-func-fusionintg-prod-sa",
	"modifiedTime":1759217828515,
	"name":"dp-func-fusionintg-prod-sa",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":966,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_nz9mE-1",
			"id":"n_zWwTH",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object"
						},
						"namespaces":[]
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":829,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_nz9mE-1",
			"id":"n_7doD3",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"result":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"reqBody":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Req Body"
						}
					}
				},
				"configurationMode":"MANUAL",
				"code":"import logging\nimport os\nfrom requests import Session\n\nfrom zeep import Settings\nfrom zeep.transports import Transport\nfrom zeep.wsse.username import UsernameToken\n\n# from libs.extraction_utils.APIM import APIM\n# from libs.extraction_utils.TaskInfo import TaskInfo\n# from libs.fusion_services.Schedule import Schedule\n\n\nclass Const:\n    \"\"\"\n    Constants used in Fusion extraction function app.\n    \"\"\"\n\n    session = Session()\n    session.verify = False\n\n    wsse= UsernameToken(os.getenv('FUSION_ENDPOINT_USERNAME'), os.getenv('FUSION_ENDPOINT_PASSWORD'))\n\n    # Disable SSL Verification\n    transport = Transport(timeout=1200, session=session)\n    settings = Settings(strict=False)\n\n    # Buffer Constants\n    SizeOfDataChunkDownload = -1\n    TimeoutInMinutes = 20\n    MaxBufferSize = 2147483647\n    MaxBufferPoolSize = 2147483647\n    MaxReceivedMessageSize = 2147483647\n\n    # Environment Constants\n    FusionEndPointReportURL = \"FUSION_ENDPOINT_REPORT_URL\"\n    FusionEndPointScheduleURL = \"FUSION_ENDPOINT_SCHEDULE_URL\"\n    FusionEndPointSecurityURL = \"FUSION_ENDPOINT_SECURITY_URL\"\n    FusionEndPointUserName = \"FUSION_ENDPOINT_USERNAME\"\n    FusionEndPointPassword = \"FUSION_ENDPOINT_PASSWORD\"\n    FusionEndPointTimeOutInMinutes = \"FUSION_ENDPOINT_TIMEOUT_IN_MINUTES\"\n    FusionEndPointChunkSizeInMb = \"FUSION_ENDPOINT_CHUNK_SIZE_IN_MB\"\n    FusionHostName = \"FUSION_HOSTNAME\"\n\n    StagingDBConnectionString = \"STAGING_DB_CONNECTION_STRING\"\n\n    # Datalake Constants\n    DataLakeAccount = 'DATA_LAKE_ACCOUNT'\n    DataLakeAccountKey = \"DATA_LAKE_ACCOUNT_KEY\"\n    DataLakeAccountFileSystem = \"DATA_LAKE_ACCOUNT_FILE_SYSTEM\"\n\n    FTPServerName = \"FTP_SERVER_NAME\"\n    FTPUserName = \"FTP_USER_NAME\"\n    FTPPassword = \"FTP_PASSWORD\"\n    FTPRootFolder = \"FTP_ROOT_FOLDER\"\n\n    # Function Name Constants\n    Starter = \"Starter\"\n    Orchestrator = \"Orchestrator\"\n    A_RunReportXml = \"A_RunReportXml\"\n    A_RunReportCsv = \"A_RunReportCsv\"\n    A_LoadXmlData = \"A_LoadXmlData\"\n    A_LoadCsvData = \"A_LoadCsvData\"\n    A_ExecuteMergeSp = \"A_ExecuteMergeSp\"\n    A_PerformCallback = \"A_PerformCallback\"\n    ExtractBIPFunction = \"ExtractBIPFunction\"\n    ScheduleBIPFunction = \"ScheduleBIPFunction\"\n\n    # String Constants\n    CallbackUrl = \"CallbackUrl\"\n    StrMessage = \"Starting activity {0}\"\n    Post = \"post\"\n    pipeSign = '|'\n    equalSign = '='\n    BipTypePKL = \"PKL\"\n    BipTypeAudit = \"AUDIT\"\n    BipTypeData = \"DATA\"\n    Xml = \"xml\"\n    Csv = \"csv\"\n    Json = \"json\"\n    XmlRootElement = \"DATA_DS\"\n    ReportSchedularPrefix = \"DP_Schedular_\"\n\n    # SQL Constants\n    # SQL Parameters\n    BipId = \"@BipId\"\n    TableName = \"@TableName\"\n    BipType = \"@BipType\"\n    PKLExtractionStatus = \"@PKLExtractionStatus\"\n    ExtactionStatus = \"@ExtactionStatus\"\n    LastExtactionDate = \"@LastExtactionDate\"\n    LastModifiedDate = \"@LastModifiedDate\"\n    MethodName = \"@MethodName\"\n    ChunkNumber = \"@ChunkNumber\"\n    IngestionStatus = \"@IngestionStatus\"\n    FailLogMessage = \"@Message\"\n    Status = \"@Status\"\n    DataSize = \"@DataSize\"\n\n    XmlDocumentHeader = \"<?xml version=\\\"1.0\\\" standalone=\\\"yes\\\"?>\"\n    # SQL Queries\n    SQLSelectTopOne = \"SELECT TOP 1 * FROM \"\n    SQLTruncateTable = \"TRUNCATE TABLE \"\n    PKLTablePrefix = \"stg.PKL_STG_FU_\"\n    TEMPTablePrefix = \"stg.TEMP_STG_FU_\"\n    ConnectionTimeout = 1200\n\n    # SQL SPs\n    # LoadXmlSPName = \"[dbo].[USP_LOAD_FUSION_XML_DATA]\"\n\n    ConfigurationStatusUpdateSPName = \"[config].[USP_UPDATE_FUSION_BIP_REPORT_CONFIGURATION_STATUS] \" \\\n                                      \"@BipId = ? \"\\\n                                      \",@PKLExtractionStatus = ?\"\\\n                                      \",@ExtactionStatus = ?\"\\\n                                      \",@LastExtactionDate = ?\"\\\n                                      \",@LastModifiedDate = ?\"\\\n                                      \",@IngestionStatus = ?\"\n\n    ExecutionLogSPName = \"[audit].[USP_INSERT_FUSION_BIP_REPORT_EXTRACTION_EXECUTION_LOG] \"\\\n                         \"@BipId = ?\" \\\n                         \",@ChunkNumber = ?\" \\\n                         \",@BipType = ?\" \\\n                         \",@MethodName = ? \" \\\n                         \",@Status = ?\" \\\n                         \",@DataSize = ?\" \\\n                         \",@Message = ?\"\n    \n    ReportExecutionLogInsertSPName = \"[audit].[USP_INSERT_FUSION_BIP_REPORT_EXECUTION_LOG] \"\\\n                                     \"@BIP_ENTITY_ID = ?\" \\\n                                     \",@BIP_JOB_ID = ?\" \\\n                                     \",@BIP_TYPE = ?\" \\\n                                     \",@BIP_STATUS = ? \" \\\n                                     \",@BIP_EXECUTION_START_TIME = ?\"\n    \n    ReportExecutionLogUpdateSPName = \"[audit].[USP_UPDATE_FUSION_BIP_REPORT_EXECUTION_LOG] \"\\\n                                     \"@BIP_ENTITY_ID = ?\" \\\n                                     \",@BIP_JOB_ID = ?\" \\\n                                     \",@BIP_STATUS = ? \" \\\n                                     \",@BIP_EXECUTION_END_TIME = ?\" \\\n                                     \",@EXCEPTION_MESSAGE = ?\"\n\n    ErrorLogSPName = \"[config].[USP_SET_FUSION_BIP_REPORT_EXTACTION_STATUS] \"\\\n                        \"@BipId = ?\"\\\n                        \",@Status = ?\"\\\n                        \",@Message = ?\"\\\n                        \",@BipType = ?\"\\\n                        \",@DatalakeStagDeltaCnt = ?\"\\\n                        \",@DatalakeStagParquetCnt = ?\"\\\n                        \",@DatalakeIntgCount = ?\"\\\n                        \",@FusionDataCount = ?\"\n\n    # Status Messages Constants\n    XmlLoadSuccessMessage = \"Xml document successfully loaded into \"\n    LoadRowCount = \" with row count \"\n    XmlLoadFailedMessage = \"Xml document failed to load into \"\n    MergeSuccessMessage = \" stored procedure successfully executed.\"\n    MergeFailedMessage = \" stored procedure execution failed.\"\n    BulkInsertSuccessMessage = \"Csv data successfully insert to \"\n    BulkInsertFailMessage = \"Csv data insert failed to \"\n    ExecutionCompleted = \"Execution Completed\"\n    OK = \"OK\"\n    Error = \"ERROR : \"\n    InProgressStatus = \"IN PROGRESS\"\n    SuccessStatus = \"SUCCESS\"\n    FailedStatus = \"FAILED\"\n    SuccessStatusCode = \"SUCCESS\"\n    ErrorStatusCode = \"ERROR\"\n    InvalidRequestMsg = \"Invalid request! Please check the request format for BIP entity {0}\"\n    RequestAcceptMsg = \"Request Accepted for BIP entity {0}\"\n    FailedToUploadFile = \"Failed to upload file to datalake - \"\n    FailedToRunBipDataChunk = \"Failed to run data BIP chunk - \"\n    FailedToRunBipPkl = \"Failed to run PKL BIP - \"\n\n    # BIP Scheduler Status\n    SchedularInProgressStatus = \"In progress\"\n    SchedularSuccessStatus = \"Success\"\n    SchedularErrorStatus = \"Output has Error\"\n    SchedularFailedStatus = \"Failed\"\n    SchedularDeliveryFailedStatus = \"Delivery failed\"\n    SchedularDeliveryErrorStatus = \"Delivery has Error\"\n    ObjectReferrenceErrorMessage = \"Object reference not set to an instance of an object\"\n\n    # Data lake Constants\n    DataLakeUri = \"https://{0}.dfs.core.windows.net\"\n\n    # APIM Details\n    APIMKVEndpoint = \"APIM_KV_ENDPOINT\"\n    APIMKVCode = \"APIM_KV_CODE\"\n    APIMTokenEndpoint = \"APIM_TOKEN_ENDPOINT\"\n    APIMScheduleEndpoint = \"APIM_SCHEDULE_ENDPOINT\"\n    APIMScheduleStatusEndpoint = \"APIM_STATUS_ENDPOINT\"\n\n\nclass APIM:\n    '''\n    This class is used to handle the Fusion APIM credentials\n    '''\n\n    def __init__(self):\n        self.public_subscription_key =  None\n        self.internal_subscription_key =  None\n        self.client_id = None\n        self.client_secret = None\n        self.resource = None\n\n    def set_public_subscription_key(self, public_subscription_key):\n        self.public_subscription_key = public_subscription_key\n\n    def set_internal_subscription_key(self, internal_subscription_key):\n        self.internal_subscription_key = internal_subscription_key\n\n    def set_client_id(self, client_id):\n        self.client_id = client_id\n\n    def set_client_secret(self, client_secret):\n        self.client_secret = client_secret\n\n    def set_resource(self, resource):\n        self.resource = resource\n\n\nclass TaskInfo:\n    \"\"\"\n    This class is used for maintaining a single configuration state throughout the Function App\n\n    Attributes:\n        BipId (str)         : The BIP ID of the entity.\n        EntityName (str)    : The name of the entity.\n        BipType (str)       : The type of the BIP Report (DATA/ PKL).\n        DataLakePath (str)  : The path to the Raw data zone container associated with the entity.\n        ReportPath (str)    : The path to the BIP report.\n        ParameterList (str) : The list of BIP report parameters.\n        FileName (str)      : The name of the BIP Report.\n        FileFormat (str)    : The format of the BIP report (XML/EXCELS/CSV)\n        ChunkNumber (str)   : The chunk number of the task.\n        CallbackUrl (str)   : The callback URL for the extraction.\n        XmlData (str)       : The XML data for the task.\n        CsvData (str)       : The CSV data for the task.\n        StatusCode (str)    : The status code of the task.\n        Message (str)       : A message associated with the task.\n    \"\"\"\n\n    def __init__(self, bip_id, entity_name, bip_type, data_lake_path, report_path, parameter_list, file_name=None,\n                 file_format='XML', chunk_number=0,\n                 callback_url=None, xml_data=None, csv_data=None, status_code=None, message=None):\n        self.BipId = bip_id\n        self.EntityName = entity_name\n        self.BipType = bip_type\n        self.DataLakePath = data_lake_path\n        self.ReportPath = report_path\n        self.ParameterList = parameter_list\n        self.FileFormat = file_format.upper()\n        self.FileName = file_name\n        self.ChunkNumber = chunk_number\n        self.CallbackUrl = callback_url\n        self.XmlData = xml_data\n        self.CsvData = csv_data\n        self.StatusCode = status_code\n        self.Message = message\n\n        logging.info('Configuration object initialized.')\n\n\ndef main(req):\n    '''\n    HTTP Trigger for Schedule Data Ingestion\n    '''\n\n    logging.info('Schedule extraction function received a request.')\n\n    try:\n        req_body = req\n    except ValueError:\n        return {\n            \"status\": 400,\n            \"message\": \"Missing required request parameters.\"\n        }\n    else:\n        task_info = TaskInfo(\n                bip_id = req_body.get('BipId'),\n                chunk_number = req_body.get('ChunkNumber'),\n                entity_name = req_body.get('EntityName'),\n                report_path = req_body.get('ReportPath'),\n                parameter_list = req_body.get('ParameterList'),\n                file_name = None,\n                data_lake_path = req_body.get('DataLakePath'),\n                bip_type = req_body.get('BipType'),\n                file_format = req_body.get('FileFormat'),\n                callback_url=None,\n                xml_data=None,\n                csv_data=None,\n                status_code=None,\n                message=None)\n\n        apim_credentials = req_body.get('APIMCredentials')\n\n        apim = APIM()\n\n    #     for cred in apim_credentials:\n    #         if cred['name'] == 'Virtu-Business-Public-sub-key':\n    #             apim.set_public_subscription_key(cred['value'])\n    #         elif cred['name'] == 'Virtu-Business-Internal-sub-key':\n    #             apim.set_internal_subscription_key(cred['value'])\n    #         elif cred['name'] == 'virtuIntegrationAppClientID':\n    #             apim.set_client_id(cred['value'])\n    #         elif cred['name'] == 'virtuIntegrationAppSecret':\n    #             apim.set_client_secret(cred['value'])\n    #         elif cred['name'] == 'virtuIntegrationAppAudiance':\n    #             apim.set_resource(cred['value'])\n                        \n    #     if task_info.BipId != None:\n    #         try:\n    #             scheduler = Schedule(apim)\n\n    #             if scheduler.status == 'FAILED':\n    #                 return {\n    #                         \"status\": 400,\n    #                         \"message\":  f\"FAILED: {scheduler.message}\"\n    #                 }\n    #             else:\n    #                 schedule_job_id = scheduler.continue_schedule_bip(task_info)\n\n    #                 response = {\"ScheduleJobID\": schedule_job_id}\n\n    #                 if schedule_job_id != None:\n    #                     return {\n    #                         \"status\": 200,\n    #                         \"response\": str(response)\n    #                     }\n    #                 else:\n    #                     return {\n    #                         \"status\": 400,\n    #                         \"message\":  f\"FAILED: {scheduler.message}\"\n    #                     }\n    #         except Exception as ex:\n    #             logging.error(str(ex))\n    #     else:\n    #         return {\n    #             \"status\": 400,\n    #             \"message\": \"'BipID' is a required parameter\"\n    #         }\n    return {\n                 \"status\": 400,\n                \"message\": \"'BipID' is a required parameter\"\n            }\n\nresult = main(reqBody)\n",
				"imports":[
					"requests",
					"zeep"
				],
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"reqBody":"{{ n_zWwTH.outputs.body }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":917,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_nz9mE-1",
			"id":"n_ES15y",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"body":"{{ n_7doD3.outputs.result }}",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":44105,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		"virtusa"
	],
	"version":4
}
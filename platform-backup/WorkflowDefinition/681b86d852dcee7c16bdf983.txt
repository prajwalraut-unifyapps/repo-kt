{
	"appsUsed":[
		
	],
	"createdTime":1747641656550,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759243561184,
		"deployedBy":-1,
		"deployedDefinitionId":"68dbed295e003e08cdeb2f0e",
		"status":"DEPLOYED",
		"version":49,
		"workflowVersion":62
	},
	"edges":[
		{
			"fromNodeId":"gAVcG",
			"priority":0,
			"skip":false,
			"toNodeId":"_9MRB2",
			"type":"next"
		},
		{
			"fromNodeId":"_9MRB2",
			"priority":0,
			"skip":false,
			"toNodeId":"_yzaLF",
			"type":"next"
		},
		{
			"fromNodeId":"_yzaLF",
			"priority":0,
			"skip":false,
			"toNodeId":"_yvKuP",
			"type":"next"
		},
		{
			"fromNodeId":"_yvKuP",
			"priority":0,
			"skip":false,
			"toNodeId":"_yHf0c",
			"type":"next"
		},
		{
			"fromNodeId":"_yHf0c",
			"priority":0,
			"skip":false,
			"toNodeId":"Nx0py",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"681b86d852dcee7c16bdf983",
	"lastModifiedBy":-1,
	"lcName":"text to workflow v2 | get fillable inputs from reachable nodes",
	"modifiedTime":1759371882920,
	"name":"Text to Workflow v2 | Get Fillable Inputs from reachable nodes",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_puUvx@_DWlKr-1@1",
			"id":"gAVcG",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"metadata":{
							"type":"string",
							"title":"metadata"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"workflowDefinition":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"workflowDefinition"
						},
						"node_id":{
							"type":"string",
							"title":"node_id"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"standard_entities",
				"resourceVersion":23,
				"resourceName":"standard_entities_get_reachable_nodes_schema",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_puUvx@_DWlKr-1@1",
			"id":"_9MRB2",
			"index":0,
			"inputs":{
				"workflowDefinition":"{{ gAVcG.outputs.workflowDefinition }}",
				"nodeId":"{{ gAVcG.outputs.node_id }}"
			},
			"skip":false,
			"subTitle":"Standard entities by UnifyApps",
			"title":"Get Reachable Nodes Schema For a Node in a workflow",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{},
				"visibleOptionalFields":[
					"root.parameters.nodes.items.node_id",
					"root.parameters.nodes.items.instructions"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":92,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_puUvx@_DWlKr-1@1",
			"id":"_yzaLF",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"idToNodeMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"idToNodeMap"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"workflowJson":{
							"type":"object",
							"title":"workflowJson"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def nodesList = workflowJson.nodes\n\n// Map of node ID to node object\ndef nodesMap = nodesList.collectEntries { [(it.id): it] }\n\nreturn [\"idToNodeMap\": nodesMap]\n",
				"isAsync":false,
				"parameters":{
					"workflowJson":"{{ gAVcG.outputs.workflowDefinition }}"
				}
			},
			"skip":false,
			"subTitle":"id2Node Map",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.ancestorIds.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":51,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_puUvx@_DWlKr-1@1",
			"id":"_yvKuP",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"schema":{
										"type":"object",
										"title":"schema"
									},
									"dynamic":{
										"type":"string",
										"title":"dynamic"
									},
									"id":{
										"type":"string",
										"title":"id"
									},
									"title":{
										"type":"string",
										"title":"title"
									},
									"type":{
										"type":"string",
										"title":"type"
									}
								},
								"additionalProperties":false
							},
							"title":"nodes"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"nodeSchemaMap":{
							"type":"object",
							"title":"nodeSchemaMap"
						},
						"ancestorIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"ancestorIds"
						},
						"idToNodeMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"idToNodeMap"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"code":"nodes = []\n\nancestorIds.reverse()\n\nfor nodeId in ancestorIds:\n    if nodeId not in nodeSchemaMap:\n      continue\n    if nodeId not in idToNodeMap:\n      continue\n    nodeSchemaMap[nodeId][\"id\"] = nodeId\n    nodeSchemaMap[nodeId][\"title\"] = idToNodeMap[nodeId][\"title\"]\n    if \"schema\" not in nodeSchemaMap[nodeId]:\n      nodeSchemaMap[nodeId][\"schema\"] = {}\n    nodes.append(nodeSchemaMap[nodeId])\n\nresult = {\n  \"nodes\": nodes\n}",
				"isAsync":false,
				"parameters":{
					"nodeSchemaMap":"{{ _9MRB2.outputs.nodeSchemaMap }}",
					"ancestorIds":{
						"source":"{{ _9MRB2.outputs.reachableNodes }}",
						"ua:type":"mappedArray",
						"items":"{{ _9MRB2.outputs.reachableNodes[0] }}"
					},
					"idToNodeMap":"{{ _yzaLF.outputs.result.idToNodeMap }}"
				}
			},
			"skip":false,
			"subTitle":"Ancestor Schemas",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_puUvx@_DWlKr-1@1",
			"id":"_yHf0c",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"metadata":{
							"type":"string",
							"title":"Metadata"
						}
					},
					"additionalProperties":false,
					"required":[
						"metadata"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"data":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"data",
							"required":[]
						}
					},
					"additionalProperties":false,
					"required":[
						"data"
					]
				},
				"compile_static":false,
				"code":"def indent = \"\"\nStringBuilder output = new StringBuilder()\n\ndef appendDetails(def node, def indent) {\n    StringBuilder localOutput = new StringBuilder()\n    node.each { key, value ->\n        if (value instanceof Map) {\n            if (value.type == \"object\") {\n                localOutput.append(\"${indent} - id: ${key}\\n\")\n                localOutput.append(\"${indent}   datatype: ${value.type}\\n\")\n                if (value.containsKey(\"title\")) {\n                    localOutput.append(\"${indent}   title: ${value.title}\\n\")\n                }\n                if (value.containsKey(\"description\")) {\n                    localOutput.append(\"${indent}   description: ${value.description}\\n\")\n                }\n                if (value.containsKey(\"properties\")) {\n                    localOutput.append(\"${indent}   properties:\\n\")\n                    localOutput.append(appendDetails(value.properties, indent + \"   \"))\n                }\n            } else if (value.type == \"array\") {\n                localOutput.append(\"${indent} - id: ${key}\\n\")\n                localOutput.append(\"${indent}   datatype: ${value.type}\\n\")\n                if (value.containsKey(\"title\")) {\n                    localOutput.append(\"${indent}   title: ${value.title}\\n\")\n                }\n                if (value.containsKey(\"description\")) {\n                    localOutput.append(\"${indent}   description: ${value.description}\\n\")\n                }\n                if (value.containsKey(\"items\")) {\n                    localOutput.append(\"${indent}   items:\\n\")\n                    localOutput.append(\"${indent}     datatype (for each item in the array): ${value.items.type}\\n\")\n                    if (value.items.type == \"object\" && value.items.containsKey('properties')) {\n                        localOutput.append(\"${indent}     properties (for each object in the array):\\n\")\n                        localOutput.append(appendDetails(value.items.properties, indent + \"     \"))\n                    }\n                }\n            } else {\n                localOutput.append(\"${indent} - id: ${key}\\n\")\n                localOutput.append(\"${indent}   datatype: ${value.type}\\n\")\n                if (value.containsKey(\"title\")) {\n                    localOutput.append(\"${indent}   title: ${value.title}\\n\")\n                }\n                if (value.containsKey(\"description\")) {\n                    localOutput.append(\"${indent}   description: ${value.description}\\n\")\n                }\n            }\n        } else if (value instanceof List) {\n            // Handle the case where value is a List (JSONArray)\n            localOutput.append(\"${indent} - id: ${key}\\n\")\n            localOutput.append(\"${indent}   datatype: array\\n\")\n            localOutput.append(\"${indent}   items:\\n\")\n            value.each { item ->\n                localOutput.append(appendDetails([item], indent + \"   \"))\n            }\n        } else {\n            // Handle other types if necessary\n            localOutput.append(\"${indent} - id: ${key}\\n\")\n            localOutput.append(\"${indent}   datatype: ${value.getClass().getSimpleName()}\\n\")\n            localOutput.append(\"${indent}   value: ${value}\\n\")\n        }\n    }\n    return localOutput.toString()\n}\n\ndata.each { node ->\n    if (node.id != \"__ENV__\") {\n        if (node.schema.properties) {\n            output.append(\"- id: ${node.id}\\n\")\n            output.append(\"  title: ${node.title}\\n\")\n            output.append(\"  outputs:\\n\")\n            output.append(appendDetails(node.schema.properties, indent + \"   \"))\n        }\n    }\n}\n\nreturn [\"metadata\": output.toString()]",
				"isAsync":false,
				"parameters":{
					"data":{
						"ua:type":"mappedArray",
						"source":"{{ _yvKuP.outputs.result.nodes }}",
						"items":"{{ _yvKuP.outputs.result.nodes[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Build metadata string for prompt",
			"title":"Execute groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_puUvx@_DWlKr-1@1",
			"id":"Nx0py",
			"index":0,
			"inputs":{
				"result":{
					"metadata":"{{ _yHf0c.outputs.result.metadata }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":39717,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"version":63
}
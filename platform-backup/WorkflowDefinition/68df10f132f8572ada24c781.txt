{
	"appsUsed":[
		
	],
	"createdTime":1759449329611,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_aHG9Z",
			"priority":0,
			"skip":false,
			"toNodeId":"n_96ZBq",
			"type":"next"
		},
		{
			"fromNodeId":"n_96ZBq",
			"priority":0,
			"skip":false,
			"toNodeId":"_1fTuQ",
			"type":"next"
		},
		{
			"fromNodeId":"_1fTuQ",
			"priority":0,
			"skip":false,
			"toNodeId":"_Y9MIK",
			"type":"next"
		},
		{
			"fromNodeId":"_Y9MIK",
			"priority":0,
			"skip":false,
			"toNodeId":"n_v5jm5",
			"type":"next"
		}
	],
	"id":"68df10f132f8572ada24c781",
	"lastModifiedBy":59995,
	"lcName":" missing next partition",
	"modifiedTime":1759449963944,
	"name":" Missing Next Partition",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":976,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_BzeUm-1",
			"id":"n_aHG9Z",
			"index":1,
			"inputs":{
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"customerId"
					],
					"properties":{
						"customerId":{
							"type":"string",
							"title":"Customer Id"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":3,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_BzeUm-1",
			"id":"n_96ZBq",
			"index":2,
			"inputs":{
				"automationId":"68b932d26607f33c4d7f0988",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"global":false
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":true,
					"timeToLive":"3600",
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"custom_http_endpoint",
				"resourceVersion":871,
				"resourceName":"custom_http_endpoint_execute",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_BzeUm-1",
			"id":"_1fTuQ",
			"index":3,
			"inputs":{
				"isAsync":false,
				"enableProxy":false,
				"requestTimeoutInSecs":-1,
				"httpMethod":"POST",
				"body":{
					"sql":"SELECT DB_NAME, TABLE_NAME, PARTITION_NAME, DATA_SIZE, ROW_COUNT, VISIBLE_VERSION_TIME, PARTITION_VALUE FROM ( SELECT *, ROW_NUMBER() OVER ( PARTITION BY DB_NAME, TABLE_NAME ORDER BY CAST(SUBSTRING(PARTITION_NAME, 2) AS BIGINT) DESC ) as rn FROM information_schema.partitions_meta WHERE PARTITION_NAME IS NOT NULL AND TABLE_NAME NOT LIKE 'ENTITY_%' AND DB_NAME LIKE 'REPORTING_%' AND TABLE_NAME NOT IN ('AUDIT_LOG', 'CONNECTION', 'WORKFLOW_ITERATION_VARIABLE', 'WORKFLOW_VARIABLE')) ranked WHERE rn = 1 ORDER BY DB_NAME, TABLE_NAME;"
				},
				"connectionType":"DIRECT",
				"sslVerify":false,
				"path":"/internal/sql-report/runSQL/query/{{ n_aHG9Z.outputs.customerId }}",
				"responseSchema":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"objects":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"DATA_SIZE":{
										"type":"string",
										"title":"DATA SIZE"
									},
									"PARTITION_NAME":{
										"type":"string",
										"title":"PARTITION NAME"
									},
									"TABLE_NAME":{
										"type":"string",
										"title":"TABLE NAME"
									},
									"DB_NAME":{
										"type":"string",
										"title":"DB NAME"
									}
								},
								"additionalProperties":false,
								"required":[
									"DATA_SIZE",
									"PARTITION_NAME",
									"TABLE_NAME",
									"DB_NAME"
								]
							},
							"title":"objects"
						}
					}
				},
				"baseUrl":"{{ n_96ZBq.outputs.baseInternalUrl }}",
				"httpVersion":"HTTP_2",
				"bodySchema":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"sql":{
							"type":"string",
							"title":"Sql"
						}
					}
				},
				"queryParamsList":[
					{
						"key":"sqlResourceType",
						"value":"PLATFORM"
					}
				],
				"responseContentType":"application/json",
				"authType":"CUSTOM",
				"requestContentType":"application/json",
				"ignoreTrailingSlashes":false,
				"certificateType":"CERT_STRING"
			},
			"skip":false,
			"subTitle":"get partitions",
			"title":"Execute REST request",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":111,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_BzeUm-1",
			"id":"_Y9MIK",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"result":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"DB_NAME":{
										"type":"string",
										"title":"DB_NAME"
									},
									"TABLE_NAME":{
										"type":"string",
										"title":"TABLE_NAME"
									},
									"PARTITION_NAME":{
										"type":"string",
										"title":"PARTITION_NAME"
									},
									"LATEST_PARTITION_END_DATE":{
										"type":"string",
										"title":"LATEST_PARTITION_END_DATE"
									},
									"DAYS_REMAINING":{
										"type":"integer",
										"title":"DAYS_REMAINING"
									},
									"DATA_SIZE":{
										"type":"string",
										"title":"DATA_SIZE"
									},
									"ROW_COUNT":{
										"type":"integer",
										"title":"ROW_COUNT"
									}
								},
								"additionalProperties":false
							},
							"title":"result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"partitions"
					],
					"properties":{
						"partitions":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Partitions"
						}
					}
				},
				"code":"import java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.time.temporal.ChronoUnit\n\ndef filterTablesWithInsufficientPartitions(data) {\n    def now = LocalDateTime.now()\n    def oneWeekFromNow = now.plusWeeks(1)\n    \n    def tablesWithInsufficientPartitions = []\n    \n    data.each { partition ->\n        def tableName = partition.TABLE_NAME\n        def dbName = partition.DB_NAME\n        def partitionName = partition.PARTITION_NAME\n        def partitionValue = partition.PARTITION_VALUE\n        \n        try {\n            def endDate = extractEndDateFromPartitionValue(partitionValue)\n            \n            if (endDate && endDate.isBefore(oneWeekFromNow)) {\n                tablesWithInsufficientPartitions << [\n                    DB_NAME: dbName,\n                    TABLE_NAME: tableName,\n                    PARTITION_NAME: partitionName,\n                    LATEST_PARTITION_END_DATE: endDate.toString(),\n                    DAYS_REMAINING: ChronoUnit.DAYS.between(now, endDate),\n                    DATA_SIZE: partition.DATA_SIZE,\n                    ROW_COUNT: partition.ROW_COUNT\n                ]\n            }\n        } catch (Exception e) {\n            println \"Error processing partition ${dbName}.${tableName}.${partitionName}: ${e.message}\"\n        }\n    }\n    \n    return tablesWithInsufficientPartitions\n}\n\ndef extractEndDateFromPartitionValue(partitionValue) {\n    try {\n        def pattern = /.*\\.\\.types:\\s*\\[[^\\]]+\\];\\s*keys:\\s*\\[([^\\]]+)\\]/\n        def matcher = partitionValue =~ pattern\n        \n        if (matcher.find()) {\n            def endValueStr = matcher.group(1).trim()\n            if (endValueStr.matches(/^\\d+$/)) {\n                def timestamp = Long.parseLong(endValueStr)\n                if (timestamp > 1000000000000L) {\n                    def instant = java.time.Instant.ofEpochMilli(timestamp)\n                    return LocalDateTime.ofInstant(instant, java.time.ZoneId.systemDefault())\n                } else {\n                    def instant = java.time.Instant.ofEpochSecond(timestamp)\n                    return LocalDateTime.ofInstant(instant, java.time.ZoneId.systemDefault())\n                }\n            } else {\n                def formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")\n                return LocalDateTime.parse(endValueStr, formatter)\n            }\n        }\n        return extractDateFromPartitionName(partitionName)\n        \n    } catch (Exception e) {\n        return null\n    }\n}\n\ndef extractDateFromPartitionName(partitionName) {\n    try {\n        if (partitionName.startsWith('p') && partitionName.length() == 9) {\n            def dateStr = partitionName.substring(1)\n            def year = dateStr.substring(0, 4) as int\n            def month = dateStr.substring(4, 6) as int\n            def day = dateStr.substring(6, 8) as int\n            return LocalDateTime.of(year, month, day, 0, 0, 0).plusDays(1)\n        } else if (partitionName.startsWith('p') && partitionName.length() > 10) {\n            def timestamp = Long.parseLong(partitionName.substring(1))\n            def instant = java.time.Instant.ofEpochMilli(timestamp)\n            return LocalDateTime.ofInstant(instant, java.time.ZoneId.systemDefault())\n        }\n    } catch (Exception e) {\n        \n    }\n    return null\n}\n\ndef result = []\nif (binding.hasVariable(\"partitions\") && partitions)\n    result = filterTablesWithInsufficientPartitions(partitions)\n\nreturn [\"result\": result]\n\n\n",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"partitions":{
						"ua:type":"mappedArray",
						"source":"{{ _1fTuQ.outputs.result.objects }}",
						"items":"{{ _1fTuQ.outputs.result.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Filter partitions",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1001,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_BzeUm-1",
			"id":"n_v5jm5",
			"index":5,
			"inputs":{
				"result":"{{ _Y9MIK.outputs.result }}"
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":59995,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":2
}
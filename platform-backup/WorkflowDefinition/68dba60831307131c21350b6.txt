{
	"appsUsed":[
		"figma"
	],
	"createdTime":1759225352240,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_FwUrL",
			"priority":0,
			"skip":false,
			"toNodeId":"n_uqNcn",
			"type":"next"
		},
		{
			"fromNodeId":"n_uqNcn",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Xwx8B",
			"type":"next"
		}
	],
	"id":"68dba60831307131c21350b6",
	"lastModifiedBy":155341,
	"lcName":"testt",
	"modifiedTime":1759329076106,
	"name":"testt",
	"nodes":[
		{
			"context":{
				"appName":"schedule",
				"resourceVersion":814,
				"resourceName":"schedule_default"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_6onmr-1",
			"id":"n_FwUrL",
			"index":1,
			"inputs":{
				"cron":"INTERVAL",
				"sequential":false,
				"interval":15,
				"frequency":"MINUTES"
			},
			"skip":false,
			"subTitle":"Schedule",
			"title":"New recurring event",
			"trigger":{
				"type":"SCHEDULED"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"figma",
				"resourceVersion":3489,
				"connectionId":"685908af5383fe2b52b71f02",
				"resourceName":"figma_get_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_6onmr-1",
			"id":"n_uqNcn",
			"index":2,
			"inputs":{
				"file_id":"d401028xDRb0wmAgwpJEFL"
			},
			"skip":false,
			"subTitle":"Figma",
			"title":"Get file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":871,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_6onmr-1",
			"id":"n_Xwx8B",
			"index":3,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"figmaFile":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Figma File"
						}
					}
				},
				"code":"\nprivate void traverseNodes(def node, def parentNode, Map nameMap, Map parentMap, Map nodeMap) {\n    if (!node) return\n\n    // Populate our maps with the current node's data\n    nameMap[node.id] = node.name\n    nodeMap[node.id] = node\n    if (parentNode) {\n        parentMap[node.id] = parentNode.id\n    }\n\n    // Recurse into children, passing the current node as the new parent\n    if (node.children) {\n        node.children.each { child ->\n            traverseNodes(child, node, nameMap, parentMap, nodeMap)\n        }\n    }\n}\n\n\ndef document = figmaFile\n\n// --- Pass 1: Traverse the tree to build comprehensive maps ---\ndef nodeIdToNameMap = [:]\ndef nodeIdToParentIdMap = [:]\ndef nodeIdToNodeMap = [:] // Store the full node object for easy access\n\ntraverseNodes(document, null, nodeIdToNameMap, nodeIdToParentIdMap, nodeIdToNodeMap)\n\n// --- Pass 2: Iterate through nodes and build the JSON output ---\ndef interactionsList = []\n\nnodeIdToNodeMap.values().each { node ->\n    if (node.interactions) {\n        node.interactions.each { interaction ->\n            interaction.actions.each { action ->\n                if (action?.type == 'NODE' && action?.destinationId) {\n                    // Find visible text by looking for a child text node\n                    def visibleText = node.children?.find { it.type == 'TEXT' }?.characters ?: null\n\n                    // Get parent name from our map\n                    def parentId = nodeIdToParentIdMap[node.id]\n                    def parentName = parentId ? nodeIdToNameMap[parentId] : null\n\n                    // Build the interaction map object\n                    def interactionDetails = [\n                        source_id: node.id,\n                        source_name: node.name ?: \"Unnamed Node\",\n                        source_type: node.type,\n                        visible_text: visibleText,\n                        parent_name: parentName,\n                        trigger: interaction.trigger?.type ?: \"UNKNOWN_TRIGGER\",\n                        action: action.navigation ?: \"ACTION\",\n                        destination_id: action.destinationId\n                    ]\n                    \n                    interactionsList.add(interactionDetails)\n                }\n            }\n        }\n    }\n}\n\nreturn interactionsList",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"figmaFile":"{{ n_uqNcn.outputs.document }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		}
	],
	"ownerUserId":155341,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":10
}
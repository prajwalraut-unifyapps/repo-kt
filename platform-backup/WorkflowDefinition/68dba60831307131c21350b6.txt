{
	"appsUsed":[
		"figma"
	],
	"createdTime":1759225352240,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_FwUrL",
			"priority":0,
			"skip":false,
			"toNodeId":"n_uqNcn",
			"type":"next"
		},
		{
			"fromNodeId":"n_uqNcn",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Xwx8B",
			"type":"next"
		}
	],
	"id":"68dba60831307131c21350b6",
	"lastModifiedBy":155341,
	"lcName":"testt",
	"modifiedTime":1759234922936,
	"name":"testt",
	"nodes":[
		{
			"context":{
				"appName":"schedule",
				"resourceVersion":814,
				"resourceName":"schedule_default"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_6onmr-1",
			"id":"n_FwUrL",
			"index":1,
			"inputs":{
				"cron":"INTERVAL",
				"sequential":false,
				"interval":15,
				"frequency":"MINUTES"
			},
			"skip":false,
			"subTitle":"Schedule",
			"title":"New recurring event",
			"trigger":{
				"type":"SCHEDULED"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"figma",
				"resourceVersion":3489,
				"connectionId":"685908af5383fe2b52b71f02",
				"resourceName":"figma_get_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_6onmr-1",
			"id":"n_uqNcn",
			"index":2,
			"inputs":{
				"file_id":"d401028xDRb0wmAgwpJEFL"
			},
			"skip":false,
			"subTitle":"Figma",
			"title":"Get file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":871,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_6onmr-1",
			"id":"n_Xwx8B",
			"index":3,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"figmaFile":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Figma File"
						}
					}
				},
				"code":"\nclass FigmaInteractionParser {\n\n    String generateFlow(Map figmaFile) {\n        \n        \n        def document = figmaFile\n\n        def nodeIdToNameMap = [:]\n        def allNodes = []\n        traverseNodes(document, nodeIdToNameMap, allNodes)\n\n        def flowBuilder = new StringBuilder(\"Figma Interaction Flow (Updated Logic):\\n\")\n        flowBuilder.append(\"=======================================\\n\")\n        \n        int interactionCount = 0\n        allNodes.each { node ->\n            // *** KEY CHANGE: Look for \"interactions\" instead of \"reactions\" ***\n            if (node.interactions) {\n                node.interactions.each { interaction ->\n                    def triggerType = interaction.trigger?.type ?: \"UNKNOWN_TRIGGER\"\n                    \n                    // *** KEY CHANGE: Loop through the \"actions\" array ***\n                    interaction.actions.each { action ->\n                        if (action?.type == 'NODE' && action?.destinationId) {\n                            def sourceName = node.name ?: \"Unnamed Node\"\n                            def sourceId = node.id\n                            def destinationId = action.destinationId\n                            def destinationName = nodeIdToNameMap[destinationId] ?: \"Unknown Destination\"\n                            def navigationType = action.navigation ?: \"ACTION\"\n\n                            flowBuilder.append(\n                                \"➡️ \\\"${sourceName}\\\" (${sourceId})\\n\" +\n                                \"   └── on [${triggerType}] performs [${navigationType}]\\n\" +\n                                \"   └── to \\\"${destinationName}\\\" (${destinationId})\\n\\n\"\n                            )\n                            interactionCount++\n                        }\n                    }\n                }\n            }\n        }\n        \n        if (interactionCount == 0) {\n            return \"No prototype interactions were found in this file.\"\n        }\n\n        return flowBuilder.toString()\n    }\n\n    private void traverseNodes(def node, Map map, List list) {\n        if (!node) return\n        map[node.id] = node.name\n        list.add(node)\n        if (node.children) {\n            node.children.each { child ->\n                traverseNodes(child, map, list)\n            }\n        }\n    }\n}\n\n\ndef flow = parser.generateFlow(figmaFile)\nreturn [\"flow\": flow]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"figmaFile":"{{ n_uqNcn.outputs.document }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		}
	],
	"ownerUserId":155341,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":6
}
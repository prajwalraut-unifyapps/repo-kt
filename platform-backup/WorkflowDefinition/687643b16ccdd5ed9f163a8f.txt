{
	"appsUsed":[
		"scraperapi"
	],
	"createdTime":1753185858870,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759243546823,
		"deployedBy":-1,
		"deployedDefinitionId":"68dbed1a23e6682b9a51eb19",
		"status":"DEPLOYED",
		"version":24,
		"workflowVersion":90
	},
	"description":"Takes in a single url and indexes it and also extracts the urls from the html.",
	"edges":[
		{
			"fromNodeId":"n_rDYUN",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JOyjL",
			"type":"next"
		},
		{
			"fromNodeId":"n_JOyjL",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_cERsp",
			"type":"if"
		},
		{
			"fromNodeId":"n_cERsp",
			"priority":0,
			"skip":false,
			"toNodeId":"ZUZL3",
			"type":"next"
		},
		{
			"fromNodeId":"ZUZL3",
			"name":"success",
			"priority":0,
			"skip":false,
			"toNodeId":"nVe4M",
			"type":"next"
		},
		{
			"fromNodeId":"ZUZL3",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"iM4rQ",
			"type":"error"
		},
		{
			"fromNodeId":"iM4rQ",
			"name":"success",
			"priority":0,
			"skip":false,
			"toNodeId":"_1ZNde",
			"type":"next"
		},
		{
			"fromNodeId":"iM4rQ",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"T6zpl",
			"type":"error"
		},
		{
			"fromNodeId":"T6zpl",
			"priority":0,
			"skip":false,
			"toNodeId":"WjEJM",
			"type":"next"
		},
		{
			"fromNodeId":"WjEJM",
			"name":"success",
			"priority":0,
			"skip":false,
			"toNodeId":"_2AU8E",
			"type":"next"
		},
		{
			"fromNodeId":"nVe4M",
			"priority":0,
			"skip":false,
			"toNodeId":"GjvCO",
			"type":"next"
		},
		{
			"fromNodeId":"_1ZNde",
			"priority":0,
			"skip":false,
			"toNodeId":"GjvCO",
			"type":"next"
		},
		{
			"fromNodeId":"_2AU8E",
			"priority":0,
			"skip":false,
			"toNodeId":"GjvCO",
			"type":"next"
		},
		{
			"fromNodeId":"WjEJM",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"GjvCO",
			"type":"error"
		},
		{
			"fromNodeId":"GjvCO",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KW89T",
			"type":"next"
		},
		{
			"fromNodeId":"n_KW89T",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"_1auZ9",
			"type":"if"
		},
		{
			"fromNodeId":"_1auZ9",
			"priority":0,
			"skip":false,
			"toNodeId":"_w5Ghc",
			"type":"next"
		},
		{
			"fromNodeId":"n_KW89T",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_w5Ghc",
			"type":"next"
		},
		{
			"fromNodeId":"_w5Ghc",
			"priority":0,
			"skip":false,
			"toNodeId":"_6sNJC",
			"type":"next"
		},
		{
			"fromNodeId":"_6sNJC",
			"priority":0,
			"skip":false,
			"toNodeId":"_EKNXc",
			"type":"next"
		},
		{
			"fromNodeId":"_EKNXc",
			"priority":0,
			"skip":false,
			"toNodeId":"_AVSvb",
			"type":"next"
		},
		{
			"fromNodeId":"_AVSvb",
			"priority":0,
			"skip":false,
			"toNodeId":"n_zSexL",
			"type":"loop"
		},
		{
			"fromNodeId":"n_zSexL",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"_AVSvb",
			"type":"next"
		},
		{
			"fromNodeId":"_AVSvb",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8qpQT",
			"type":"next"
		},
		{
			"fromNodeId":"n_JOyjL",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_nYoX8",
			"type":"next"
		},
		{
			"fromNodeId":"_nYoX8",
			"priority":0,
			"skip":false,
			"toNodeId":"n_37bpD",
			"type":"next"
		},
		{
			"fromNodeId":"n_37bpD",
			"priority":0,
			"skip":false,
			"toNodeId":"_KXhOT",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"687643b16ccdd5ed9f163a8f",
	"lastModifiedBy":-1,
	"lcName":"website or file indexing | page indexer",
	"modifiedTime":1759243579414,
	"name":"Website or File Indexing | Page Indexer",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":445,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Yv0XF-1",
			"id":"n_rDYUN",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"success":{
							"type":"string",
							"title":"success"
						},
						"extracted_links":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"extracted_links"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"url":{
							"type":"string",
							"title":"url"
						},
						"name":{
							"type":"string",
							"title":"name"
						},
						"knowledgeId":{
							"type":"string",
							"title":"knowledgeId"
						},
						"readVersion":{
							"type":"number",
							"title":"readVersion"
						},
						"signalProperties":{
							"type":"object",
							"title":"signalProperties",
							"properties":{
								"waitingInstanceId":{
									"type":"string",
									"title":"waitingInstanceId"
								},
								"waitingInstanceRunTimeType":{
									"type":"string",
									"title":"waitingInstanceRunTimeType"
								},
								"signalId":{
									"type":"string",
									"title":"signalId"
								}
							},
							"required":[]
						},
						"agenticProcessingModelId":{
							"type":"string",
							"title":"agenticProcessingModelId"
						},
						"isFile":{
							"type":"boolean",
							"title":"isFile"
						},
						"fileType":{
							"type":"string",
							"title":"fileType"
						},
						"depth":{
							"type":"integer",
							"title":"Depth"
						},
						"uniqueEntityId":{
							"type":"string",
							"title":"Unique Entity Id"
						},
						"chunkMetadata":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Chunk Metadata"
						},
						"userEmail":{
							"type":"string",
							"title":"User Email"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":438,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Yv0XF-1",
			"id":"n_JOyjL",
			"index":2,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_rDYUN.outputs.isFile }}",
						"filter":{
							"operator":"EQUAL",
							"value":"false"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"isNotFile",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":453,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"n_cERsp",
			"index":3,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"html":{
							"type":"string",
							"title":"html"
						}
					}
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"html":{
							"type":"string",
							"title":"html"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"html",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"scraperapi",
				"resourceVersion":3367,
				"connectionId":"68bfecd21c7eda5125a6edc0",
				"resourceName":"scraperapi_scrape_url",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"ZUZL3",
			"index":4,
			"inputs":{
				"url":"{{ n_rDYUN.outputs.url }}"
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"ScrapeAPI",
			"title":"Scrape URL",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":358,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"ZUZL3@n_JOyjL@_Yv0XF-1@y@success",
			"id":"nVe4M",
			"index":5,
			"inputs":{
				"variables":[
					{
						"source":"{{ n_cERsp.outputs.html }}",
						"value":"{{ ZUZL3.outputs.result }}"
					}
				]
			},
			"skip":false,
			"subTitle":"html",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"custom_http_endpoint",
				"resourceVersion":50,
				"resourceName":"custom_http_endpoint_execute",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"ZUZL3@n_JOyjL@_Yv0XF-1@y@error",
			"id":"iM4rQ",
			"index":6,
			"inputs":{
				"isAsync":false,
				"enableProxy":false,
				"requestTimeoutInSecs":-1,
				"httpMethod":"GET",
				"type":"REST",
				"connectionType":"DIRECT",
				"sslVerify":true,
				"path":"/",
				"baseUrl":"http://api.scraperapi.com",
				"httpVersion":"HTTP_2",
				"queryParamsList":[
					{
						"key":"api_key",
						"value":"6123582eccdc421b14d4aa7a79b723ff"
					},
					{
						"key":"url",
						"value":"{{ n_rDYUN.outputs.url }}"
					},
					{
						"key":"render",
						"value":"true"
					},
					{
						"key":"country_code",
						"value":"us"
					},
					{
						"key":"",
						"value":""
					}
				],
				"responseContentType":"application/json",
				"authType":"CUSTOM",
				"requestContentType":"application/json",
				"ignoreTrailingSlashes":false
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"count":3,
					"enabled":true
				},
				"stepError":"MANUAL"
			},
			"skip":false,
			"subTitle":"Scrape HTML content",
			"title":"Execute request",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":358,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"iM4rQ@ZUZL3@n_JOyjL@_Yv0XF-1@y@error@success",
			"id":"_1ZNde",
			"index":7,
			"inputs":{
				"variables":[
					{
						"source":"{{ n_cERsp.outputs.html }}",
						"value":"{{ iM4rQ.outputs.result }}"
					}
				]
			},
			"skip":false,
			"subTitle":"html",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":154,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"iM4rQ@ZUZL3@n_JOyjL@_Yv0XF-1@y@error@error",
			"id":"T6zpl",
			"index":8,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"baseUrl":{
							"type":"string",
							"title":"baseUrl"
						},
						"path":{
							"type":"string",
							"title":"path"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"url":{
							"type":"string",
							"title":"url"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"// Parse the URL\ndef parsed = new URL(url)\n\n// Construct base URL (protocol + \"://\" + host)\nString base_url = \"${parsed.protocol}://${parsed.host}\"\n\n// Extract path, including query parameters, from URL\nString path = parsed.file\n\nreturn [\n  \"baseUrl\": base_url,\n  \"path\": path\n]",
				"parameters":{
					"url":"{{ n_rDYUN.outputs.url }}"
				}
			},
			"skip":false,
			"subTitle":"extractBaseUrl",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"custom_http_endpoint",
				"resourceVersion":165,
				"resourceName":"custom_http_endpoint_execute",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"iM4rQ@ZUZL3@n_JOyjL@_Yv0XF-1@y@error@error",
			"id":"WjEJM",
			"index":9,
			"inputs":{
				"path":"{{ T6zpl.outputs.result.path }}",
				"baseUrl":"{{ T6zpl.outputs.result.baseUrl }}",
				"responseContentType":"application/json",
				"isAsync":false,
				"enableProxy":false,
				"requestTimeoutInSecs":-1,
				"authType":"CUSTOM",
				"httpMethod":"GET",
				"requestContentType":"application/json",
				"ignoreTrailingSlashes":false,
				"sslVerify":true
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"directlyHitUrl",
			"title":"Execute REST request",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":358,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"WjEJM@iM4rQ@ZUZL3@n_JOyjL@_Yv0XF-1@y@error@error@success",
			"id":"_2AU8E",
			"index":10,
			"inputs":{
				"variables":[
					{
						"source":"{{ n_cERsp.outputs.html }}",
						"value":"{{ WjEJM.outputs.result }}"
					}
				]
			},
			"skip":false,
			"subTitle":"html",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":2,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"GjvCO",
			"index":11,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"status":{
							"type":"string",
							"title":"status"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"html":{
							"type":"string",
							"title":"html"
						}
					}
				},
				"code":"def html = binding.hasVariable(\"html\") ? binding.getVariable(\"html\") : \"\"\ndef status = html?.toString().trim() ? \"notEmpty\" : \"empty\"\nreturn [status: status]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"html":"{{ n_cERsp.outputs.html }}"
				}
			},
			"skip":false,
			"subTitle":"htmlIsEmpty",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":438,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"n_KW89T",
			"index":12,
			"inputs":{
				"filters":[
					{
						"property":"{{ GjvCO.outputs.result.status }}",
						"filter":{
							"operator":"EQUAL",
							"value":"empty"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":455,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KW89T@n_JOyjL@_Yv0XF-1@y@y",
			"id":"_1auZ9",
			"index":13,
			"inputs":{
				"result":{
					"success":"FAILED"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":449,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"_w5Ghc",
			"index":14,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"baseUrl":{
							"type":"string",
							"title":"baseUrl"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"url":{
							"type":"string",
							"title":"url"
						}
					},
					"additionalProperties":false
				},
				"compile_static":false,
				"code":"def extractBaseUrl(String fullUrl) {\n    if (!(fullUrl =~ /^https?:\\/\\//)) {\n        fullUrl = 'https://' + fullUrl\n    }\n    def uri = new URI(fullUrl)\n    return \"$uri.scheme://$uri.host\"\n}\n\ndef url = binding.hasVariable(\"url\")?binding.getVariable(\"url\"):\"\"\n\nreturn [baseUrl : extractBaseUrl(url).toString()]",
				"parameters":{
					"url":"{{ n_rDYUN.outputs.url }}"
				}
			},
			"skip":false,
			"subTitle":"baseUrl",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":177,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"_6sNJC",
			"index":15,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"links":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"links"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"htmlcontent":{
							"type":"string",
							"title":"htmlcontent"
						},
						"base_url":{
							"type":"string",
							"title":"base_url"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"def extract_links(html_content, base_url):\n    from urllib.parse import urljoin\n    from bs4 import BeautifulSoup\n    import json\n    import re\n\n    if not isinstance(html_content, str):\n        html_content = json.dumps(html_content) if isinstance(html_content, dict) else str(html_content)\n    \n    soup = BeautifulSoup(html_content, 'html.parser')\n    all_links = set()\n    \n    soup = BeautifulSoup(html_content, 'html.parser')\n    all_links = set()\n    \n    def should_ignore(url):\n        return \"/icons/\" in url or \"/app-categories/\" in url or \"mailto:\" in url\n    \n    for a in soup.find_all('a', href=True):\n        href = a['href']\n        if not should_ignore(href):\n            full_url = href if href.startswith(('http://', 'https://')) else urljoin(base_url, href)\n            if not should_ignore(full_url):\n                all_links.add(full_url)\n    \n    for link in soup.find_all('link', href=True):\n        href = link['href']\n        if not href.startswith(('/_next/', '.css', '.js')) and not should_ignore(href):  # Skip assets\n            full_url = href if href.startswith(('http://', 'https://')) else urljoin(base_url, href)\n            if not should_ignore(full_url):\n                all_links.add(full_url)\n    \n    for script in soup.find_all('script'):\n        if script.string:\n            try:\n                slug_pattern = r'\"slug\"\\s*:\\s*\"([^\"]+)\"'\n                slugs = re.findall(slug_pattern, script.string)\n                for slug in slugs:\n                    if slug and not should_ignore(slug):\n                        if not slug.startswith(('http://', 'https://', '#', '/')):\n                            full_url = urljoin(base_url, '/' + slug)\n                        elif slug.startswith('/'):\n                            full_url = urljoin(base_url, slug)\n                        else:\n                            continue\n                        \n                        if not should_ignore(full_url):\n                            all_links.add(full_url)\n                \n                redirect_pattern = r'\"redirectLink\"\\s*:\\s*\"([^\"]+)\"'\n                redirect_links = re.findall(redirect_pattern, script.string)\n                for link in redirect_links:\n                    if link and link != 'null' and not should_ignore(link):\n                        full_url = link if link.startswith(('http://', 'https://')) else urljoin(base_url, link)\n                        if not should_ignore(full_url):\n                            all_links.add(full_url)\n                \n                href_pattern = r'\"href\"\\s*:\\s*\"([^\"]+)\"'\n                hrefs = re.findall(href_pattern, script.string)\n                for href in hrefs:\n                    if href and not href.startswith(('/_next/', '.css', '.js', 'data:', 'javascript:')) and not should_ignore(href):\n                        full_url = href if href.startswith(('http://', 'https://')) else urljoin(base_url, href)\n                        if not should_ignore(full_url):\n                            all_links.add(full_url)\n                \n            except Exception:\n                pass\n    \n    for meta in soup.find_all('meta', content=True):\n        if meta.get('property') in ['og:url', 'twitter:url'] or meta.get('name') in ['url']:\n            content = meta['content']\n            if content.startswith(('http://', 'https://')) and not should_ignore(content):\n                all_links.add(content)\n    \n    social_pattern = r'(https?://(?:www\\.)?(?:linkedin\\.com|twitter\\.com|facebook\\.com|github\\.com)/[^\\s\"\\'<>]+)'\n    for match in re.findall(social_pattern, str(soup)):\n        if not should_ignore(match):\n            all_links.add(match)\n    \n    return list(all_links)\n\ndef filter_links_to_same_domain(links, base_url):\n    import tldextract\n    \n    def remove_fragment(url):\n        from urllib.parse import urlparse, urlunparse\n        parsed = urlparse(url)\n        return urlunparse(parsed._replace(fragment=''))\n\n    base_domain = tldextract.extract(base_url).top_domain_under_public_suffix\n    filtered_links = []\n    seen = set()\n    \n    for link in links:\n        link_domain = tldextract.extract(link).top_domain_under_public_suffix\n        if link_domain == base_domain:\n            clean_link = remove_fragment(link)\n            if clean_link not in seen and clean_link != base_url:\n                seen.add(clean_link)\n                filtered_links.append(clean_link)\n    \n    return sorted(filtered_links)\n\nresult = {\"links\": filter_links_to_same_domain(extract_links(htmlcontent, base_url), base_url)}",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"htmlcontent":"{{ n_cERsp.outputs.html }}",
					"base_url":"{{ _w5Ghc.outputs.result.baseUrl }}"
				}
			},
			"skip":false,
			"subTitle":"extractLinks",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"unify_ai",
				"resourceVersion":4,
				"resourceName":"unify_ai_chunking_algorithms",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"_EKNXc",
			"index":16,
			"inputs":{
				"embeddingType":"HUGGING_FACE",
				"inputText":"{{ n_cERsp.outputs.html }}",
				"language":"HTML",
				"embeddingModel":"sentence-transformers/all-mpnet-base-v2",
				"thresholdType":"percentile",
				"maxChunkSize":32768,
				"algorithm":"CODE_TEXT_SPLITTER"
			},
			"skip":false,
			"subTitle":"Split HTML",
			"title":"Text splitter",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":4,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"_AVSvb",
			"index":17,
			"inputs":{
				"repeatMode":"BATCH",
				"listSource":"{{ _EKNXc.outputs.chunks }}",
				"captureIterations":false,
				"batchSize":16
			},
			"skip":false,
			"subTitle":"chunks",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":450,
				"resourceName":"callables_call_automation_batch",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_AVSvb@n_JOyjL@_Yv0XF-1@y@l",
			"id":"n_zSexL",
			"index":18,
			"inputs":{
				"automationId":"685d22faae119e75316ded7d",
				"runtimeConnections":{},
				"synchronous":true,
				"distributeWorkflowLoad":false,
				"parametersList":{
					"source":"{{ _AVSvb.outputs.item }}",
					"ua:type":"mappedArray",
					"items":{
						"html":"{{ _AVSvb.outputs.item[0] }}",
						"knowledge_id":"{{ n_rDYUN.outputs.knowledgeId }}",
						"modelId":"{{ n_rDYUN.outputs.agenticProcessingModelId }}",
						"knowledgeVersion":"{{ n_rDYUN.outputs.readVersion }}",
						"url":"{{ n_rDYUN.outputs.url }}",
						"uniqueEntityId":"{{ n_rDYUN.outputs.uniqueEntityId }}",
						"chunkMetadata":"{{ n_rDYUN.outputs.chunkMetadata }}"
					}
				},
				"version":"-1"
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation (batch)",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":455,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@y",
			"id":"n_8qpQT",
			"index":19,
			"inputs":{
				"result":{
					"success":"OK",
					"extracted_links":{
						"source":"{{ _6sNJC.outputs.result.links }}",
						"ua:type":"mappedArray",
						"items":"{{ _6sNJC.outputs.result.links[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":8,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@n",
			"id":"_nYoX8",
			"index":20,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"title",
						"iconUrl"
					],
					"properties":{
						"title":{
							"type":"string",
							"title":"Title"
						},
						"iconUrl":{
							"type":"string",
							"title":"Icon Url"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"url"
					],
					"properties":{
						"url":{
							"type":"string",
							"title":"Url"
						},
						"name":{
							"type":"string",
							"title":"Name",
							"default":"testName"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"import requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin, urlparse\n\nselectors = [\n    (\"link\", {\"rel\": \"icon\"}),\n    (\"link\", {\"rel\": \"shortcut icon\"}),\n    (\"link\", {\"rel\": \"apple-touch-icon\"}),\n    (\"link\", {\"rel\": \"apple-touch-icon-precomposed\"}),\n]\nheaders = {'User-Agent': (\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '\n        '(KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36'\n    ),\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'Accept-Language': 'en-US,en;q=0.9',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Connection': 'keep-alive',\n    'Upgrade-Insecure-Requests': '1',\n    'Cache-Control': 'max-age=0',\n    'Referer': 'https://google.com'}\n\ndef resolve_base_url(url):\n    raw_url = url[\"url\"] if isinstance(url, dict) and \"url\" in url else url\n    return raw_url\n\nfilteredUrl = resolve_base_url(url)\nparsed = urlparse(filteredUrl)\nbase_url=f\"{parsed.scheme}://{parsed.netloc}\"\ntry:\n    iconUrl=None\n    response = requests.get(resolve_base_url(url), timeout = 10,headers=headers)\n    response.raise_for_status()\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title = soup.title.string.strip() if soup.title and soup.title.string else \"\"\n    if title.lower() in (\"not found\", \"\", \"403 forbidden\") or \"error\" in title.lower():\n        title = name if name else url\n    for tag, attrs in selectors:\n        el = soup.find(tag, attrs=attrs)\n        if el and el.get(\"href\"):\n            potential_url=urljoin(base_url, el[\"href\"])\n            try:\n                icon_resp = requests.get(potential_url, timeout=10, headers=headers)\n                if icon_resp.status_code == 200:\n                    # Check if response is actually an image\n                    content_type = icon_resp.headers.get('content-type', '').lower()\n                    if 'image/' in content_type:\n                        iconUrl = potential_url\n                        break \n            except requests.RequestException:\n                continue \n\n    if not iconUrl:\n        iconUrl = f\"https://www.google.com/s2/favicons?domain={parsed.netloc}&sz=64\"\n    result = {\"title\": title,\"iconUrl\":iconUrl}\nexcept Exception as e:\n    fallback_title = name if name else url\n    iconUrl = f\"https://www.google.com/s2/favicons?domain={parsed.netloc}&sz=64\"\n    \n    result = {\"title\": fallback_title, \"iconUrl\":iconUrl,\"error\": str(e)}\n",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"name":"{{ n_rDYUN.outputs.name }}",
					"url":"{{ n_rDYUN.outputs.url }}"
				}
			},
			"skip":false,
			"subTitle":"Get title",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":460,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@n",
			"id":"n_37bpD",
			"index":21,
			"inputs":{
				"automationId":"68764a904a79e9934a6439f3",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"knowledge_id":"{{ n_rDYUN.outputs.knowledgeId }}",
					"properties":{
						"knowledgeVersion":"{{ n_rDYUN.outputs.readVersion }}"
					},
					"item":"{{ n_rDYUN.outputs.url }}",
					"fileType":"{{ n_rDYUN.outputs.fileType }}",
					"depth":"{{ n_rDYUN.outputs.depth }}",
					"uniqueEntityId":"{{ n_rDYUN.outputs.uniqueEntityId }}",
					"iconUrl":"{{ _nYoX8.outputs.result.iconUrl }}",
					"url":"{{ n_rDYUN.outputs.url }}",
					"title":"{{ _nYoX8.outputs.result.title }}",
					"userEmail":"{{ n_rDYUN.outputs.userEmail }}"
				}
			},
			"skip":false,
			"subTitle":"Download and Index Files",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":455,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JOyjL@_Yv0XF-1@n",
			"id":"_KXhOT",
			"index":22,
			"inputs":{
				"result":{
					"success":"{{ n_37bpD.outputs.status }}",
					"extracted_links":{
						"source":"{{ n_37bpD.outputs.links }}",
						"ua:type":"mappedArray",
						"items":"{{ n_37bpD.outputs.links[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":0,
	"runtimeConnectionAppNames":[
		"scraperapi"
	],
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":91
}